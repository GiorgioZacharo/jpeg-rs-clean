// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module memcpy_omatrix_out_b (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_omatrix_AWVALID,
        m_axi_omatrix_AWREADY,
        m_axi_omatrix_AWADDR,
        m_axi_omatrix_AWID,
        m_axi_omatrix_AWLEN,
        m_axi_omatrix_AWSIZE,
        m_axi_omatrix_AWBURST,
        m_axi_omatrix_AWLOCK,
        m_axi_omatrix_AWCACHE,
        m_axi_omatrix_AWPROT,
        m_axi_omatrix_AWQOS,
        m_axi_omatrix_AWREGION,
        m_axi_omatrix_AWUSER,
        m_axi_omatrix_WVALID,
        m_axi_omatrix_WREADY,
        m_axi_omatrix_WDATA,
        m_axi_omatrix_WSTRB,
        m_axi_omatrix_WLAST,
        m_axi_omatrix_WID,
        m_axi_omatrix_WUSER,
        m_axi_omatrix_ARVALID,
        m_axi_omatrix_ARREADY,
        m_axi_omatrix_ARADDR,
        m_axi_omatrix_ARID,
        m_axi_omatrix_ARLEN,
        m_axi_omatrix_ARSIZE,
        m_axi_omatrix_ARBURST,
        m_axi_omatrix_ARLOCK,
        m_axi_omatrix_ARCACHE,
        m_axi_omatrix_ARPROT,
        m_axi_omatrix_ARQOS,
        m_axi_omatrix_ARREGION,
        m_axi_omatrix_ARUSER,
        m_axi_omatrix_RVALID,
        m_axi_omatrix_RREADY,
        m_axi_omatrix_RDATA,
        m_axi_omatrix_RLAST,
        m_axi_omatrix_RID,
        m_axi_omatrix_RUSER,
        m_axi_omatrix_RRESP,
        m_axi_omatrix_BVALID,
        m_axi_omatrix_BREADY,
        m_axi_omatrix_BRESP,
        m_axi_omatrix_BID,
        m_axi_omatrix_BUSER,
        omatrix_offset_dout,
        omatrix_offset_empty_n,
        omatrix_offset_read,
        i_0_i_i_c_dout,
        i_0_i_i_c_empty_n,
        i_0_i_i_c_read,
        out_buf_0_address0,
        out_buf_0_ce0,
        out_buf_0_q0,
        out_buf_1_address0,
        out_buf_1_ce0,
        out_buf_1_q0,
        out_buf_2_address0,
        out_buf_2_ce0,
        out_buf_2_q0,
        out_buf_3_address0,
        out_buf_3_ce0,
        out_buf_3_q0,
        out_buf_4_address0,
        out_buf_4_ce0,
        out_buf_4_q0,
        out_buf_5_address0,
        out_buf_5_ce0,
        out_buf_5_q0,
        out_buf_6_address0,
        out_buf_6_ce0,
        out_buf_6_q0,
        out_buf_7_address0,
        out_buf_7_ce0,
        out_buf_7_q0,
        out_buf_8_address0,
        out_buf_8_ce0,
        out_buf_8_q0,
        out_buf_9_address0,
        out_buf_9_ce0,
        out_buf_9_q0,
        out_buf_10_address0,
        out_buf_10_ce0,
        out_buf_10_q0,
        out_buf_11_address0,
        out_buf_11_ce0,
        out_buf_11_q0,
        out_buf_12_address0,
        out_buf_12_ce0,
        out_buf_12_q0,
        out_buf_13_address0,
        out_buf_13_ce0,
        out_buf_13_q0,
        out_buf_14_address0,
        out_buf_14_ce0,
        out_buf_14_q0,
        out_buf_15_address0,
        out_buf_15_ce0,
        out_buf_15_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_pp0_stage0 = 8'd4;
parameter    ap_ST_fsm_state6 = 8'd8;
parameter    ap_ST_fsm_state7 = 8'd16;
parameter    ap_ST_fsm_state8 = 8'd32;
parameter    ap_ST_fsm_state9 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_omatrix_AWVALID;
input   m_axi_omatrix_AWREADY;
output  [63:0] m_axi_omatrix_AWADDR;
output  [0:0] m_axi_omatrix_AWID;
output  [31:0] m_axi_omatrix_AWLEN;
output  [2:0] m_axi_omatrix_AWSIZE;
output  [1:0] m_axi_omatrix_AWBURST;
output  [1:0] m_axi_omatrix_AWLOCK;
output  [3:0] m_axi_omatrix_AWCACHE;
output  [2:0] m_axi_omatrix_AWPROT;
output  [3:0] m_axi_omatrix_AWQOS;
output  [3:0] m_axi_omatrix_AWREGION;
output  [0:0] m_axi_omatrix_AWUSER;
output   m_axi_omatrix_WVALID;
input   m_axi_omatrix_WREADY;
output  [31:0] m_axi_omatrix_WDATA;
output  [3:0] m_axi_omatrix_WSTRB;
output   m_axi_omatrix_WLAST;
output  [0:0] m_axi_omatrix_WID;
output  [0:0] m_axi_omatrix_WUSER;
output   m_axi_omatrix_ARVALID;
input   m_axi_omatrix_ARREADY;
output  [63:0] m_axi_omatrix_ARADDR;
output  [0:0] m_axi_omatrix_ARID;
output  [31:0] m_axi_omatrix_ARLEN;
output  [2:0] m_axi_omatrix_ARSIZE;
output  [1:0] m_axi_omatrix_ARBURST;
output  [1:0] m_axi_omatrix_ARLOCK;
output  [3:0] m_axi_omatrix_ARCACHE;
output  [2:0] m_axi_omatrix_ARPROT;
output  [3:0] m_axi_omatrix_ARQOS;
output  [3:0] m_axi_omatrix_ARREGION;
output  [0:0] m_axi_omatrix_ARUSER;
input   m_axi_omatrix_RVALID;
output   m_axi_omatrix_RREADY;
input  [31:0] m_axi_omatrix_RDATA;
input   m_axi_omatrix_RLAST;
input  [0:0] m_axi_omatrix_RID;
input  [0:0] m_axi_omatrix_RUSER;
input  [1:0] m_axi_omatrix_RRESP;
input   m_axi_omatrix_BVALID;
output   m_axi_omatrix_BREADY;
input  [1:0] m_axi_omatrix_BRESP;
input  [0:0] m_axi_omatrix_BID;
input  [0:0] m_axi_omatrix_BUSER;
input  [61:0] omatrix_offset_dout;
input   omatrix_offset_empty_n;
output   omatrix_offset_read;
input  [0:0] i_0_i_i_c_dout;
input   i_0_i_i_c_empty_n;
output   i_0_i_i_c_read;
output  [0:0] out_buf_0_address0;
output   out_buf_0_ce0;
input  [31:0] out_buf_0_q0;
output  [0:0] out_buf_1_address0;
output   out_buf_1_ce0;
input  [31:0] out_buf_1_q0;
output  [0:0] out_buf_2_address0;
output   out_buf_2_ce0;
input  [31:0] out_buf_2_q0;
output  [0:0] out_buf_3_address0;
output   out_buf_3_ce0;
input  [31:0] out_buf_3_q0;
output  [0:0] out_buf_4_address0;
output   out_buf_4_ce0;
input  [31:0] out_buf_4_q0;
output  [0:0] out_buf_5_address0;
output   out_buf_5_ce0;
input  [31:0] out_buf_5_q0;
output  [0:0] out_buf_6_address0;
output   out_buf_6_ce0;
input  [31:0] out_buf_6_q0;
output  [0:0] out_buf_7_address0;
output   out_buf_7_ce0;
input  [31:0] out_buf_7_q0;
output  [0:0] out_buf_8_address0;
output   out_buf_8_ce0;
input  [31:0] out_buf_8_q0;
output  [0:0] out_buf_9_address0;
output   out_buf_9_ce0;
input  [31:0] out_buf_9_q0;
output  [0:0] out_buf_10_address0;
output   out_buf_10_ce0;
input  [31:0] out_buf_10_q0;
output  [0:0] out_buf_11_address0;
output   out_buf_11_ce0;
input  [31:0] out_buf_11_q0;
output  [0:0] out_buf_12_address0;
output   out_buf_12_ce0;
input  [31:0] out_buf_12_q0;
output  [0:0] out_buf_13_address0;
output   out_buf_13_ce0;
input  [31:0] out_buf_13_q0;
output  [0:0] out_buf_14_address0;
output   out_buf_14_ce0;
input  [31:0] out_buf_14_q0;
output  [0:0] out_buf_15_address0;
output   out_buf_15_ce0;
input  [31:0] out_buf_15_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_omatrix_AWVALID;
reg m_axi_omatrix_WVALID;
reg m_axi_omatrix_BREADY;
reg omatrix_offset_read;
reg i_0_i_i_c_read;
reg out_buf_0_ce0;
reg out_buf_1_ce0;
reg out_buf_2_ce0;
reg out_buf_3_ce0;
reg out_buf_4_ce0;
reg out_buf_5_ce0;
reg out_buf_6_ce0;
reg out_buf_7_ce0;
reg out_buf_8_ce0;
reg out_buf_9_ce0;
reg out_buf_10_ce0;
reg out_buf_11_ce0;
reg out_buf_12_ce0;
reg out_buf_13_ce0;
reg out_buf_14_ce0;
reg out_buf_15_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    omatrix_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    omatrix_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_i_i_i_i_reg_464;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464;
reg    omatrix_blk_n_B;
wire    ap_CS_fsm_state10;
reg    omatrix_offset_blk_n;
reg    i_0_i_i_c_blk_n;
reg   [5:0] indvar_i_i_i_i_i_reg_332;
reg   [63:0] omatrix_addr_reg_458;
reg    ap_block_state1;
wire   [0:0] exitcond_i_i_i_i_i_fu_375_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_omatrix_WREADY;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] indvar_next_i_i_i_i_s_fu_381_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] tmp_fu_417_p1;
reg   [3:0] tmp_reg_473;
wire   [31:0] tmp_i_i_fu_421_p18;
reg   [31:0] tmp_i_i_reg_558;
reg    ap_sig_ioackin_m_axi_omatrix_AWREADY;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] newIndex5_i_i_i_i_fu_397_p1;
wire   [63:0] sum_cast_i_i_fu_365_p1;
reg    ap_reg_ioackin_m_axi_omatrix_AWREADY;
reg    ap_reg_ioackin_m_axi_omatrix_WREADY;
wire    ap_block_pp0_stage0_01001;
wire   [5:0] offset_i_i_i_fu_343_p3;
wire   [62:0] omatrix_offset_cast1_fu_355_p1;
wire   [62:0] tmp_i_i_cast_i_i_fu_351_p1;
wire   [62:0] sum_i_i_fu_359_p2;
wire   [1:0] newIndex4_i_i_i_i_fu_387_p4;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_m_axi_omatrix_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_omatrix_WREADY = 1'b0;
end

IZigzagMatrix_f2rcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
IZigzagMatrix_f2rcud_U58(
    .din0(out_buf_0_q0),
    .din1(out_buf_1_q0),
    .din2(out_buf_2_q0),
    .din3(out_buf_3_q0),
    .din4(out_buf_4_q0),
    .din5(out_buf_5_q0),
    .din6(out_buf_6_q0),
    .din7(out_buf_7_q0),
    .din8(out_buf_8_q0),
    .din9(out_buf_9_q0),
    .din10(out_buf_10_q0),
    .din11(out_buf_11_q0),
    .din12(out_buf_12_q0),
    .din13(out_buf_13_q0),
    .din14(out_buf_14_q0),
    .din15(out_buf_15_q0),
    .din16(tmp_reg_473),
    .dout(tmp_i_i_fu_421_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_omatrix_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_m_axi_omatrix_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_sig_ioackin_m_axi_omatrix_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_omatrix_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_m_axi_omatrix_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_omatrix_AWREADY <= 1'b0;
            end else if ((m_axi_omatrix_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_omatrix_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_omatrix_WREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_omatrix_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_omatrix_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_omatrix_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_i_i_i_fu_375_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_i_i_i_i_i_reg_332 <= indvar_next_i_i_i_i_s_fu_381_p2;
    end else if (((ap_sig_ioackin_m_axi_omatrix_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_i_i_i_i_i_reg_332 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 <= exitcond_i_i_i_i_i_reg_464;
        exitcond_i_i_i_i_i_reg_464 <= exitcond_i_i_i_i_i_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((i_0_i_i_c_empty_n == 1'b0) | (omatrix_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        omatrix_addr_reg_458[62 : 0] <= sum_cast_i_i_fu_365_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_i_i_i_reg_464 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_i_i_reg_558 <= tmp_i_i_fu_421_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_i_i_i_fu_375_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_473 <= tmp_fu_417_p1;
    end
end

always @ (*) begin
    if ((exitcond_i_i_i_i_i_fu_375_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_omatrix_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_omatrix_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_omatrix_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_omatrix_AWREADY = m_axi_omatrix_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_omatrix_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_omatrix_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_omatrix_WREADY = m_axi_omatrix_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_omatrix_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_c_blk_n = i_0_i_i_c_empty_n;
    end else begin
        i_0_i_i_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((i_0_i_i_c_empty_n == 1'b0) | (omatrix_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_c_read = 1'b1;
    end else begin
        i_0_i_i_c_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_omatrix_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_omatrix_AWVALID = 1'b1;
    end else begin
        m_axi_omatrix_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_omatrix_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_omatrix_BREADY = 1'b1;
    end else begin
        m_axi_omatrix_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_omatrix_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_omatrix_WVALID = 1'b1;
    end else begin
        m_axi_omatrix_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        omatrix_blk_n_AW = m_axi_omatrix_AWREADY;
    end else begin
        omatrix_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        omatrix_blk_n_B = m_axi_omatrix_BVALID;
    end else begin
        omatrix_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        omatrix_blk_n_W = m_axi_omatrix_WREADY;
    end else begin
        omatrix_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        omatrix_offset_blk_n = omatrix_offset_empty_n;
    end else begin
        omatrix_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((i_0_i_i_c_empty_n == 1'b0) | (omatrix_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        omatrix_offset_read = 1'b1;
    end else begin
        omatrix_offset_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_0_ce0 = 1'b1;
    end else begin
        out_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_10_ce0 = 1'b1;
    end else begin
        out_buf_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_11_ce0 = 1'b1;
    end else begin
        out_buf_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_12_ce0 = 1'b1;
    end else begin
        out_buf_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_13_ce0 = 1'b1;
    end else begin
        out_buf_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_14_ce0 = 1'b1;
    end else begin
        out_buf_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_15_ce0 = 1'b1;
    end else begin
        out_buf_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_1_ce0 = 1'b1;
    end else begin
        out_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_2_ce0 = 1'b1;
    end else begin
        out_buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_3_ce0 = 1'b1;
    end else begin
        out_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_4_ce0 = 1'b1;
    end else begin
        out_buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_5_ce0 = 1'b1;
    end else begin
        out_buf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_6_ce0 = 1'b1;
    end else begin
        out_buf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_7_ce0 = 1'b1;
    end else begin
        out_buf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_8_ce0 = 1'b1;
    end else begin
        out_buf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_buf_9_ce0 = 1'b1;
    end else begin
        out_buf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((i_0_i_i_c_empty_n == 1'b0) | (omatrix_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_m_axi_omatrix_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_i_i_i_fu_375_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_i_i_i_fu_375_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_omatrix_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((i_0_i_i_c_empty_n == 1'b0) | (omatrix_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 == 1'd0) & (ap_sig_ioackin_m_axi_omatrix_WREADY == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_i_i_i_i_i_fu_375_p2 = ((indvar_i_i_i_i_i_reg_332 == 6'd32) ? 1'b1 : 1'b0);

assign indvar_next_i_i_i_i_s_fu_381_p2 = (indvar_i_i_i_i_i_reg_332 + 6'd1);

assign m_axi_omatrix_ARADDR = 64'd0;

assign m_axi_omatrix_ARBURST = 2'd0;

assign m_axi_omatrix_ARCACHE = 4'd0;

assign m_axi_omatrix_ARID = 1'd0;

assign m_axi_omatrix_ARLEN = 32'd0;

assign m_axi_omatrix_ARLOCK = 2'd0;

assign m_axi_omatrix_ARPROT = 3'd0;

assign m_axi_omatrix_ARQOS = 4'd0;

assign m_axi_omatrix_ARREGION = 4'd0;

assign m_axi_omatrix_ARSIZE = 3'd0;

assign m_axi_omatrix_ARUSER = 1'd0;

assign m_axi_omatrix_ARVALID = 1'b0;

assign m_axi_omatrix_AWADDR = omatrix_addr_reg_458;

assign m_axi_omatrix_AWBURST = 2'd0;

assign m_axi_omatrix_AWCACHE = 4'd0;

assign m_axi_omatrix_AWID = 1'd0;

assign m_axi_omatrix_AWLEN = 32'd32;

assign m_axi_omatrix_AWLOCK = 2'd0;

assign m_axi_omatrix_AWPROT = 3'd0;

assign m_axi_omatrix_AWQOS = 4'd0;

assign m_axi_omatrix_AWREGION = 4'd0;

assign m_axi_omatrix_AWSIZE = 3'd0;

assign m_axi_omatrix_AWUSER = 1'd0;

assign m_axi_omatrix_RREADY = 1'b0;

assign m_axi_omatrix_WDATA = tmp_i_i_reg_558;

assign m_axi_omatrix_WID = 1'd0;

assign m_axi_omatrix_WLAST = 1'b0;

assign m_axi_omatrix_WSTRB = 4'd15;

assign m_axi_omatrix_WUSER = 1'd0;

assign newIndex4_i_i_i_i_fu_387_p4 = {{indvar_i_i_i_i_i_reg_332[5:4]}};

assign newIndex5_i_i_i_i_fu_397_p1 = newIndex4_i_i_i_i_fu_387_p4;

assign offset_i_i_i_fu_343_p3 = {{i_0_i_i_c_dout}, {5'd0}};

assign omatrix_offset_cast1_fu_355_p1 = omatrix_offset_dout;

assign out_buf_0_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_10_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_11_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_12_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_13_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_14_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_15_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_1_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_2_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_3_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_4_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_5_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_6_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_7_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_8_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign out_buf_9_address0 = newIndex5_i_i_i_i_fu_397_p1;

assign sum_cast_i_i_fu_365_p1 = sum_i_i_fu_359_p2;

assign sum_i_i_fu_359_p2 = (omatrix_offset_cast1_fu_355_p1 + tmp_i_i_cast_i_i_fu_351_p1);

assign tmp_fu_417_p1 = indvar_i_i_i_i_i_reg_332[3:0];

assign tmp_i_i_cast_i_i_fu_351_p1 = offset_i_i_i_fu_343_p3;

always @ (posedge ap_clk) begin
    omatrix_addr_reg_458[63] <= 1'b0;
end

endmodule //memcpy_omatrix_out_b
