// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XCHENIDCT_F2R_VECTORBODY_S2E_FOREND212_H
#define XCHENIDCT_F2R_VECTORBODY_S2E_FOREND212_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xchenidct_f2r_vectorbody_s2e_forend212_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Bus_ctrl_BaseAddress;
} XChenidct_f2r_vectorbody_s2e_forend212_Config;
#endif

typedef struct {
    u32 Bus_ctrl_BaseAddress;
    u32 IsReady;
} XChenidct_f2r_vectorbody_s2e_forend212;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XChenidct_f2r_vectorbody_s2e_forend212_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XChenidct_f2r_vectorbody_s2e_forend212_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XChenidct_f2r_vectorbody_s2e_forend212_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XChenidct_f2r_vectorbody_s2e_forend212_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XChenidct_f2r_vectorbody_s2e_forend212_Initialize(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr, u16 DeviceId);
XChenidct_f2r_vectorbody_s2e_forend212_Config* XChenidct_f2r_vectorbody_s2e_forend212_LookupConfig(u16 DeviceId);
int XChenidct_f2r_vectorbody_s2e_forend212_CfgInitialize(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr, XChenidct_f2r_vectorbody_s2e_forend212_Config *ConfigPtr);
#else
int XChenidct_f2r_vectorbody_s2e_forend212_Initialize(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr, const char* InstanceName);
int XChenidct_f2r_vectorbody_s2e_forend212_Release(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);
#endif

void XChenidct_f2r_vectorbody_s2e_forend212_Start(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);
u32 XChenidct_f2r_vectorbody_s2e_forend212_IsDone(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);
u32 XChenidct_f2r_vectorbody_s2e_forend212_IsIdle(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);
u32 XChenidct_f2r_vectorbody_s2e_forend212_IsReady(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);
void XChenidct_f2r_vectorbody_s2e_forend212_EnableAutoRestart(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);
void XChenidct_f2r_vectorbody_s2e_forend212_DisableAutoRestart(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);

void XChenidct_f2r_vectorbody_s2e_forend212_Set_y(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr, u64 Data);
u64 XChenidct_f2r_vectorbody_s2e_forend212_Get_y(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);

void XChenidct_f2r_vectorbody_s2e_forend212_InterruptGlobalEnable(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);
void XChenidct_f2r_vectorbody_s2e_forend212_InterruptGlobalDisable(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);
void XChenidct_f2r_vectorbody_s2e_forend212_InterruptEnable(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr, u32 Mask);
void XChenidct_f2r_vectorbody_s2e_forend212_InterruptDisable(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr, u32 Mask);
void XChenidct_f2r_vectorbody_s2e_forend212_InterruptClear(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr, u32 Mask);
u32 XChenidct_f2r_vectorbody_s2e_forend212_InterruptGetEnabled(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);
u32 XChenidct_f2r_vectorbody_s2e_forend212_InterruptGetStatus(XChenidct_f2r_vectorbody_s2e_forend212 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
