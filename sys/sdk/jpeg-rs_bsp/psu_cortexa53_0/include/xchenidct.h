// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XCHENIDCT_H
#define XCHENIDCT_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xchenidct_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Bus_ctrl_BaseAddress;
} XChenidct_Config;
#endif

typedef struct {
    u32 Bus_ctrl_BaseAddress;
    u32 IsReady;
} XChenidct;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XChenidct_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XChenidct_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XChenidct_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XChenidct_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XChenidct_Initialize(XChenidct *InstancePtr, u16 DeviceId);
XChenidct_Config* XChenidct_LookupConfig(u16 DeviceId);
int XChenidct_CfgInitialize(XChenidct *InstancePtr, XChenidct_Config *ConfigPtr);
#else
int XChenidct_Initialize(XChenidct *InstancePtr, const char* InstanceName);
int XChenidct_Release(XChenidct *InstancePtr);
#endif

void XChenidct_Start(XChenidct *InstancePtr);
u32 XChenidct_IsDone(XChenidct *InstancePtr);
u32 XChenidct_IsIdle(XChenidct *InstancePtr);
u32 XChenidct_IsReady(XChenidct *InstancePtr);
void XChenidct_EnableAutoRestart(XChenidct *InstancePtr);
void XChenidct_DisableAutoRestart(XChenidct *InstancePtr);

void XChenidct_Set_x(XChenidct *InstancePtr, u64 Data);
u64 XChenidct_Get_x(XChenidct *InstancePtr);
void XChenidct_Set_y(XChenidct *InstancePtr, u64 Data);
u64 XChenidct_Get_y(XChenidct *InstancePtr);

void XChenidct_InterruptGlobalEnable(XChenidct *InstancePtr);
void XChenidct_InterruptGlobalDisable(XChenidct *InstancePtr);
void XChenidct_InterruptEnable(XChenidct *InstancePtr, u32 Mask);
void XChenidct_InterruptDisable(XChenidct *InstancePtr, u32 Mask);
void XChenidct_InterruptClear(XChenidct *InstancePtr, u32 Mask);
u32 XChenidct_InterruptGetEnabled(XChenidct *InstancePtr);
u32 XChenidct_InterruptGetStatus(XChenidct *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
