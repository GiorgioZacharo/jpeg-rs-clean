// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ChenIDct_f2r_vectorBody_s2e_forEnd212,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.625000,HLS_SYN_LAT=162,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=3771,HLS_SYN_LUT=6235}" *)

module ChenIDct_f2r_vectorBody_s2e_forEnd212 (
        ap_clk,
        ap_rst_n,
        m_axi_BUS_SRC_DST_AWVALID,
        m_axi_BUS_SRC_DST_AWREADY,
        m_axi_BUS_SRC_DST_AWADDR,
        m_axi_BUS_SRC_DST_AWID,
        m_axi_BUS_SRC_DST_AWLEN,
        m_axi_BUS_SRC_DST_AWSIZE,
        m_axi_BUS_SRC_DST_AWBURST,
        m_axi_BUS_SRC_DST_AWLOCK,
        m_axi_BUS_SRC_DST_AWCACHE,
        m_axi_BUS_SRC_DST_AWPROT,
        m_axi_BUS_SRC_DST_AWQOS,
        m_axi_BUS_SRC_DST_AWREGION,
        m_axi_BUS_SRC_DST_AWUSER,
        m_axi_BUS_SRC_DST_WVALID,
        m_axi_BUS_SRC_DST_WREADY,
        m_axi_BUS_SRC_DST_WDATA,
        m_axi_BUS_SRC_DST_WSTRB,
        m_axi_BUS_SRC_DST_WLAST,
        m_axi_BUS_SRC_DST_WID,
        m_axi_BUS_SRC_DST_WUSER,
        m_axi_BUS_SRC_DST_ARVALID,
        m_axi_BUS_SRC_DST_ARREADY,
        m_axi_BUS_SRC_DST_ARADDR,
        m_axi_BUS_SRC_DST_ARID,
        m_axi_BUS_SRC_DST_ARLEN,
        m_axi_BUS_SRC_DST_ARSIZE,
        m_axi_BUS_SRC_DST_ARBURST,
        m_axi_BUS_SRC_DST_ARLOCK,
        m_axi_BUS_SRC_DST_ARCACHE,
        m_axi_BUS_SRC_DST_ARPROT,
        m_axi_BUS_SRC_DST_ARQOS,
        m_axi_BUS_SRC_DST_ARREGION,
        m_axi_BUS_SRC_DST_ARUSER,
        m_axi_BUS_SRC_DST_RVALID,
        m_axi_BUS_SRC_DST_RREADY,
        m_axi_BUS_SRC_DST_RDATA,
        m_axi_BUS_SRC_DST_RLAST,
        m_axi_BUS_SRC_DST_RID,
        m_axi_BUS_SRC_DST_RUSER,
        m_axi_BUS_SRC_DST_RRESP,
        m_axi_BUS_SRC_DST_BVALID,
        m_axi_BUS_SRC_DST_BREADY,
        m_axi_BUS_SRC_DST_BRESP,
        m_axi_BUS_SRC_DST_BID,
        m_axi_BUS_SRC_DST_BUSER,
        s_axi_BUS_CTRL_AWVALID,
        s_axi_BUS_CTRL_AWREADY,
        s_axi_BUS_CTRL_AWADDR,
        s_axi_BUS_CTRL_WVALID,
        s_axi_BUS_CTRL_WREADY,
        s_axi_BUS_CTRL_WDATA,
        s_axi_BUS_CTRL_WSTRB,
        s_axi_BUS_CTRL_ARVALID,
        s_axi_BUS_CTRL_ARREADY,
        s_axi_BUS_CTRL_ARADDR,
        s_axi_BUS_CTRL_RVALID,
        s_axi_BUS_CTRL_RREADY,
        s_axi_BUS_CTRL_RDATA,
        s_axi_BUS_CTRL_RRESP,
        s_axi_BUS_CTRL_BVALID,
        s_axi_BUS_CTRL_BREADY,
        s_axi_BUS_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_pp0_stage0 = 19'd512;
parameter    ap_ST_fsm_state13 = 19'd1024;
parameter    ap_ST_fsm_state14 = 19'd2048;
parameter    ap_ST_fsm_state15 = 19'd4096;
parameter    ap_ST_fsm_pp1_stage0 = 19'd8192;
parameter    ap_ST_fsm_state18 = 19'd16384;
parameter    ap_ST_fsm_state19 = 19'd32768;
parameter    ap_ST_fsm_state20 = 19'd65536;
parameter    ap_ST_fsm_state21 = 19'd131072;
parameter    ap_ST_fsm_state22 = 19'd262144;
parameter    C_S_AXI_BUS_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BUS_SRC_DST_ID_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_ADDR_WIDTH = 64;
parameter    C_M_AXI_BUS_SRC_DST_DATA_WIDTH = 32;
parameter    C_M_AXI_BUS_SRC_DST_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_WUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_BUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_USER_VALUE = 0;
parameter    C_M_AXI_BUS_SRC_DST_PROT_VALUE = 0;
parameter    C_M_AXI_BUS_SRC_DST_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BUS_SRC_DST_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_BUS_SRC_DST_AWVALID;
input   m_axi_BUS_SRC_DST_AWREADY;
output  [C_M_AXI_BUS_SRC_DST_ADDR_WIDTH - 1:0] m_axi_BUS_SRC_DST_AWADDR;
output  [C_M_AXI_BUS_SRC_DST_ID_WIDTH - 1:0] m_axi_BUS_SRC_DST_AWID;
output  [7:0] m_axi_BUS_SRC_DST_AWLEN;
output  [2:0] m_axi_BUS_SRC_DST_AWSIZE;
output  [1:0] m_axi_BUS_SRC_DST_AWBURST;
output  [1:0] m_axi_BUS_SRC_DST_AWLOCK;
output  [3:0] m_axi_BUS_SRC_DST_AWCACHE;
output  [2:0] m_axi_BUS_SRC_DST_AWPROT;
output  [3:0] m_axi_BUS_SRC_DST_AWQOS;
output  [3:0] m_axi_BUS_SRC_DST_AWREGION;
output  [C_M_AXI_BUS_SRC_DST_AWUSER_WIDTH - 1:0] m_axi_BUS_SRC_DST_AWUSER;
output   m_axi_BUS_SRC_DST_WVALID;
input   m_axi_BUS_SRC_DST_WREADY;
output  [C_M_AXI_BUS_SRC_DST_DATA_WIDTH - 1:0] m_axi_BUS_SRC_DST_WDATA;
output  [C_M_AXI_BUS_SRC_DST_WSTRB_WIDTH - 1:0] m_axi_BUS_SRC_DST_WSTRB;
output   m_axi_BUS_SRC_DST_WLAST;
output  [C_M_AXI_BUS_SRC_DST_ID_WIDTH - 1:0] m_axi_BUS_SRC_DST_WID;
output  [C_M_AXI_BUS_SRC_DST_WUSER_WIDTH - 1:0] m_axi_BUS_SRC_DST_WUSER;
output   m_axi_BUS_SRC_DST_ARVALID;
input   m_axi_BUS_SRC_DST_ARREADY;
output  [C_M_AXI_BUS_SRC_DST_ADDR_WIDTH - 1:0] m_axi_BUS_SRC_DST_ARADDR;
output  [C_M_AXI_BUS_SRC_DST_ID_WIDTH - 1:0] m_axi_BUS_SRC_DST_ARID;
output  [7:0] m_axi_BUS_SRC_DST_ARLEN;
output  [2:0] m_axi_BUS_SRC_DST_ARSIZE;
output  [1:0] m_axi_BUS_SRC_DST_ARBURST;
output  [1:0] m_axi_BUS_SRC_DST_ARLOCK;
output  [3:0] m_axi_BUS_SRC_DST_ARCACHE;
output  [2:0] m_axi_BUS_SRC_DST_ARPROT;
output  [3:0] m_axi_BUS_SRC_DST_ARQOS;
output  [3:0] m_axi_BUS_SRC_DST_ARREGION;
output  [C_M_AXI_BUS_SRC_DST_ARUSER_WIDTH - 1:0] m_axi_BUS_SRC_DST_ARUSER;
input   m_axi_BUS_SRC_DST_RVALID;
output   m_axi_BUS_SRC_DST_RREADY;
input  [C_M_AXI_BUS_SRC_DST_DATA_WIDTH - 1:0] m_axi_BUS_SRC_DST_RDATA;
input   m_axi_BUS_SRC_DST_RLAST;
input  [C_M_AXI_BUS_SRC_DST_ID_WIDTH - 1:0] m_axi_BUS_SRC_DST_RID;
input  [C_M_AXI_BUS_SRC_DST_RUSER_WIDTH - 1:0] m_axi_BUS_SRC_DST_RUSER;
input  [1:0] m_axi_BUS_SRC_DST_RRESP;
input   m_axi_BUS_SRC_DST_BVALID;
output   m_axi_BUS_SRC_DST_BREADY;
input  [1:0] m_axi_BUS_SRC_DST_BRESP;
input  [C_M_AXI_BUS_SRC_DST_ID_WIDTH - 1:0] m_axi_BUS_SRC_DST_BID;
input  [C_M_AXI_BUS_SRC_DST_BUSER_WIDTH - 1:0] m_axi_BUS_SRC_DST_BUSER;
input   s_axi_BUS_CTRL_AWVALID;
output   s_axi_BUS_CTRL_AWREADY;
input  [C_S_AXI_BUS_CTRL_ADDR_WIDTH - 1:0] s_axi_BUS_CTRL_AWADDR;
input   s_axi_BUS_CTRL_WVALID;
output   s_axi_BUS_CTRL_WREADY;
input  [C_S_AXI_BUS_CTRL_DATA_WIDTH - 1:0] s_axi_BUS_CTRL_WDATA;
input  [C_S_AXI_BUS_CTRL_WSTRB_WIDTH - 1:0] s_axi_BUS_CTRL_WSTRB;
input   s_axi_BUS_CTRL_ARVALID;
output   s_axi_BUS_CTRL_ARREADY;
input  [C_S_AXI_BUS_CTRL_ADDR_WIDTH - 1:0] s_axi_BUS_CTRL_ARADDR;
output   s_axi_BUS_CTRL_RVALID;
input   s_axi_BUS_CTRL_RREADY;
output  [C_S_AXI_BUS_CTRL_DATA_WIDTH - 1:0] s_axi_BUS_CTRL_RDATA;
output  [1:0] s_axi_BUS_CTRL_RRESP;
output   s_axi_BUS_CTRL_BVALID;
input   s_axi_BUS_CTRL_BREADY;
output  [1:0] s_axi_BUS_CTRL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] y;
reg    BUS_SRC_DST_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    BUS_SRC_DST_blk_n_AW;
wire    ap_CS_fsm_state8;
reg    BUS_SRC_DST_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    BUS_SRC_DST_blk_n_W;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond7_reg_3744;
reg    BUS_SRC_DST_blk_n_B;
wire    ap_CS_fsm_state22;
reg    BUS_SRC_DST_AWVALID;
wire    BUS_SRC_DST_AWREADY;
reg    BUS_SRC_DST_WVALID;
wire    BUS_SRC_DST_WREADY;
reg    BUS_SRC_DST_ARVALID;
wire    BUS_SRC_DST_ARREADY;
wire    BUS_SRC_DST_RVALID;
reg    BUS_SRC_DST_RREADY;
wire   [31:0] BUS_SRC_DST_RDATA;
wire    BUS_SRC_DST_RLAST;
wire   [0:0] BUS_SRC_DST_RID;
wire   [0:0] BUS_SRC_DST_RUSER;
wire   [1:0] BUS_SRC_DST_RRESP;
wire    BUS_SRC_DST_BVALID;
reg    BUS_SRC_DST_BREADY;
wire   [1:0] BUS_SRC_DST_BRESP;
wire   [0:0] BUS_SRC_DST_BID;
wire   [0:0] BUS_SRC_DST_BUSER;
reg   [5:0] indvar_reg_439;
reg   [5:0] indvar5_reg_461;
reg   [63:0] BUS_SRC_DST_addr_reg_3358;
wire   [0:0] exitcond1_fu_684_p2;
wire    ap_CS_fsm_state9;
wire   [1:0] i_1_fu_690_p2;
reg   [1:0] i_1_reg_3369;
wire   [0:0] exitcond2_fu_696_p2;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] indvar_next_fu_702_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] tmp_1_fu_708_p1;
reg   [3:0] tmp_1_reg_3383;
reg   [3:0] ap_reg_pp0_iter1_tmp_1_reg_3383;
reg   [0:0] tmp_2_reg_3387;
reg   [0:0] ap_reg_pp0_iter1_tmp_2_reg_3387;
reg   [31:0] inp1_buf_0_0_reg_3423;
wire   [0:0] exitcond_fu_1072_p2;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_3_fu_1078_p3;
reg   [0:0] tmp_3_reg_3463;
reg   [0:0] tmp_9_reg_3499;
reg   [27:0] tmp_4_reg_3504;
reg   [27:0] tmp_7_reg_3509;
reg   [0:0] tmp_15_reg_3514;
reg   [27:0] tmp_10_reg_3519;
reg   [27:0] tmp_11_reg_3524;
reg   [0:0] tmp_21_reg_3529;
reg   [27:0] tmp_13_reg_3534;
reg   [27:0] tmp_14_reg_3539;
reg   [0:0] tmp_27_reg_3544;
reg   [27:0] tmp_16_reg_3549;
reg   [27:0] tmp_17_reg_3554;
reg   [0:0] tmp_32_reg_3559;
reg   [27:0] tmp_19_reg_3564;
reg   [27:0] tmp_20_reg_3569;
reg   [0:0] tmp_36_reg_3574;
reg   [27:0] tmp_22_reg_3579;
reg   [27:0] tmp_23_reg_3584;
reg   [0:0] tmp_40_reg_3589;
reg   [27:0] tmp_25_reg_3594;
reg   [27:0] tmp_26_reg_3599;
reg   [0:0] tmp_44_reg_3604;
reg   [27:0] tmp_28_reg_3609;
reg   [27:0] tmp_29_reg_3614;
reg   [0:0] tmp_56_reg_3619;
reg   [27:0] tmp_31_reg_3624;
reg   [27:0] tmp_33_reg_3629;
reg   [0:0] tmp_58_reg_3634;
reg   [27:0] tmp_35_reg_3639;
reg   [27:0] tmp_37_reg_3644;
reg   [0:0] tmp_60_reg_3649;
reg   [27:0] tmp_39_reg_3654;
reg   [27:0] tmp_41_reg_3659;
reg   [0:0] tmp_62_reg_3664;
reg   [27:0] tmp_43_reg_3669;
reg   [27:0] tmp_45_reg_3674;
reg   [0:0] tmp_64_reg_3679;
reg   [27:0] tmp_46_reg_3684;
reg   [27:0] tmp_48_reg_3689;
reg   [0:0] tmp_66_reg_3694;
reg   [27:0] tmp_49_reg_3699;
reg   [27:0] tmp_50_reg_3704;
reg   [0:0] tmp_68_reg_3709;
reg   [27:0] tmp_51_reg_3714;
reg   [27:0] tmp_52_reg_3719;
reg   [0:0] tmp_70_reg_3724;
reg   [27:0] tmp_53_reg_3729;
reg   [27:0] tmp_54_reg_3734;
wire   [5:0] k_1_s_fu_2110_p2;
reg   [5:0] k_1_s_reg_3739;
wire   [0:0] exitcond7_fu_2868_p2;
wire    ap_block_state16_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
reg    ap_sig_ioackin_BUS_SRC_DST_WREADY;
reg    ap_block_state17_io;
reg    ap_block_pp1_stage0_11001;
wire   [5:0] indvar_next6_fu_2874_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] tmp_47_fu_2904_p34;
reg   [31:0] tmp_47_reg_3753;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state16;
reg   [1:0] i_reg_428;
reg    ap_sig_ioackin_BUS_SRC_DST_AWREADY;
wire    ap_CS_fsm_state18;
reg   [5:0] k_reg_450;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_fu_674_p1;
reg    ap_reg_ioackin_BUS_SRC_DST_ARREADY;
reg    ap_sig_ioackin_BUS_SRC_DST_ARREADY;
reg    ap_reg_ioackin_BUS_SRC_DST_AWREADY;
reg    ap_reg_ioackin_BUS_SRC_DST_WREADY;
wire    ap_block_pp1_stage0_01001;
reg   [31:0] inp1_buf_0_1_2_fu_144;
wire   [31:0] inp1_buf_0_1_4_fu_1034_p3;
reg   [31:0] inp1_buf_0_1_33_fu_148;
wire   [31:0] inp1_buf_0_1_3_fu_1028_p3;
reg   [31:0] inp1_buf_0_1_34_fu_152;
wire   [31:0] inp1_buf_0_1_6_fu_1012_p3;
reg   [31:0] inp1_buf_0_1_35_fu_156;
wire   [31:0] inp1_buf_0_1_5_fu_1006_p3;
reg   [31:0] inp1_buf_0_1_36_fu_160;
wire   [31:0] inp1_buf_0_1_8_fu_990_p3;
reg   [31:0] inp1_buf_0_1_37_fu_164;
wire   [31:0] inp1_buf_0_1_7_fu_984_p3;
reg   [31:0] inp1_buf_0_1_38_fu_168;
wire   [31:0] inp1_buf_0_1_65_fu_968_p3;
reg   [31:0] inp1_buf_0_1_39_fu_172;
wire   [31:0] inp1_buf_0_1_9_fu_962_p3;
reg   [31:0] inp1_buf_0_1_40_fu_176;
wire   [31:0] inp1_buf_0_1_67_fu_946_p3;
reg   [31:0] inp1_buf_0_1_41_fu_180;
wire   [31:0] inp1_buf_0_1_66_fu_940_p3;
reg   [31:0] inp1_buf_0_1_42_fu_184;
wire   [31:0] inp1_buf_0_1_69_fu_924_p3;
reg   [31:0] inp1_buf_0_1_43_fu_188;
wire   [31:0] inp1_buf_0_1_68_fu_918_p3;
reg   [31:0] inp1_buf_0_1_44_fu_192;
wire   [31:0] inp1_buf_0_1_71_fu_902_p3;
reg   [31:0] inp1_buf_0_1_45_fu_196;
wire   [31:0] inp1_buf_0_1_70_fu_896_p3;
reg   [31:0] inp1_buf_0_1_46_fu_200;
wire   [31:0] inp1_buf_0_1_73_fu_880_p3;
reg   [31:0] inp1_buf_0_1_47_fu_204;
wire   [31:0] inp1_buf_0_1_72_fu_874_p3;
reg   [31:0] inp1_buf_0_1_48_fu_208;
wire   [31:0] inp1_buf_0_1_75_fu_858_p3;
reg   [31:0] inp1_buf_0_1_49_fu_212;
wire   [31:0] inp1_buf_0_1_74_fu_852_p3;
reg   [31:0] inp1_buf_0_1_50_fu_216;
wire   [31:0] inp1_buf_0_1_77_fu_836_p3;
reg   [31:0] inp1_buf_0_1_51_fu_220;
wire   [31:0] inp1_buf_0_1_76_fu_830_p3;
reg   [31:0] inp1_buf_0_1_52_fu_224;
wire   [31:0] inp1_buf_0_1_79_fu_814_p3;
reg   [31:0] inp1_buf_0_1_53_fu_228;
wire   [31:0] inp1_buf_0_1_78_fu_808_p3;
reg   [31:0] inp1_buf_0_1_54_fu_232;
wire   [31:0] inp1_buf_0_1_81_fu_792_p3;
reg   [31:0] inp1_buf_0_1_55_fu_236;
wire   [31:0] inp1_buf_0_1_80_fu_786_p3;
reg   [31:0] inp1_buf_0_1_56_fu_240;
wire   [31:0] inp1_buf_0_1_83_fu_770_p3;
reg   [31:0] inp1_buf_0_1_57_fu_244;
wire   [31:0] inp1_buf_0_1_82_fu_764_p3;
reg   [31:0] inp1_buf_0_1_58_fu_248;
wire   [31:0] inp1_buf_0_1_85_fu_748_p3;
reg   [31:0] inp1_buf_0_1_59_fu_252;
wire   [31:0] inp1_buf_0_1_84_fu_742_p3;
reg   [31:0] inp1_buf_0_1_60_fu_256;
wire   [31:0] inp1_buf_0_1_87_fu_726_p3;
reg   [31:0] inp1_buf_0_1_61_fu_260;
wire   [31:0] inp1_buf_0_1_86_fu_720_p3;
reg   [31:0] inp1_buf_0_1_62_fu_264;
wire   [31:0] inp1_buf_0_1_1_fu_1056_p3;
reg   [31:0] inp1_buf_0_1_63_fu_268;
wire   [31:0] inp1_buf_0_1_fu_1050_p3;
reg   [31:0] out1_buf_0_1_1_fu_272;
wire   [31:0] out1_buf_0_1_2_fu_2146_p3;
reg   [31:0] out1_buf_0_1_3_fu_276;
wire   [31:0] out1_buf_0_1_fu_2139_p3;
reg   [31:0] out1_buf_1_1_1_fu_280;
wire   [31:0] out1_buf_1_1_2_fu_2183_p3;
reg   [31:0] out1_buf_1_1_3_fu_284;
wire   [31:0] out1_buf_1_1_fu_2176_p3;
reg   [31:0] out1_buf_2_1_1_fu_288;
wire   [31:0] out1_buf_2_1_2_fu_2220_p3;
reg   [31:0] out1_buf_2_1_3_fu_292;
wire   [31:0] out1_buf_2_1_fu_2213_p3;
reg   [31:0] out1_buf_3_1_1_fu_296;
wire   [31:0] out1_buf_3_1_2_fu_2257_p3;
reg   [31:0] out1_buf_3_1_3_fu_300;
wire   [31:0] out1_buf_3_1_fu_2250_p3;
reg   [31:0] out1_buf_4_1_1_fu_304;
wire   [31:0] out1_buf_4_1_2_fu_2294_p3;
reg   [31:0] out1_buf_4_1_3_fu_308;
wire   [31:0] out1_buf_4_1_fu_2287_p3;
reg   [31:0] out1_buf_5_1_1_fu_312;
wire   [31:0] out1_buf_5_1_2_fu_2331_p3;
reg   [31:0] out1_buf_5_1_3_fu_316;
wire   [31:0] out1_buf_5_1_fu_2324_p3;
reg   [31:0] out1_buf_6_1_1_fu_320;
wire   [31:0] out1_buf_6_1_2_fu_2368_p3;
reg   [31:0] out1_buf_6_1_3_fu_324;
wire   [31:0] out1_buf_6_1_fu_2361_p3;
reg   [31:0] out1_buf_7_1_1_fu_328;
wire   [31:0] out1_buf_7_1_2_fu_2405_p3;
reg   [31:0] out1_buf_7_1_3_fu_332;
wire   [31:0] out1_buf_7_1_fu_2398_p3;
reg   [31:0] out1_buf_8_1_1_fu_336;
wire   [31:0] out1_buf_8_1_2_fu_2442_p3;
reg   [31:0] out1_buf_8_1_3_fu_340;
wire   [31:0] out1_buf_8_1_fu_2435_p3;
reg   [31:0] out1_buf_9_1_1_fu_344;
wire   [31:0] out1_buf_9_1_2_fu_2479_p3;
reg   [31:0] out1_buf_9_1_3_fu_348;
wire   [31:0] out1_buf_9_1_fu_2472_p3;
reg   [31:0] out1_buf_10_1_1_fu_352;
wire   [31:0] out1_buf_10_1_2_fu_2516_p3;
reg   [31:0] out1_buf_10_1_3_fu_356;
wire   [31:0] out1_buf_10_1_fu_2509_p3;
reg   [31:0] out1_buf_11_1_1_fu_360;
wire   [31:0] out1_buf_11_1_2_fu_2553_p3;
reg   [31:0] out1_buf_11_1_3_fu_364;
wire   [31:0] out1_buf_11_1_fu_2546_p3;
reg   [31:0] out1_buf_12_1_1_fu_368;
wire   [31:0] out1_buf_12_1_2_fu_2590_p3;
reg   [31:0] out1_buf_12_1_3_fu_372;
wire   [31:0] out1_buf_12_1_fu_2583_p3;
reg   [31:0] out1_buf_13_1_1_fu_376;
wire   [31:0] out1_buf_13_1_2_fu_2627_p3;
reg   [31:0] out1_buf_13_1_3_fu_380;
wire   [31:0] out1_buf_13_1_fu_2620_p3;
reg   [31:0] out1_buf_14_1_1_fu_384;
wire   [31:0] out1_buf_14_1_2_fu_2664_p3;
reg   [31:0] out1_buf_14_1_3_fu_388;
wire   [31:0] out1_buf_14_1_fu_2657_p3;
reg   [31:0] out1_buf_15_1_1_fu_392;
wire   [31:0] out1_buf_15_1_2_fu_2701_p3;
reg   [31:0] out1_buf_15_1_3_fu_396;
wire   [31:0] out1_buf_15_1_fu_2694_p3;
wire   [61:0] y1_fu_664_p4;
wire   [31:0] inp1_buf_load_0_phi_fu_1086_p3;
wire   [0:0] tmp_8_fu_1094_p3;
wire   [31:0] tmp_4_cast_cast_fu_1102_p3;
wire   [31:0] tmp_s_fu_1110_p2;
wire   [31:0] p_neg_fu_1124_p2;
wire   [31:0] inp1_buf_load_1_phi_fu_1150_p3;
wire   [0:0] tmp_12_fu_1158_p3;
wire   [31:0] tmp_11_cast_cast_fu_1166_p3;
wire   [31:0] tmp_1_21_fu_1174_p2;
wire   [31:0] p_neg_1_fu_1188_p2;
wire   [31:0] inp1_buf_load_2_phi_fu_1214_p3;
wire   [0:0] tmp_18_fu_1222_p3;
wire   [31:0] tmp_14_cast_cast_fu_1230_p3;
wire   [31:0] tmp_2_22_fu_1238_p2;
wire   [31:0] p_neg_2_fu_1252_p2;
wire   [31:0] inp1_buf_load_3_phi_fu_1278_p3;
wire   [0:0] tmp_24_fu_1286_p3;
wire   [31:0] tmp_17_cast_cast_fu_1294_p3;
wire   [31:0] tmp_3_23_fu_1302_p2;
wire   [31:0] p_neg_3_fu_1316_p2;
wire   [31:0] inp1_buf_load_4_phi_fu_1342_p3;
wire   [0:0] tmp_30_fu_1350_p3;
wire   [31:0] tmp_20_cast_cast_fu_1358_p3;
wire   [31:0] tmp_4_24_fu_1366_p2;
wire   [31:0] p_neg_4_fu_1380_p2;
wire   [31:0] inp1_buf_load_5_phi_fu_1406_p3;
wire   [0:0] tmp_34_fu_1414_p3;
wire   [31:0] tmp_23_cast_cast_fu_1422_p3;
wire   [31:0] tmp_5_fu_1430_p2;
wire   [31:0] p_neg_5_fu_1444_p2;
wire   [31:0] inp1_buf_load_6_phi_fu_1470_p3;
wire   [0:0] tmp_38_fu_1478_p3;
wire   [31:0] tmp_26_cast_cast_fu_1486_p3;
wire   [31:0] tmp_6_fu_1494_p2;
wire   [31:0] p_neg_6_fu_1508_p2;
wire   [31:0] inp1_buf_load_7_phi_fu_1534_p3;
wire   [0:0] tmp_42_fu_1542_p3;
wire   [31:0] tmp_29_cast_cast_fu_1550_p3;
wire   [31:0] tmp_7_25_fu_1558_p2;
wire   [31:0] p_neg_7_fu_1572_p2;
wire   [31:0] inp1_buf_load_8_phi_fu_1598_p3;
wire   [0:0] tmp_55_fu_1606_p3;
wire   [31:0] tmp_32_cast_cast_fu_1614_p3;
wire   [31:0] tmp_8_26_fu_1622_p2;
wire   [31:0] p_neg_8_fu_1636_p2;
wire   [31:0] inp1_buf_load_9_phi_fu_1662_p3;
wire   [0:0] tmp_57_fu_1670_p3;
wire   [31:0] tmp_35_cast_cast_fu_1678_p3;
wire   [31:0] tmp_9_27_fu_1686_p2;
wire   [31:0] p_neg_9_fu_1700_p2;
wire   [31:0] inp1_buf_load_10_phi_fu_1726_p3;
wire   [0:0] tmp_59_fu_1734_p3;
wire   [31:0] tmp_38_cast_cast_fu_1742_p3;
wire   [31:0] tmp_s_28_fu_1750_p2;
wire   [31:0] p_neg_s_fu_1764_p2;
wire   [31:0] inp1_buf_load_11_phi_fu_1790_p3;
wire   [0:0] tmp_61_fu_1798_p3;
wire   [31:0] tmp_41_cast_cast_fu_1806_p3;
wire   [31:0] tmp_10_31_fu_1814_p2;
wire   [31:0] p_neg_10_fu_1828_p2;
wire   [31:0] inp1_buf_load_12_phi_fu_1854_p3;
wire   [0:0] tmp_63_fu_1862_p3;
wire   [31:0] tmp_44_cast_cast_fu_1870_p3;
wire   [31:0] tmp_11_32_fu_1878_p2;
wire   [31:0] p_neg_11_fu_1892_p2;
wire   [31:0] inp1_buf_load_13_phi_fu_1918_p3;
wire   [0:0] tmp_65_fu_1926_p3;
wire   [31:0] tmp_47_cast_cast_fu_1934_p3;
wire   [31:0] tmp_12_33_fu_1942_p2;
wire   [31:0] p_neg_12_fu_1956_p2;
wire   [31:0] inp1_buf_load_14_phi_fu_1982_p3;
wire   [0:0] tmp_67_fu_1990_p3;
wire   [31:0] tmp_50_cast_cast_fu_1998_p3;
wire   [31:0] tmp_13_34_fu_2006_p2;
wire   [31:0] p_neg_13_fu_2020_p2;
wire   [31:0] inp1_buf_load_15_phi_fu_2046_p3;
wire   [0:0] tmp_69_fu_2054_p3;
wire   [31:0] tmp_53_cast_cast_fu_2062_p3;
wire   [31:0] tmp_14_35_fu_2070_p2;
wire   [31:0] p_neg_14_fu_2084_p2;
wire   [28:0] p_lshr_cast_fu_2116_p1;
wire   [28:0] p_neg_t_fu_2119_p2;
wire   [28:0] p_lshr_f_cast_fu_2125_p1;
wire   [28:0] out1_buf_0_1_5_fu_2128_p3;
wire  signed [31:0] out1_buf_0_1_0_cas_fu_2135_p1;
wire   [28:0] p_lshr_1_cast_fu_2153_p1;
wire   [28:0] p_neg_t_1_fu_2156_p2;
wire   [28:0] p_lshr_f_1_cast_fu_2162_p1;
wire   [28:0] out1_buf_1_1_5_fu_2165_p3;
wire  signed [31:0] out1_buf_1_1_0_cas_fu_2172_p1;
wire   [28:0] p_lshr_2_cast_fu_2190_p1;
wire   [28:0] p_neg_t_2_fu_2193_p2;
wire   [28:0] p_lshr_f_2_cast_fu_2199_p1;
wire   [28:0] out1_buf_2_1_5_fu_2202_p3;
wire  signed [31:0] out1_buf_2_1_0_cas_fu_2209_p1;
wire   [28:0] p_lshr_3_cast_fu_2227_p1;
wire   [28:0] p_neg_t_3_fu_2230_p2;
wire   [28:0] p_lshr_f_3_cast_fu_2236_p1;
wire   [28:0] out1_buf_3_1_5_fu_2239_p3;
wire  signed [31:0] out1_buf_3_1_0_cas_fu_2246_p1;
wire   [28:0] p_lshr_4_cast_fu_2264_p1;
wire   [28:0] p_neg_t_4_fu_2267_p2;
wire   [28:0] p_lshr_f_4_cast_fu_2273_p1;
wire   [28:0] out1_buf_4_1_5_fu_2276_p3;
wire  signed [31:0] out1_buf_4_1_0_cas_fu_2283_p1;
wire   [28:0] p_lshr_5_cast_fu_2301_p1;
wire   [28:0] p_neg_t_5_fu_2304_p2;
wire   [28:0] p_lshr_f_5_cast_fu_2310_p1;
wire   [28:0] out1_buf_5_1_5_fu_2313_p3;
wire  signed [31:0] out1_buf_5_1_0_cas_fu_2320_p1;
wire   [28:0] p_lshr_6_cast_fu_2338_p1;
wire   [28:0] p_neg_t_6_fu_2341_p2;
wire   [28:0] p_lshr_f_6_cast_fu_2347_p1;
wire   [28:0] out1_buf_6_1_5_fu_2350_p3;
wire  signed [31:0] out1_buf_6_1_0_cas_fu_2357_p1;
wire   [28:0] p_lshr_7_cast_fu_2375_p1;
wire   [28:0] p_neg_t_7_fu_2378_p2;
wire   [28:0] p_lshr_f_7_cast_fu_2384_p1;
wire   [28:0] out1_buf_7_1_5_fu_2387_p3;
wire  signed [31:0] out1_buf_7_1_0_cas_fu_2394_p1;
wire   [28:0] p_lshr_8_cast_fu_2412_p1;
wire   [28:0] p_neg_t_8_fu_2415_p2;
wire   [28:0] p_lshr_f_8_cast_fu_2421_p1;
wire   [28:0] out1_buf_8_1_5_fu_2424_p3;
wire  signed [31:0] out1_buf_8_1_0_cas_fu_2431_p1;
wire   [28:0] p_lshr_9_cast_fu_2449_p1;
wire   [28:0] p_neg_t_9_fu_2452_p2;
wire   [28:0] p_lshr_f_9_cast_fu_2458_p1;
wire   [28:0] out1_buf_9_1_5_fu_2461_p3;
wire  signed [31:0] out1_buf_9_1_0_cas_fu_2468_p1;
wire   [28:0] p_lshr_cast_29_fu_2486_p1;
wire   [28:0] p_neg_t_s_fu_2489_p2;
wire   [28:0] p_lshr_f_cast_30_fu_2495_p1;
wire   [28:0] out1_buf_10_1_5_fu_2498_p3;
wire  signed [31:0] out1_buf_10_1_0_ca_fu_2505_p1;
wire   [28:0] p_lshr_10_cast_fu_2523_p1;
wire   [28:0] p_neg_t_10_fu_2526_p2;
wire   [28:0] p_lshr_f_10_cast_fu_2532_p1;
wire   [28:0] out1_buf_11_1_5_fu_2535_p3;
wire  signed [31:0] out1_buf_11_1_0_ca_fu_2542_p1;
wire   [28:0] p_lshr_11_cast_fu_2560_p1;
wire   [28:0] p_neg_t_11_fu_2563_p2;
wire   [28:0] p_lshr_f_11_cast_fu_2569_p1;
wire   [28:0] out1_buf_12_1_5_fu_2572_p3;
wire  signed [31:0] out1_buf_12_1_0_ca_fu_2579_p1;
wire   [28:0] p_lshr_12_cast_fu_2597_p1;
wire   [28:0] p_neg_t_12_fu_2600_p2;
wire   [28:0] p_lshr_f_12_cast_fu_2606_p1;
wire   [28:0] out1_buf_13_1_5_fu_2609_p3;
wire  signed [31:0] out1_buf_13_1_0_ca_fu_2616_p1;
wire   [28:0] p_lshr_13_cast_fu_2634_p1;
wire   [28:0] p_neg_t_13_fu_2637_p2;
wire   [28:0] p_lshr_f_13_cast_fu_2643_p1;
wire   [28:0] out1_buf_14_1_5_fu_2646_p3;
wire  signed [31:0] out1_buf_14_1_0_ca_fu_2653_p1;
wire   [28:0] p_lshr_14_cast_fu_2671_p1;
wire   [28:0] p_neg_t_14_fu_2674_p2;
wire   [28:0] p_lshr_f_14_cast_fu_2680_p1;
wire   [28:0] out1_buf_15_1_5_fu_2683_p3;
wire  signed [31:0] out1_buf_15_1_0_ca_fu_2690_p1;
wire   [3:0] tmp_71_fu_2880_p1;
wire   [0:0] tmp_72_fu_2884_p3;
wire   [4:0] tmp_5_39_fu_2892_p3;
wire   [5:0] tmp_47_fu_2904_p33;
reg   [18:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_2333;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_BUS_SRC_DST_ARREADY = 1'b0;
#0 ap_reg_ioackin_BUS_SRC_DST_AWREADY = 1'b0;
#0 ap_reg_ioackin_BUS_SRC_DST_WREADY = 1'b0;
end

ChenIDct_f2r_vectorBody_s2e_forEnd212_BUS_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS_CTRL_DATA_WIDTH ))
ChenIDct_f2r_vectorBody_s2e_forEnd212_BUS_CTRL_s_axi_U(
    .AWVALID(s_axi_BUS_CTRL_AWVALID),
    .AWREADY(s_axi_BUS_CTRL_AWREADY),
    .AWADDR(s_axi_BUS_CTRL_AWADDR),
    .WVALID(s_axi_BUS_CTRL_WVALID),
    .WREADY(s_axi_BUS_CTRL_WREADY),
    .WDATA(s_axi_BUS_CTRL_WDATA),
    .WSTRB(s_axi_BUS_CTRL_WSTRB),
    .ARVALID(s_axi_BUS_CTRL_ARVALID),
    .ARREADY(s_axi_BUS_CTRL_ARREADY),
    .ARADDR(s_axi_BUS_CTRL_ARADDR),
    .RVALID(s_axi_BUS_CTRL_RVALID),
    .RREADY(s_axi_BUS_CTRL_RREADY),
    .RDATA(s_axi_BUS_CTRL_RDATA),
    .RRESP(s_axi_BUS_CTRL_RRESP),
    .BVALID(s_axi_BUS_CTRL_BVALID),
    .BREADY(s_axi_BUS_CTRL_BREADY),
    .BRESP(s_axi_BUS_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .y(y)
);

ChenIDct_f2r_vectorBody_s2e_forEnd212_BUS_SRC_DST_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BUS_SRC_DST_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BUS_SRC_DST_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BUS_SRC_DST_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BUS_SRC_DST_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BUS_SRC_DST_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BUS_SRC_DST_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BUS_SRC_DST_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BUS_SRC_DST_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_BUS_SRC_DST_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BUS_SRC_DST_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BUS_SRC_DST_CACHE_VALUE ))
ChenIDct_f2r_vectorBody_s2e_forEnd212_BUS_SRC_DST_m_axi_U(
    .AWVALID(m_axi_BUS_SRC_DST_AWVALID),
    .AWREADY(m_axi_BUS_SRC_DST_AWREADY),
    .AWADDR(m_axi_BUS_SRC_DST_AWADDR),
    .AWID(m_axi_BUS_SRC_DST_AWID),
    .AWLEN(m_axi_BUS_SRC_DST_AWLEN),
    .AWSIZE(m_axi_BUS_SRC_DST_AWSIZE),
    .AWBURST(m_axi_BUS_SRC_DST_AWBURST),
    .AWLOCK(m_axi_BUS_SRC_DST_AWLOCK),
    .AWCACHE(m_axi_BUS_SRC_DST_AWCACHE),
    .AWPROT(m_axi_BUS_SRC_DST_AWPROT),
    .AWQOS(m_axi_BUS_SRC_DST_AWQOS),
    .AWREGION(m_axi_BUS_SRC_DST_AWREGION),
    .AWUSER(m_axi_BUS_SRC_DST_AWUSER),
    .WVALID(m_axi_BUS_SRC_DST_WVALID),
    .WREADY(m_axi_BUS_SRC_DST_WREADY),
    .WDATA(m_axi_BUS_SRC_DST_WDATA),
    .WSTRB(m_axi_BUS_SRC_DST_WSTRB),
    .WLAST(m_axi_BUS_SRC_DST_WLAST),
    .WID(m_axi_BUS_SRC_DST_WID),
    .WUSER(m_axi_BUS_SRC_DST_WUSER),
    .ARVALID(m_axi_BUS_SRC_DST_ARVALID),
    .ARREADY(m_axi_BUS_SRC_DST_ARREADY),
    .ARADDR(m_axi_BUS_SRC_DST_ARADDR),
    .ARID(m_axi_BUS_SRC_DST_ARID),
    .ARLEN(m_axi_BUS_SRC_DST_ARLEN),
    .ARSIZE(m_axi_BUS_SRC_DST_ARSIZE),
    .ARBURST(m_axi_BUS_SRC_DST_ARBURST),
    .ARLOCK(m_axi_BUS_SRC_DST_ARLOCK),
    .ARCACHE(m_axi_BUS_SRC_DST_ARCACHE),
    .ARPROT(m_axi_BUS_SRC_DST_ARPROT),
    .ARQOS(m_axi_BUS_SRC_DST_ARQOS),
    .ARREGION(m_axi_BUS_SRC_DST_ARREGION),
    .ARUSER(m_axi_BUS_SRC_DST_ARUSER),
    .RVALID(m_axi_BUS_SRC_DST_RVALID),
    .RREADY(m_axi_BUS_SRC_DST_RREADY),
    .RDATA(m_axi_BUS_SRC_DST_RDATA),
    .RLAST(m_axi_BUS_SRC_DST_RLAST),
    .RID(m_axi_BUS_SRC_DST_RID),
    .RUSER(m_axi_BUS_SRC_DST_RUSER),
    .RRESP(m_axi_BUS_SRC_DST_RRESP),
    .BVALID(m_axi_BUS_SRC_DST_BVALID),
    .BREADY(m_axi_BUS_SRC_DST_BREADY),
    .BRESP(m_axi_BUS_SRC_DST_BRESP),
    .BID(m_axi_BUS_SRC_DST_BID),
    .BUSER(m_axi_BUS_SRC_DST_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(BUS_SRC_DST_ARVALID),
    .I_ARREADY(BUS_SRC_DST_ARREADY),
    .I_ARADDR(BUS_SRC_DST_addr_reg_3358),
    .I_ARID(1'd0),
    .I_ARLEN(32'd64),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(BUS_SRC_DST_RVALID),
    .I_RREADY(BUS_SRC_DST_RREADY),
    .I_RDATA(BUS_SRC_DST_RDATA),
    .I_RID(BUS_SRC_DST_RID),
    .I_RUSER(BUS_SRC_DST_RUSER),
    .I_RRESP(BUS_SRC_DST_RRESP),
    .I_RLAST(BUS_SRC_DST_RLAST),
    .I_AWVALID(BUS_SRC_DST_AWVALID),
    .I_AWREADY(BUS_SRC_DST_AWREADY),
    .I_AWADDR(BUS_SRC_DST_addr_reg_3358),
    .I_AWID(1'd0),
    .I_AWLEN(32'd64),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(BUS_SRC_DST_WVALID),
    .I_WREADY(BUS_SRC_DST_WREADY),
    .I_WDATA(tmp_47_reg_3753),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(BUS_SRC_DST_BVALID),
    .I_BREADY(BUS_SRC_DST_BREADY),
    .I_BRESP(BUS_SRC_DST_BRESP),
    .I_BID(BUS_SRC_DST_BID),
    .I_BUSER(BUS_SRC_DST_BUSER)
);

ChenIDct_f2r_vectbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
ChenIDct_f2r_vectbkb_U1(
    .din0(out1_buf_0_1_1_fu_272),
    .din1(out1_buf_0_1_3_fu_276),
    .din2(out1_buf_1_1_1_fu_280),
    .din3(out1_buf_1_1_3_fu_284),
    .din4(out1_buf_2_1_1_fu_288),
    .din5(out1_buf_2_1_3_fu_292),
    .din6(out1_buf_3_1_1_fu_296),
    .din7(out1_buf_3_1_3_fu_300),
    .din8(out1_buf_4_1_1_fu_304),
    .din9(out1_buf_4_1_3_fu_308),
    .din10(out1_buf_5_1_1_fu_312),
    .din11(out1_buf_5_1_3_fu_316),
    .din12(out1_buf_6_1_1_fu_320),
    .din13(out1_buf_6_1_3_fu_324),
    .din14(out1_buf_7_1_1_fu_328),
    .din15(out1_buf_7_1_3_fu_332),
    .din16(out1_buf_8_1_1_fu_336),
    .din17(out1_buf_8_1_3_fu_340),
    .din18(out1_buf_9_1_1_fu_344),
    .din19(out1_buf_9_1_3_fu_348),
    .din20(out1_buf_10_1_1_fu_352),
    .din21(out1_buf_10_1_3_fu_356),
    .din22(out1_buf_11_1_1_fu_360),
    .din23(out1_buf_11_1_3_fu_364),
    .din24(out1_buf_12_1_1_fu_368),
    .din25(out1_buf_12_1_3_fu_372),
    .din26(out1_buf_13_1_1_fu_376),
    .din27(out1_buf_13_1_3_fu_380),
    .din28(out1_buf_14_1_1_fu_384),
    .din29(out1_buf_14_1_3_fu_388),
    .din30(out1_buf_15_1_1_fu_392),
    .din31(out1_buf_15_1_3_fu_396),
    .din32(tmp_47_fu_2904_p33),
    .dout(tmp_47_fu_2904_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond1_fu_684_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond1_fu_684_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((exitcond_fu_1072_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state16))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state16);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((exitcond_fu_1072_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_BUS_SRC_DST_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1)) begin
                ap_reg_ioackin_BUS_SRC_DST_ARREADY <= 1'b0;
            end else if ((1'b1 == BUS_SRC_DST_ARREADY)) begin
                ap_reg_ioackin_BUS_SRC_DST_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_BUS_SRC_DST_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            if ((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1)) begin
                ap_reg_ioackin_BUS_SRC_DST_AWREADY <= 1'b0;
            end else if ((1'b1 == BUS_SRC_DST_AWREADY)) begin
                ap_reg_ioackin_BUS_SRC_DST_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_BUS_SRC_DST_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_2333)) begin
            if ((1'b0 == ap_block_pp1_stage0_11001)) begin
                ap_reg_ioackin_BUS_SRC_DST_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp1_stage0_01001) & (1'b1 == BUS_SRC_DST_WREADY))) begin
                ap_reg_ioackin_BUS_SRC_DST_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_reg_428 <= i_1_reg_3369;
    end else if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_reg_428 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1072_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        indvar5_reg_461 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond7_fu_2868_p2 == 1'd0))) begin
        indvar5_reg_461 <= indvar_next6_fu_2874_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_696_p2 == 1'd0))) begin
        indvar_reg_439 <= indvar_next_fu_702_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond1_fu_684_p2 == 1'd0))) begin
        indvar_reg_439 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k_reg_450 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        k_reg_450 <= k_1_s_reg_3739;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        BUS_SRC_DST_addr_reg_3358[61 : 0] <= tmp_fu_674_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_tmp_1_reg_3383 <= tmp_1_reg_3383;
        ap_reg_pp0_iter1_tmp_2_reg_3387 <= tmp_2_reg_3387;
        inp1_buf_0_0_reg_3423 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond7_reg_3744 <= exitcond7_fu_2868_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_3369 <= i_1_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_2_fu_144 <= inp1_buf_0_1_4_fu_1034_p3;
        inp1_buf_0_1_33_fu_148 <= inp1_buf_0_1_3_fu_1028_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_34_fu_152 <= inp1_buf_0_1_6_fu_1012_p3;
        inp1_buf_0_1_35_fu_156 <= inp1_buf_0_1_5_fu_1006_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_36_fu_160 <= inp1_buf_0_1_8_fu_990_p3;
        inp1_buf_0_1_37_fu_164 <= inp1_buf_0_1_7_fu_984_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_38_fu_168 <= inp1_buf_0_1_65_fu_968_p3;
        inp1_buf_0_1_39_fu_172 <= inp1_buf_0_1_9_fu_962_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_40_fu_176 <= inp1_buf_0_1_67_fu_946_p3;
        inp1_buf_0_1_41_fu_180 <= inp1_buf_0_1_66_fu_940_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_42_fu_184 <= inp1_buf_0_1_69_fu_924_p3;
        inp1_buf_0_1_43_fu_188 <= inp1_buf_0_1_68_fu_918_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_44_fu_192 <= inp1_buf_0_1_71_fu_902_p3;
        inp1_buf_0_1_45_fu_196 <= inp1_buf_0_1_70_fu_896_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_46_fu_200 <= inp1_buf_0_1_73_fu_880_p3;
        inp1_buf_0_1_47_fu_204 <= inp1_buf_0_1_72_fu_874_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_48_fu_208 <= inp1_buf_0_1_75_fu_858_p3;
        inp1_buf_0_1_49_fu_212 <= inp1_buf_0_1_74_fu_852_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_50_fu_216 <= inp1_buf_0_1_77_fu_836_p3;
        inp1_buf_0_1_51_fu_220 <= inp1_buf_0_1_76_fu_830_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_52_fu_224 <= inp1_buf_0_1_79_fu_814_p3;
        inp1_buf_0_1_53_fu_228 <= inp1_buf_0_1_78_fu_808_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_54_fu_232 <= inp1_buf_0_1_81_fu_792_p3;
        inp1_buf_0_1_55_fu_236 <= inp1_buf_0_1_80_fu_786_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_56_fu_240 <= inp1_buf_0_1_83_fu_770_p3;
        inp1_buf_0_1_57_fu_244 <= inp1_buf_0_1_82_fu_764_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_58_fu_248 <= inp1_buf_0_1_85_fu_748_p3;
        inp1_buf_0_1_59_fu_252 <= inp1_buf_0_1_84_fu_742_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_60_fu_256 <= inp1_buf_0_1_87_fu_726_p3;
        inp1_buf_0_1_61_fu_260 <= inp1_buf_0_1_86_fu_720_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_1_reg_3383 == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp1_buf_0_1_62_fu_264 <= inp1_buf_0_1_1_fu_1056_p3;
        inp1_buf_0_1_63_fu_268 <= inp1_buf_0_1_fu_1050_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond_fu_1072_p2 == 1'd0))) begin
        k_1_s_reg_3739 <= k_1_s_fu_2110_p2;
        tmp_10_reg_3519 <= {{p_neg_1_fu_1188_p2[31:4]}};
        tmp_11_reg_3524 <= {{tmp_1_21_fu_1174_p2[31:4]}};
        tmp_13_reg_3534 <= {{p_neg_2_fu_1252_p2[31:4]}};
        tmp_14_reg_3539 <= {{tmp_2_22_fu_1238_p2[31:4]}};
        tmp_15_reg_3514 <= tmp_1_21_fu_1174_p2[32'd31];
        tmp_16_reg_3549 <= {{p_neg_3_fu_1316_p2[31:4]}};
        tmp_17_reg_3554 <= {{tmp_3_23_fu_1302_p2[31:4]}};
        tmp_19_reg_3564 <= {{p_neg_4_fu_1380_p2[31:4]}};
        tmp_20_reg_3569 <= {{tmp_4_24_fu_1366_p2[31:4]}};
        tmp_21_reg_3529 <= tmp_2_22_fu_1238_p2[32'd31];
        tmp_22_reg_3579 <= {{p_neg_5_fu_1444_p2[31:4]}};
        tmp_23_reg_3584 <= {{tmp_5_fu_1430_p2[31:4]}};
        tmp_25_reg_3594 <= {{p_neg_6_fu_1508_p2[31:4]}};
        tmp_26_reg_3599 <= {{tmp_6_fu_1494_p2[31:4]}};
        tmp_27_reg_3544 <= tmp_3_23_fu_1302_p2[32'd31];
        tmp_28_reg_3609 <= {{p_neg_7_fu_1572_p2[31:4]}};
        tmp_29_reg_3614 <= {{tmp_7_25_fu_1558_p2[31:4]}};
        tmp_31_reg_3624 <= {{p_neg_8_fu_1636_p2[31:4]}};
        tmp_32_reg_3559 <= tmp_4_24_fu_1366_p2[32'd31];
        tmp_33_reg_3629 <= {{tmp_8_26_fu_1622_p2[31:4]}};
        tmp_35_reg_3639 <= {{p_neg_9_fu_1700_p2[31:4]}};
        tmp_36_reg_3574 <= tmp_5_fu_1430_p2[32'd31];
        tmp_37_reg_3644 <= {{tmp_9_27_fu_1686_p2[31:4]}};
        tmp_39_reg_3654 <= {{p_neg_s_fu_1764_p2[31:4]}};
        tmp_3_reg_3463 <= k_reg_450[32'd4];
        tmp_40_reg_3589 <= tmp_6_fu_1494_p2[32'd31];
        tmp_41_reg_3659 <= {{tmp_s_28_fu_1750_p2[31:4]}};
        tmp_43_reg_3669 <= {{p_neg_10_fu_1828_p2[31:4]}};
        tmp_44_reg_3604 <= tmp_7_25_fu_1558_p2[32'd31];
        tmp_45_reg_3674 <= {{tmp_10_31_fu_1814_p2[31:4]}};
        tmp_46_reg_3684 <= {{p_neg_11_fu_1892_p2[31:4]}};
        tmp_48_reg_3689 <= {{tmp_11_32_fu_1878_p2[31:4]}};
        tmp_49_reg_3699 <= {{p_neg_12_fu_1956_p2[31:4]}};
        tmp_4_reg_3504 <= {{p_neg_fu_1124_p2[31:4]}};
        tmp_50_reg_3704 <= {{tmp_12_33_fu_1942_p2[31:4]}};
        tmp_51_reg_3714 <= {{p_neg_13_fu_2020_p2[31:4]}};
        tmp_52_reg_3719 <= {{tmp_13_34_fu_2006_p2[31:4]}};
        tmp_53_reg_3729 <= {{p_neg_14_fu_2084_p2[31:4]}};
        tmp_54_reg_3734 <= {{tmp_14_35_fu_2070_p2[31:4]}};
        tmp_56_reg_3619 <= tmp_8_26_fu_1622_p2[32'd31];
        tmp_58_reg_3634 <= tmp_9_27_fu_1686_p2[32'd31];
        tmp_60_reg_3649 <= tmp_s_28_fu_1750_p2[32'd31];
        tmp_62_reg_3664 <= tmp_10_31_fu_1814_p2[32'd31];
        tmp_64_reg_3679 <= tmp_11_32_fu_1878_p2[32'd31];
        tmp_66_reg_3694 <= tmp_12_33_fu_1942_p2[32'd31];
        tmp_68_reg_3709 <= tmp_13_34_fu_2006_p2[32'd31];
        tmp_70_reg_3724 <= tmp_14_35_fu_2070_p2[32'd31];
        tmp_7_reg_3509 <= {{tmp_s_fu_1110_p2[31:4]}};
        tmp_9_reg_3499 <= tmp_s_fu_1110_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        out1_buf_0_1_1_fu_272 <= out1_buf_0_1_2_fu_2146_p3;
        out1_buf_0_1_3_fu_276 <= out1_buf_0_1_fu_2139_p3;
        out1_buf_10_1_1_fu_352 <= out1_buf_10_1_2_fu_2516_p3;
        out1_buf_10_1_3_fu_356 <= out1_buf_10_1_fu_2509_p3;
        out1_buf_11_1_1_fu_360 <= out1_buf_11_1_2_fu_2553_p3;
        out1_buf_11_1_3_fu_364 <= out1_buf_11_1_fu_2546_p3;
        out1_buf_12_1_1_fu_368 <= out1_buf_12_1_2_fu_2590_p3;
        out1_buf_12_1_3_fu_372 <= out1_buf_12_1_fu_2583_p3;
        out1_buf_13_1_1_fu_376 <= out1_buf_13_1_2_fu_2627_p3;
        out1_buf_13_1_3_fu_380 <= out1_buf_13_1_fu_2620_p3;
        out1_buf_14_1_1_fu_384 <= out1_buf_14_1_2_fu_2664_p3;
        out1_buf_14_1_3_fu_388 <= out1_buf_14_1_fu_2657_p3;
        out1_buf_15_1_1_fu_392 <= out1_buf_15_1_2_fu_2701_p3;
        out1_buf_15_1_3_fu_396 <= out1_buf_15_1_fu_2694_p3;
        out1_buf_1_1_1_fu_280 <= out1_buf_1_1_2_fu_2183_p3;
        out1_buf_1_1_3_fu_284 <= out1_buf_1_1_fu_2176_p3;
        out1_buf_2_1_1_fu_288 <= out1_buf_2_1_2_fu_2220_p3;
        out1_buf_2_1_3_fu_292 <= out1_buf_2_1_fu_2213_p3;
        out1_buf_3_1_1_fu_296 <= out1_buf_3_1_2_fu_2257_p3;
        out1_buf_3_1_3_fu_300 <= out1_buf_3_1_fu_2250_p3;
        out1_buf_4_1_1_fu_304 <= out1_buf_4_1_2_fu_2294_p3;
        out1_buf_4_1_3_fu_308 <= out1_buf_4_1_fu_2287_p3;
        out1_buf_5_1_1_fu_312 <= out1_buf_5_1_2_fu_2331_p3;
        out1_buf_5_1_3_fu_316 <= out1_buf_5_1_fu_2324_p3;
        out1_buf_6_1_1_fu_320 <= out1_buf_6_1_2_fu_2368_p3;
        out1_buf_6_1_3_fu_324 <= out1_buf_6_1_fu_2361_p3;
        out1_buf_7_1_1_fu_328 <= out1_buf_7_1_2_fu_2405_p3;
        out1_buf_7_1_3_fu_332 <= out1_buf_7_1_fu_2398_p3;
        out1_buf_8_1_1_fu_336 <= out1_buf_8_1_2_fu_2442_p3;
        out1_buf_8_1_3_fu_340 <= out1_buf_8_1_fu_2435_p3;
        out1_buf_9_1_1_fu_344 <= out1_buf_9_1_2_fu_2479_p3;
        out1_buf_9_1_3_fu_348 <= out1_buf_9_1_fu_2472_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_696_p2 == 1'd0))) begin
        tmp_1_reg_3383 <= tmp_1_fu_708_p1;
        tmp_2_reg_3387 <= indvar_reg_439[32'd4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond7_fu_2868_p2 == 1'd0))) begin
        tmp_47_reg_3753 <= tmp_47_fu_2904_p34;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        BUS_SRC_DST_ARVALID = 1'b1;
    end else begin
        BUS_SRC_DST_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8))) begin
        BUS_SRC_DST_AWVALID = 1'b1;
    end else begin
        BUS_SRC_DST_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
        BUS_SRC_DST_BREADY = 1'b1;
    end else begin
        BUS_SRC_DST_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BUS_SRC_DST_RREADY = 1'b1;
    end else begin
        BUS_SRC_DST_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond7_reg_3744 == 1'd0))) begin
        BUS_SRC_DST_WVALID = 1'b1;
    end else begin
        BUS_SRC_DST_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        BUS_SRC_DST_blk_n_AR = m_axi_BUS_SRC_DST_ARREADY;
    end else begin
        BUS_SRC_DST_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        BUS_SRC_DST_blk_n_AW = m_axi_BUS_SRC_DST_AWREADY;
    end else begin
        BUS_SRC_DST_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        BUS_SRC_DST_blk_n_B = m_axi_BUS_SRC_DST_BVALID;
    end else begin
        BUS_SRC_DST_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        BUS_SRC_DST_blk_n_R = m_axi_BUS_SRC_DST_RVALID;
    end else begin
        BUS_SRC_DST_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond7_reg_3744 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        BUS_SRC_DST_blk_n_W = m_axi_BUS_SRC_DST_WREADY;
    end else begin
        BUS_SRC_DST_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond2_fu_696_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7_fu_2868_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0)) begin
        ap_sig_ioackin_BUS_SRC_DST_ARREADY = BUS_SRC_DST_ARREADY;
    end else begin
        ap_sig_ioackin_BUS_SRC_DST_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0)) begin
        ap_sig_ioackin_BUS_SRC_DST_AWREADY = BUS_SRC_DST_AWREADY;
    end else begin
        ap_sig_ioackin_BUS_SRC_DST_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0)) begin
        ap_sig_ioackin_BUS_SRC_DST_WREADY = BUS_SRC_DST_WREADY;
    end else begin
        ap_sig_ioackin_BUS_SRC_DST_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond1_fu_684_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_696_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_696_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond_fu_1072_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond7_fu_2868_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond7_fu_2868_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == BUS_SRC_DST_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == BUS_SRC_DST_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = (1'b0 == BUS_SRC_DST_RVALID);
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (exitcond7_reg_3744 == 1'd0));
end

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_2333 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond7_reg_3744 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_684_p2 = ((i_reg_428 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_696_p2 = ((indvar_reg_439 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond7_fu_2868_p2 = ((indvar5_reg_461 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_fu_1072_p2 = ((k_reg_450 == 6'd32) ? 1'b1 : 1'b0);

assign i_1_fu_690_p2 = (i_reg_428 + 2'd1);

assign indvar_next6_fu_2874_p2 = (indvar5_reg_461 + 6'd1);

assign indvar_next_fu_702_p2 = (indvar_reg_439 + 6'd1);

assign inp1_buf_0_1_1_fu_1056_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_62_fu_264 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_3_fu_1028_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_33_fu_148);

assign inp1_buf_0_1_4_fu_1034_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_2_fu_144 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_5_fu_1006_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_35_fu_156);

assign inp1_buf_0_1_65_fu_968_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_38_fu_168 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_66_fu_940_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_41_fu_180);

assign inp1_buf_0_1_67_fu_946_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_40_fu_176 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_68_fu_918_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_43_fu_188);

assign inp1_buf_0_1_69_fu_924_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_42_fu_184 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_6_fu_1012_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_34_fu_152 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_70_fu_896_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_45_fu_196);

assign inp1_buf_0_1_71_fu_902_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_44_fu_192 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_72_fu_874_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_47_fu_204);

assign inp1_buf_0_1_73_fu_880_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_46_fu_200 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_74_fu_852_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_49_fu_212);

assign inp1_buf_0_1_75_fu_858_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_48_fu_208 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_76_fu_830_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_51_fu_220);

assign inp1_buf_0_1_77_fu_836_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_50_fu_216 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_78_fu_808_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_53_fu_228);

assign inp1_buf_0_1_79_fu_814_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_52_fu_224 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_7_fu_984_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_37_fu_164);

assign inp1_buf_0_1_80_fu_786_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_55_fu_236);

assign inp1_buf_0_1_81_fu_792_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_54_fu_232 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_82_fu_764_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_57_fu_244);

assign inp1_buf_0_1_83_fu_770_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_56_fu_240 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_84_fu_742_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_59_fu_252);

assign inp1_buf_0_1_85_fu_748_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_58_fu_248 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_86_fu_720_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_61_fu_260);

assign inp1_buf_0_1_87_fu_726_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_60_fu_256 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_8_fu_990_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_1_36_fu_160 : inp1_buf_0_0_reg_3423);

assign inp1_buf_0_1_9_fu_962_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_39_fu_172);

assign inp1_buf_0_1_fu_1050_p3 = ((ap_reg_pp0_iter1_tmp_2_reg_3387[0:0] === 1'b1) ? inp1_buf_0_0_reg_3423 : inp1_buf_0_1_63_fu_268);

assign inp1_buf_load_0_phi_fu_1086_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_33_fu_148 : inp1_buf_0_1_2_fu_144);

assign inp1_buf_load_10_phi_fu_1726_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_53_fu_228 : inp1_buf_0_1_52_fu_224);

assign inp1_buf_load_11_phi_fu_1790_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_55_fu_236 : inp1_buf_0_1_54_fu_232);

assign inp1_buf_load_12_phi_fu_1854_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_57_fu_244 : inp1_buf_0_1_56_fu_240);

assign inp1_buf_load_13_phi_fu_1918_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_59_fu_252 : inp1_buf_0_1_58_fu_248);

assign inp1_buf_load_14_phi_fu_1982_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_61_fu_260 : inp1_buf_0_1_60_fu_256);

assign inp1_buf_load_15_phi_fu_2046_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_63_fu_268 : inp1_buf_0_1_62_fu_264);

assign inp1_buf_load_1_phi_fu_1150_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_35_fu_156 : inp1_buf_0_1_34_fu_152);

assign inp1_buf_load_2_phi_fu_1214_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_37_fu_164 : inp1_buf_0_1_36_fu_160);

assign inp1_buf_load_3_phi_fu_1278_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_39_fu_172 : inp1_buf_0_1_38_fu_168);

assign inp1_buf_load_4_phi_fu_1342_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_41_fu_180 : inp1_buf_0_1_40_fu_176);

assign inp1_buf_load_5_phi_fu_1406_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_43_fu_188 : inp1_buf_0_1_42_fu_184);

assign inp1_buf_load_6_phi_fu_1470_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_45_fu_196 : inp1_buf_0_1_44_fu_192);

assign inp1_buf_load_7_phi_fu_1534_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_47_fu_204 : inp1_buf_0_1_46_fu_200);

assign inp1_buf_load_8_phi_fu_1598_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_49_fu_212 : inp1_buf_0_1_48_fu_208);

assign inp1_buf_load_9_phi_fu_1662_p3 = ((tmp_3_fu_1078_p3[0:0] === 1'b1) ? inp1_buf_0_1_51_fu_220 : inp1_buf_0_1_50_fu_216);

assign k_1_s_fu_2110_p2 = (k_reg_450 + 6'd16);

assign out1_buf_0_1_0_cas_fu_2135_p1 = $signed(out1_buf_0_1_5_fu_2128_p3);

assign out1_buf_0_1_2_fu_2146_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_0_1_1_fu_272 : out1_buf_0_1_0_cas_fu_2135_p1);

assign out1_buf_0_1_5_fu_2128_p3 = ((tmp_9_reg_3499[0:0] === 1'b1) ? p_neg_t_fu_2119_p2 : p_lshr_f_cast_fu_2125_p1);

assign out1_buf_0_1_fu_2139_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_0_1_0_cas_fu_2135_p1 : out1_buf_0_1_3_fu_276);

assign out1_buf_10_1_0_ca_fu_2505_p1 = $signed(out1_buf_10_1_5_fu_2498_p3);

assign out1_buf_10_1_2_fu_2516_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_10_1_1_fu_352 : out1_buf_10_1_0_ca_fu_2505_p1);

assign out1_buf_10_1_5_fu_2498_p3 = ((tmp_60_reg_3649[0:0] === 1'b1) ? p_neg_t_s_fu_2489_p2 : p_lshr_f_cast_30_fu_2495_p1);

assign out1_buf_10_1_fu_2509_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_10_1_0_ca_fu_2505_p1 : out1_buf_10_1_3_fu_356);

assign out1_buf_11_1_0_ca_fu_2542_p1 = $signed(out1_buf_11_1_5_fu_2535_p3);

assign out1_buf_11_1_2_fu_2553_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_11_1_1_fu_360 : out1_buf_11_1_0_ca_fu_2542_p1);

assign out1_buf_11_1_5_fu_2535_p3 = ((tmp_62_reg_3664[0:0] === 1'b1) ? p_neg_t_10_fu_2526_p2 : p_lshr_f_10_cast_fu_2532_p1);

assign out1_buf_11_1_fu_2546_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_11_1_0_ca_fu_2542_p1 : out1_buf_11_1_3_fu_364);

assign out1_buf_12_1_0_ca_fu_2579_p1 = $signed(out1_buf_12_1_5_fu_2572_p3);

assign out1_buf_12_1_2_fu_2590_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_12_1_1_fu_368 : out1_buf_12_1_0_ca_fu_2579_p1);

assign out1_buf_12_1_5_fu_2572_p3 = ((tmp_64_reg_3679[0:0] === 1'b1) ? p_neg_t_11_fu_2563_p2 : p_lshr_f_11_cast_fu_2569_p1);

assign out1_buf_12_1_fu_2583_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_12_1_0_ca_fu_2579_p1 : out1_buf_12_1_3_fu_372);

assign out1_buf_13_1_0_ca_fu_2616_p1 = $signed(out1_buf_13_1_5_fu_2609_p3);

assign out1_buf_13_1_2_fu_2627_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_13_1_1_fu_376 : out1_buf_13_1_0_ca_fu_2616_p1);

assign out1_buf_13_1_5_fu_2609_p3 = ((tmp_66_reg_3694[0:0] === 1'b1) ? p_neg_t_12_fu_2600_p2 : p_lshr_f_12_cast_fu_2606_p1);

assign out1_buf_13_1_fu_2620_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_13_1_0_ca_fu_2616_p1 : out1_buf_13_1_3_fu_380);

assign out1_buf_14_1_0_ca_fu_2653_p1 = $signed(out1_buf_14_1_5_fu_2646_p3);

assign out1_buf_14_1_2_fu_2664_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_14_1_1_fu_384 : out1_buf_14_1_0_ca_fu_2653_p1);

assign out1_buf_14_1_5_fu_2646_p3 = ((tmp_68_reg_3709[0:0] === 1'b1) ? p_neg_t_13_fu_2637_p2 : p_lshr_f_13_cast_fu_2643_p1);

assign out1_buf_14_1_fu_2657_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_14_1_0_ca_fu_2653_p1 : out1_buf_14_1_3_fu_388);

assign out1_buf_15_1_0_ca_fu_2690_p1 = $signed(out1_buf_15_1_5_fu_2683_p3);

assign out1_buf_15_1_2_fu_2701_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_15_1_1_fu_392 : out1_buf_15_1_0_ca_fu_2690_p1);

assign out1_buf_15_1_5_fu_2683_p3 = ((tmp_70_reg_3724[0:0] === 1'b1) ? p_neg_t_14_fu_2674_p2 : p_lshr_f_14_cast_fu_2680_p1);

assign out1_buf_15_1_fu_2694_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_15_1_0_ca_fu_2690_p1 : out1_buf_15_1_3_fu_396);

assign out1_buf_1_1_0_cas_fu_2172_p1 = $signed(out1_buf_1_1_5_fu_2165_p3);

assign out1_buf_1_1_2_fu_2183_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_1_1_1_fu_280 : out1_buf_1_1_0_cas_fu_2172_p1);

assign out1_buf_1_1_5_fu_2165_p3 = ((tmp_15_reg_3514[0:0] === 1'b1) ? p_neg_t_1_fu_2156_p2 : p_lshr_f_1_cast_fu_2162_p1);

assign out1_buf_1_1_fu_2176_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_1_1_0_cas_fu_2172_p1 : out1_buf_1_1_3_fu_284);

assign out1_buf_2_1_0_cas_fu_2209_p1 = $signed(out1_buf_2_1_5_fu_2202_p3);

assign out1_buf_2_1_2_fu_2220_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_2_1_1_fu_288 : out1_buf_2_1_0_cas_fu_2209_p1);

assign out1_buf_2_1_5_fu_2202_p3 = ((tmp_21_reg_3529[0:0] === 1'b1) ? p_neg_t_2_fu_2193_p2 : p_lshr_f_2_cast_fu_2199_p1);

assign out1_buf_2_1_fu_2213_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_2_1_0_cas_fu_2209_p1 : out1_buf_2_1_3_fu_292);

assign out1_buf_3_1_0_cas_fu_2246_p1 = $signed(out1_buf_3_1_5_fu_2239_p3);

assign out1_buf_3_1_2_fu_2257_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_3_1_1_fu_296 : out1_buf_3_1_0_cas_fu_2246_p1);

assign out1_buf_3_1_5_fu_2239_p3 = ((tmp_27_reg_3544[0:0] === 1'b1) ? p_neg_t_3_fu_2230_p2 : p_lshr_f_3_cast_fu_2236_p1);

assign out1_buf_3_1_fu_2250_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_3_1_0_cas_fu_2246_p1 : out1_buf_3_1_3_fu_300);

assign out1_buf_4_1_0_cas_fu_2283_p1 = $signed(out1_buf_4_1_5_fu_2276_p3);

assign out1_buf_4_1_2_fu_2294_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_4_1_1_fu_304 : out1_buf_4_1_0_cas_fu_2283_p1);

assign out1_buf_4_1_5_fu_2276_p3 = ((tmp_32_reg_3559[0:0] === 1'b1) ? p_neg_t_4_fu_2267_p2 : p_lshr_f_4_cast_fu_2273_p1);

assign out1_buf_4_1_fu_2287_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_4_1_0_cas_fu_2283_p1 : out1_buf_4_1_3_fu_308);

assign out1_buf_5_1_0_cas_fu_2320_p1 = $signed(out1_buf_5_1_5_fu_2313_p3);

assign out1_buf_5_1_2_fu_2331_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_5_1_1_fu_312 : out1_buf_5_1_0_cas_fu_2320_p1);

assign out1_buf_5_1_5_fu_2313_p3 = ((tmp_36_reg_3574[0:0] === 1'b1) ? p_neg_t_5_fu_2304_p2 : p_lshr_f_5_cast_fu_2310_p1);

assign out1_buf_5_1_fu_2324_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_5_1_0_cas_fu_2320_p1 : out1_buf_5_1_3_fu_316);

assign out1_buf_6_1_0_cas_fu_2357_p1 = $signed(out1_buf_6_1_5_fu_2350_p3);

assign out1_buf_6_1_2_fu_2368_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_6_1_1_fu_320 : out1_buf_6_1_0_cas_fu_2357_p1);

assign out1_buf_6_1_5_fu_2350_p3 = ((tmp_40_reg_3589[0:0] === 1'b1) ? p_neg_t_6_fu_2341_p2 : p_lshr_f_6_cast_fu_2347_p1);

assign out1_buf_6_1_fu_2361_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_6_1_0_cas_fu_2357_p1 : out1_buf_6_1_3_fu_324);

assign out1_buf_7_1_0_cas_fu_2394_p1 = $signed(out1_buf_7_1_5_fu_2387_p3);

assign out1_buf_7_1_2_fu_2405_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_7_1_1_fu_328 : out1_buf_7_1_0_cas_fu_2394_p1);

assign out1_buf_7_1_5_fu_2387_p3 = ((tmp_44_reg_3604[0:0] === 1'b1) ? p_neg_t_7_fu_2378_p2 : p_lshr_f_7_cast_fu_2384_p1);

assign out1_buf_7_1_fu_2398_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_7_1_0_cas_fu_2394_p1 : out1_buf_7_1_3_fu_332);

assign out1_buf_8_1_0_cas_fu_2431_p1 = $signed(out1_buf_8_1_5_fu_2424_p3);

assign out1_buf_8_1_2_fu_2442_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_8_1_1_fu_336 : out1_buf_8_1_0_cas_fu_2431_p1);

assign out1_buf_8_1_5_fu_2424_p3 = ((tmp_56_reg_3619[0:0] === 1'b1) ? p_neg_t_8_fu_2415_p2 : p_lshr_f_8_cast_fu_2421_p1);

assign out1_buf_8_1_fu_2435_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_8_1_0_cas_fu_2431_p1 : out1_buf_8_1_3_fu_340);

assign out1_buf_9_1_0_cas_fu_2468_p1 = $signed(out1_buf_9_1_5_fu_2461_p3);

assign out1_buf_9_1_2_fu_2479_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_9_1_1_fu_344 : out1_buf_9_1_0_cas_fu_2468_p1);

assign out1_buf_9_1_5_fu_2461_p3 = ((tmp_58_reg_3634[0:0] === 1'b1) ? p_neg_t_9_fu_2452_p2 : p_lshr_f_9_cast_fu_2458_p1);

assign out1_buf_9_1_fu_2472_p3 = ((tmp_3_reg_3463[0:0] === 1'b1) ? out1_buf_9_1_0_cas_fu_2468_p1 : out1_buf_9_1_3_fu_348);

assign p_lshr_10_cast_fu_2523_p1 = tmp_43_reg_3669;

assign p_lshr_11_cast_fu_2560_p1 = tmp_46_reg_3684;

assign p_lshr_12_cast_fu_2597_p1 = tmp_49_reg_3699;

assign p_lshr_13_cast_fu_2634_p1 = tmp_51_reg_3714;

assign p_lshr_14_cast_fu_2671_p1 = tmp_53_reg_3729;

assign p_lshr_1_cast_fu_2153_p1 = tmp_10_reg_3519;

assign p_lshr_2_cast_fu_2190_p1 = tmp_13_reg_3534;

assign p_lshr_3_cast_fu_2227_p1 = tmp_16_reg_3549;

assign p_lshr_4_cast_fu_2264_p1 = tmp_19_reg_3564;

assign p_lshr_5_cast_fu_2301_p1 = tmp_22_reg_3579;

assign p_lshr_6_cast_fu_2338_p1 = tmp_25_reg_3594;

assign p_lshr_7_cast_fu_2375_p1 = tmp_28_reg_3609;

assign p_lshr_8_cast_fu_2412_p1 = tmp_31_reg_3624;

assign p_lshr_9_cast_fu_2449_p1 = tmp_35_reg_3639;

assign p_lshr_cast_29_fu_2486_p1 = tmp_39_reg_3654;

assign p_lshr_cast_fu_2116_p1 = tmp_4_reg_3504;

assign p_lshr_f_10_cast_fu_2532_p1 = tmp_45_reg_3674;

assign p_lshr_f_11_cast_fu_2569_p1 = tmp_48_reg_3689;

assign p_lshr_f_12_cast_fu_2606_p1 = tmp_50_reg_3704;

assign p_lshr_f_13_cast_fu_2643_p1 = tmp_52_reg_3719;

assign p_lshr_f_14_cast_fu_2680_p1 = tmp_54_reg_3734;

assign p_lshr_f_1_cast_fu_2162_p1 = tmp_11_reg_3524;

assign p_lshr_f_2_cast_fu_2199_p1 = tmp_14_reg_3539;

assign p_lshr_f_3_cast_fu_2236_p1 = tmp_17_reg_3554;

assign p_lshr_f_4_cast_fu_2273_p1 = tmp_20_reg_3569;

assign p_lshr_f_5_cast_fu_2310_p1 = tmp_23_reg_3584;

assign p_lshr_f_6_cast_fu_2347_p1 = tmp_26_reg_3599;

assign p_lshr_f_7_cast_fu_2384_p1 = tmp_29_reg_3614;

assign p_lshr_f_8_cast_fu_2421_p1 = tmp_33_reg_3629;

assign p_lshr_f_9_cast_fu_2458_p1 = tmp_37_reg_3644;

assign p_lshr_f_cast_30_fu_2495_p1 = tmp_41_reg_3659;

assign p_lshr_f_cast_fu_2125_p1 = tmp_7_reg_3509;

assign p_neg_10_fu_1828_p2 = (32'd0 - tmp_10_31_fu_1814_p2);

assign p_neg_11_fu_1892_p2 = (32'd0 - tmp_11_32_fu_1878_p2);

assign p_neg_12_fu_1956_p2 = (32'd0 - tmp_12_33_fu_1942_p2);

assign p_neg_13_fu_2020_p2 = (32'd0 - tmp_13_34_fu_2006_p2);

assign p_neg_14_fu_2084_p2 = (32'd0 - tmp_14_35_fu_2070_p2);

assign p_neg_1_fu_1188_p2 = (32'd0 - tmp_1_21_fu_1174_p2);

assign p_neg_2_fu_1252_p2 = (32'd0 - tmp_2_22_fu_1238_p2);

assign p_neg_3_fu_1316_p2 = (32'd0 - tmp_3_23_fu_1302_p2);

assign p_neg_4_fu_1380_p2 = (32'd0 - tmp_4_24_fu_1366_p2);

assign p_neg_5_fu_1444_p2 = (32'd0 - tmp_5_fu_1430_p2);

assign p_neg_6_fu_1508_p2 = (32'd0 - tmp_6_fu_1494_p2);

assign p_neg_7_fu_1572_p2 = (32'd0 - tmp_7_25_fu_1558_p2);

assign p_neg_8_fu_1636_p2 = (32'd0 - tmp_8_26_fu_1622_p2);

assign p_neg_9_fu_1700_p2 = (32'd0 - tmp_9_27_fu_1686_p2);

assign p_neg_fu_1124_p2 = (32'd0 - tmp_s_fu_1110_p2);

assign p_neg_s_fu_1764_p2 = (32'd0 - tmp_s_28_fu_1750_p2);

assign p_neg_t_10_fu_2526_p2 = (29'd0 - p_lshr_10_cast_fu_2523_p1);

assign p_neg_t_11_fu_2563_p2 = (29'd0 - p_lshr_11_cast_fu_2560_p1);

assign p_neg_t_12_fu_2600_p2 = (29'd0 - p_lshr_12_cast_fu_2597_p1);

assign p_neg_t_13_fu_2637_p2 = (29'd0 - p_lshr_13_cast_fu_2634_p1);

assign p_neg_t_14_fu_2674_p2 = (29'd0 - p_lshr_14_cast_fu_2671_p1);

assign p_neg_t_1_fu_2156_p2 = (29'd0 - p_lshr_1_cast_fu_2153_p1);

assign p_neg_t_2_fu_2193_p2 = (29'd0 - p_lshr_2_cast_fu_2190_p1);

assign p_neg_t_3_fu_2230_p2 = (29'd0 - p_lshr_3_cast_fu_2227_p1);

assign p_neg_t_4_fu_2267_p2 = (29'd0 - p_lshr_4_cast_fu_2264_p1);

assign p_neg_t_5_fu_2304_p2 = (29'd0 - p_lshr_5_cast_fu_2301_p1);

assign p_neg_t_6_fu_2341_p2 = (29'd0 - p_lshr_6_cast_fu_2338_p1);

assign p_neg_t_7_fu_2378_p2 = (29'd0 - p_lshr_7_cast_fu_2375_p1);

assign p_neg_t_8_fu_2415_p2 = (29'd0 - p_lshr_8_cast_fu_2412_p1);

assign p_neg_t_9_fu_2452_p2 = (29'd0 - p_lshr_9_cast_fu_2449_p1);

assign p_neg_t_fu_2119_p2 = (29'd0 - p_lshr_cast_fu_2116_p1);

assign p_neg_t_s_fu_2489_p2 = (29'd0 - p_lshr_cast_29_fu_2486_p1);

assign tmp_10_31_fu_1814_p2 = (tmp_41_cast_cast_fu_1806_p3 + inp1_buf_load_11_phi_fu_1790_p3);

assign tmp_11_32_fu_1878_p2 = (tmp_44_cast_cast_fu_1870_p3 + inp1_buf_load_12_phi_fu_1854_p3);

assign tmp_11_cast_cast_fu_1166_p3 = ((tmp_12_fu_1158_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_12_33_fu_1942_p2 = (tmp_47_cast_cast_fu_1934_p3 + inp1_buf_load_13_phi_fu_1918_p3);

assign tmp_12_fu_1158_p3 = inp1_buf_load_1_phi_fu_1150_p3[32'd31];

assign tmp_13_34_fu_2006_p2 = (tmp_50_cast_cast_fu_1998_p3 + inp1_buf_load_14_phi_fu_1982_p3);

assign tmp_14_35_fu_2070_p2 = (tmp_53_cast_cast_fu_2062_p3 + inp1_buf_load_15_phi_fu_2046_p3);

assign tmp_14_cast_cast_fu_1230_p3 = ((tmp_18_fu_1222_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_17_cast_cast_fu_1294_p3 = ((tmp_24_fu_1286_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_18_fu_1222_p3 = inp1_buf_load_2_phi_fu_1214_p3[32'd31];

assign tmp_1_21_fu_1174_p2 = (tmp_11_cast_cast_fu_1166_p3 + inp1_buf_load_1_phi_fu_1150_p3);

assign tmp_1_fu_708_p1 = indvar_reg_439[3:0];

assign tmp_20_cast_cast_fu_1358_p3 = ((tmp_30_fu_1350_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_23_cast_cast_fu_1422_p3 = ((tmp_34_fu_1414_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_24_fu_1286_p3 = inp1_buf_load_3_phi_fu_1278_p3[32'd31];

assign tmp_26_cast_cast_fu_1486_p3 = ((tmp_38_fu_1478_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_29_cast_cast_fu_1550_p3 = ((tmp_42_fu_1542_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_2_22_fu_1238_p2 = (tmp_14_cast_cast_fu_1230_p3 + inp1_buf_load_2_phi_fu_1214_p3);

assign tmp_30_fu_1350_p3 = inp1_buf_load_4_phi_fu_1342_p3[32'd31];

assign tmp_32_cast_cast_fu_1614_p3 = ((tmp_55_fu_1606_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_34_fu_1414_p3 = inp1_buf_load_5_phi_fu_1406_p3[32'd31];

assign tmp_35_cast_cast_fu_1678_p3 = ((tmp_57_fu_1670_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_38_cast_cast_fu_1742_p3 = ((tmp_59_fu_1734_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_38_fu_1478_p3 = inp1_buf_load_6_phi_fu_1470_p3[32'd31];

assign tmp_3_23_fu_1302_p2 = (tmp_17_cast_cast_fu_1294_p3 + inp1_buf_load_3_phi_fu_1278_p3);

assign tmp_3_fu_1078_p3 = k_reg_450[32'd4];

assign tmp_41_cast_cast_fu_1806_p3 = ((tmp_61_fu_1798_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_42_fu_1542_p3 = inp1_buf_load_7_phi_fu_1534_p3[32'd31];

assign tmp_44_cast_cast_fu_1870_p3 = ((tmp_63_fu_1862_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_47_cast_cast_fu_1934_p3 = ((tmp_65_fu_1926_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_47_fu_2904_p33 = tmp_5_39_fu_2892_p3;

assign tmp_4_24_fu_1366_p2 = (tmp_20_cast_cast_fu_1358_p3 + inp1_buf_load_4_phi_fu_1342_p3);

assign tmp_4_cast_cast_fu_1102_p3 = ((tmp_8_fu_1094_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_50_cast_cast_fu_1998_p3 = ((tmp_67_fu_1990_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_53_cast_cast_fu_2062_p3 = ((tmp_69_fu_2054_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_55_fu_1606_p3 = inp1_buf_load_8_phi_fu_1598_p3[32'd31];

assign tmp_57_fu_1670_p3 = inp1_buf_load_9_phi_fu_1662_p3[32'd31];

assign tmp_59_fu_1734_p3 = inp1_buf_load_10_phi_fu_1726_p3[32'd31];

assign tmp_5_39_fu_2892_p3 = {{tmp_71_fu_2880_p1}, {tmp_72_fu_2884_p3}};

assign tmp_5_fu_1430_p2 = (tmp_23_cast_cast_fu_1422_p3 + inp1_buf_load_5_phi_fu_1406_p3);

assign tmp_61_fu_1798_p3 = inp1_buf_load_11_phi_fu_1790_p3[32'd31];

assign tmp_63_fu_1862_p3 = inp1_buf_load_12_phi_fu_1854_p3[32'd31];

assign tmp_65_fu_1926_p3 = inp1_buf_load_13_phi_fu_1918_p3[32'd31];

assign tmp_67_fu_1990_p3 = inp1_buf_load_14_phi_fu_1982_p3[32'd31];

assign tmp_69_fu_2054_p3 = inp1_buf_load_15_phi_fu_2046_p3[32'd31];

assign tmp_6_fu_1494_p2 = (tmp_26_cast_cast_fu_1486_p3 + inp1_buf_load_6_phi_fu_1470_p3);

assign tmp_71_fu_2880_p1 = indvar5_reg_461[3:0];

assign tmp_72_fu_2884_p3 = indvar5_reg_461[32'd4];

assign tmp_7_25_fu_1558_p2 = (tmp_29_cast_cast_fu_1550_p3 + inp1_buf_load_7_phi_fu_1534_p3);

assign tmp_8_26_fu_1622_p2 = (tmp_32_cast_cast_fu_1614_p3 + inp1_buf_load_8_phi_fu_1598_p3);

assign tmp_8_fu_1094_p3 = inp1_buf_load_0_phi_fu_1086_p3[32'd31];

assign tmp_9_27_fu_1686_p2 = (tmp_35_cast_cast_fu_1678_p3 + inp1_buf_load_9_phi_fu_1662_p3);

assign tmp_fu_674_p1 = y1_fu_664_p4;

assign tmp_s_28_fu_1750_p2 = (tmp_38_cast_cast_fu_1742_p3 + inp1_buf_load_10_phi_fu_1726_p3);

assign tmp_s_fu_1110_p2 = (tmp_4_cast_cast_fu_1102_p3 + inp1_buf_load_0_phi_fu_1086_p3);

assign y1_fu_664_p4 = {{y[63:2]}};

always @ (posedge ap_clk) begin
    BUS_SRC_DST_addr_reg_3358[63:62] <= 2'b00;
end

endmodule //ChenIDct_f2r_vectorBody_s2e_forEnd212
