// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ChenIDct,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.625000,HLS_SYN_LAT=723,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=128,HLS_SYN_FF=13950,HLS_SYN_LUT=12544}" *)

module ChenIDct (
        ap_clk,
        ap_rst_n,
        m_axi_BUS_SRC_DST_AWVALID,
        m_axi_BUS_SRC_DST_AWREADY,
        m_axi_BUS_SRC_DST_AWADDR,
        m_axi_BUS_SRC_DST_AWID,
        m_axi_BUS_SRC_DST_AWLEN,
        m_axi_BUS_SRC_DST_AWSIZE,
        m_axi_BUS_SRC_DST_AWBURST,
        m_axi_BUS_SRC_DST_AWLOCK,
        m_axi_BUS_SRC_DST_AWCACHE,
        m_axi_BUS_SRC_DST_AWPROT,
        m_axi_BUS_SRC_DST_AWQOS,
        m_axi_BUS_SRC_DST_AWREGION,
        m_axi_BUS_SRC_DST_AWUSER,
        m_axi_BUS_SRC_DST_WVALID,
        m_axi_BUS_SRC_DST_WREADY,
        m_axi_BUS_SRC_DST_WDATA,
        m_axi_BUS_SRC_DST_WSTRB,
        m_axi_BUS_SRC_DST_WLAST,
        m_axi_BUS_SRC_DST_WID,
        m_axi_BUS_SRC_DST_WUSER,
        m_axi_BUS_SRC_DST_ARVALID,
        m_axi_BUS_SRC_DST_ARREADY,
        m_axi_BUS_SRC_DST_ARADDR,
        m_axi_BUS_SRC_DST_ARID,
        m_axi_BUS_SRC_DST_ARLEN,
        m_axi_BUS_SRC_DST_ARSIZE,
        m_axi_BUS_SRC_DST_ARBURST,
        m_axi_BUS_SRC_DST_ARLOCK,
        m_axi_BUS_SRC_DST_ARCACHE,
        m_axi_BUS_SRC_DST_ARPROT,
        m_axi_BUS_SRC_DST_ARQOS,
        m_axi_BUS_SRC_DST_ARREGION,
        m_axi_BUS_SRC_DST_ARUSER,
        m_axi_BUS_SRC_DST_RVALID,
        m_axi_BUS_SRC_DST_RREADY,
        m_axi_BUS_SRC_DST_RDATA,
        m_axi_BUS_SRC_DST_RLAST,
        m_axi_BUS_SRC_DST_RID,
        m_axi_BUS_SRC_DST_RUSER,
        m_axi_BUS_SRC_DST_RRESP,
        m_axi_BUS_SRC_DST_BVALID,
        m_axi_BUS_SRC_DST_BREADY,
        m_axi_BUS_SRC_DST_BRESP,
        m_axi_BUS_SRC_DST_BID,
        m_axi_BUS_SRC_DST_BUSER,
        s_axi_BUS_CTRL_AWVALID,
        s_axi_BUS_CTRL_AWREADY,
        s_axi_BUS_CTRL_AWADDR,
        s_axi_BUS_CTRL_WVALID,
        s_axi_BUS_CTRL_WREADY,
        s_axi_BUS_CTRL_WDATA,
        s_axi_BUS_CTRL_WSTRB,
        s_axi_BUS_CTRL_ARVALID,
        s_axi_BUS_CTRL_ARREADY,
        s_axi_BUS_CTRL_ARADDR,
        s_axi_BUS_CTRL_RVALID,
        s_axi_BUS_CTRL_RREADY,
        s_axi_BUS_CTRL_RDATA,
        s_axi_BUS_CTRL_RRESP,
        s_axi_BUS_CTRL_BVALID,
        s_axi_BUS_CTRL_BREADY,
        s_axi_BUS_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 88'd1;
parameter    ap_ST_fsm_state2 = 88'd2;
parameter    ap_ST_fsm_state3 = 88'd4;
parameter    ap_ST_fsm_state4 = 88'd8;
parameter    ap_ST_fsm_state5 = 88'd16;
parameter    ap_ST_fsm_state6 = 88'd32;
parameter    ap_ST_fsm_state7 = 88'd64;
parameter    ap_ST_fsm_state8 = 88'd128;
parameter    ap_ST_fsm_state9 = 88'd256;
parameter    ap_ST_fsm_state10 = 88'd512;
parameter    ap_ST_fsm_state11 = 88'd1024;
parameter    ap_ST_fsm_state12 = 88'd2048;
parameter    ap_ST_fsm_state13 = 88'd4096;
parameter    ap_ST_fsm_state14 = 88'd8192;
parameter    ap_ST_fsm_state15 = 88'd16384;
parameter    ap_ST_fsm_state16 = 88'd32768;
parameter    ap_ST_fsm_state17 = 88'd65536;
parameter    ap_ST_fsm_state18 = 88'd131072;
parameter    ap_ST_fsm_state19 = 88'd262144;
parameter    ap_ST_fsm_state20 = 88'd524288;
parameter    ap_ST_fsm_state21 = 88'd1048576;
parameter    ap_ST_fsm_state22 = 88'd2097152;
parameter    ap_ST_fsm_state23 = 88'd4194304;
parameter    ap_ST_fsm_state24 = 88'd8388608;
parameter    ap_ST_fsm_state25 = 88'd16777216;
parameter    ap_ST_fsm_state26 = 88'd33554432;
parameter    ap_ST_fsm_state27 = 88'd67108864;
parameter    ap_ST_fsm_state28 = 88'd134217728;
parameter    ap_ST_fsm_state29 = 88'd268435456;
parameter    ap_ST_fsm_state30 = 88'd536870912;
parameter    ap_ST_fsm_state31 = 88'd1073741824;
parameter    ap_ST_fsm_state32 = 88'd2147483648;
parameter    ap_ST_fsm_state33 = 88'd4294967296;
parameter    ap_ST_fsm_state34 = 88'd8589934592;
parameter    ap_ST_fsm_state35 = 88'd17179869184;
parameter    ap_ST_fsm_state36 = 88'd34359738368;
parameter    ap_ST_fsm_state37 = 88'd68719476736;
parameter    ap_ST_fsm_state38 = 88'd137438953472;
parameter    ap_ST_fsm_state39 = 88'd274877906944;
parameter    ap_ST_fsm_state40 = 88'd549755813888;
parameter    ap_ST_fsm_state41 = 88'd1099511627776;
parameter    ap_ST_fsm_state42 = 88'd2199023255552;
parameter    ap_ST_fsm_state43 = 88'd4398046511104;
parameter    ap_ST_fsm_state44 = 88'd8796093022208;
parameter    ap_ST_fsm_state45 = 88'd17592186044416;
parameter    ap_ST_fsm_state46 = 88'd35184372088832;
parameter    ap_ST_fsm_state47 = 88'd70368744177664;
parameter    ap_ST_fsm_state48 = 88'd140737488355328;
parameter    ap_ST_fsm_state49 = 88'd281474976710656;
parameter    ap_ST_fsm_state50 = 88'd562949953421312;
parameter    ap_ST_fsm_state51 = 88'd1125899906842624;
parameter    ap_ST_fsm_state52 = 88'd2251799813685248;
parameter    ap_ST_fsm_state53 = 88'd4503599627370496;
parameter    ap_ST_fsm_state54 = 88'd9007199254740992;
parameter    ap_ST_fsm_state55 = 88'd18014398509481984;
parameter    ap_ST_fsm_state56 = 88'd36028797018963968;
parameter    ap_ST_fsm_state57 = 88'd72057594037927936;
parameter    ap_ST_fsm_state58 = 88'd144115188075855872;
parameter    ap_ST_fsm_state59 = 88'd288230376151711744;
parameter    ap_ST_fsm_state60 = 88'd576460752303423488;
parameter    ap_ST_fsm_state61 = 88'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 88'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 88'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 88'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 88'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 88'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 88'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 88'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 88'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 88'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 88'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 88'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 88'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 88'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 88'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 88'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 88'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 88'd151115727451828646838272;
parameter    ap_ST_fsm_pp0_stage0 = 88'd302231454903657293676544;
parameter    ap_ST_fsm_state82 = 88'd604462909807314587353088;
parameter    ap_ST_fsm_state83 = 88'd1208925819614629174706176;
parameter    ap_ST_fsm_state84 = 88'd2417851639229258349412352;
parameter    ap_ST_fsm_pp1_stage0 = 88'd4835703278458516698824704;
parameter    ap_ST_fsm_state87 = 88'd9671406556917033397649408;
parameter    ap_ST_fsm_state88 = 88'd19342813113834066795298816;
parameter    ap_ST_fsm_state89 = 88'd38685626227668133590597632;
parameter    ap_ST_fsm_state90 = 88'd77371252455336267181195264;
parameter    ap_ST_fsm_state91 = 88'd154742504910672534362390528;
parameter    C_S_AXI_BUS_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BUS_SRC_DST_ID_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_ADDR_WIDTH = 64;
parameter    C_M_AXI_BUS_SRC_DST_DATA_WIDTH = 32;
parameter    C_M_AXI_BUS_SRC_DST_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_WUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_BUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_SRC_DST_USER_VALUE = 0;
parameter    C_M_AXI_BUS_SRC_DST_PROT_VALUE = 0;
parameter    C_M_AXI_BUS_SRC_DST_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BUS_SRC_DST_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_BUS_SRC_DST_AWVALID;
input   m_axi_BUS_SRC_DST_AWREADY;
output  [C_M_AXI_BUS_SRC_DST_ADDR_WIDTH - 1:0] m_axi_BUS_SRC_DST_AWADDR;
output  [C_M_AXI_BUS_SRC_DST_ID_WIDTH - 1:0] m_axi_BUS_SRC_DST_AWID;
output  [7:0] m_axi_BUS_SRC_DST_AWLEN;
output  [2:0] m_axi_BUS_SRC_DST_AWSIZE;
output  [1:0] m_axi_BUS_SRC_DST_AWBURST;
output  [1:0] m_axi_BUS_SRC_DST_AWLOCK;
output  [3:0] m_axi_BUS_SRC_DST_AWCACHE;
output  [2:0] m_axi_BUS_SRC_DST_AWPROT;
output  [3:0] m_axi_BUS_SRC_DST_AWQOS;
output  [3:0] m_axi_BUS_SRC_DST_AWREGION;
output  [C_M_AXI_BUS_SRC_DST_AWUSER_WIDTH - 1:0] m_axi_BUS_SRC_DST_AWUSER;
output   m_axi_BUS_SRC_DST_WVALID;
input   m_axi_BUS_SRC_DST_WREADY;
output  [C_M_AXI_BUS_SRC_DST_DATA_WIDTH - 1:0] m_axi_BUS_SRC_DST_WDATA;
output  [C_M_AXI_BUS_SRC_DST_WSTRB_WIDTH - 1:0] m_axi_BUS_SRC_DST_WSTRB;
output   m_axi_BUS_SRC_DST_WLAST;
output  [C_M_AXI_BUS_SRC_DST_ID_WIDTH - 1:0] m_axi_BUS_SRC_DST_WID;
output  [C_M_AXI_BUS_SRC_DST_WUSER_WIDTH - 1:0] m_axi_BUS_SRC_DST_WUSER;
output   m_axi_BUS_SRC_DST_ARVALID;
input   m_axi_BUS_SRC_DST_ARREADY;
output  [C_M_AXI_BUS_SRC_DST_ADDR_WIDTH - 1:0] m_axi_BUS_SRC_DST_ARADDR;
output  [C_M_AXI_BUS_SRC_DST_ID_WIDTH - 1:0] m_axi_BUS_SRC_DST_ARID;
output  [7:0] m_axi_BUS_SRC_DST_ARLEN;
output  [2:0] m_axi_BUS_SRC_DST_ARSIZE;
output  [1:0] m_axi_BUS_SRC_DST_ARBURST;
output  [1:0] m_axi_BUS_SRC_DST_ARLOCK;
output  [3:0] m_axi_BUS_SRC_DST_ARCACHE;
output  [2:0] m_axi_BUS_SRC_DST_ARPROT;
output  [3:0] m_axi_BUS_SRC_DST_ARQOS;
output  [3:0] m_axi_BUS_SRC_DST_ARREGION;
output  [C_M_AXI_BUS_SRC_DST_ARUSER_WIDTH - 1:0] m_axi_BUS_SRC_DST_ARUSER;
input   m_axi_BUS_SRC_DST_RVALID;
output   m_axi_BUS_SRC_DST_RREADY;
input  [C_M_AXI_BUS_SRC_DST_DATA_WIDTH - 1:0] m_axi_BUS_SRC_DST_RDATA;
input   m_axi_BUS_SRC_DST_RLAST;
input  [C_M_AXI_BUS_SRC_DST_ID_WIDTH - 1:0] m_axi_BUS_SRC_DST_RID;
input  [C_M_AXI_BUS_SRC_DST_RUSER_WIDTH - 1:0] m_axi_BUS_SRC_DST_RUSER;
input  [1:0] m_axi_BUS_SRC_DST_RRESP;
input   m_axi_BUS_SRC_DST_BVALID;
output   m_axi_BUS_SRC_DST_BREADY;
input  [1:0] m_axi_BUS_SRC_DST_BRESP;
input  [C_M_AXI_BUS_SRC_DST_ID_WIDTH - 1:0] m_axi_BUS_SRC_DST_BID;
input  [C_M_AXI_BUS_SRC_DST_BUSER_WIDTH - 1:0] m_axi_BUS_SRC_DST_BUSER;
input   s_axi_BUS_CTRL_AWVALID;
output   s_axi_BUS_CTRL_AWREADY;
input  [C_S_AXI_BUS_CTRL_ADDR_WIDTH - 1:0] s_axi_BUS_CTRL_AWADDR;
input   s_axi_BUS_CTRL_WVALID;
output   s_axi_BUS_CTRL_WREADY;
input  [C_S_AXI_BUS_CTRL_DATA_WIDTH - 1:0] s_axi_BUS_CTRL_WDATA;
input  [C_S_AXI_BUS_CTRL_WSTRB_WIDTH - 1:0] s_axi_BUS_CTRL_WSTRB;
input   s_axi_BUS_CTRL_ARVALID;
output   s_axi_BUS_CTRL_ARREADY;
input  [C_S_AXI_BUS_CTRL_ADDR_WIDTH - 1:0] s_axi_BUS_CTRL_ARADDR;
output   s_axi_BUS_CTRL_RVALID;
input   s_axi_BUS_CTRL_RREADY;
output  [C_S_AXI_BUS_CTRL_DATA_WIDTH - 1:0] s_axi_BUS_CTRL_RDATA;
output  [1:0] s_axi_BUS_CTRL_RRESP;
output   s_axi_BUS_CTRL_BVALID;
input   s_axi_BUS_CTRL_BREADY;
output  [1:0] s_axi_BUS_CTRL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [87:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] x;
wire   [63:0] y;
reg    BUS_SRC_DST_blk_n_AR;
wire    ap_CS_fsm_state37;
wire   [0:0] exitcond2_fu_1918_p2;
reg    BUS_SRC_DST_blk_n_AW;
wire    ap_CS_fsm_state77;
reg    BUS_SRC_DST_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    BUS_SRC_DST_blk_n_W;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond5_reg_6393;
reg    BUS_SRC_DST_blk_n_B;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state71;
reg    BUS_SRC_DST_AWVALID;
wire    BUS_SRC_DST_AWREADY;
reg   [63:0] BUS_SRC_DST_AWADDR;
reg   [31:0] BUS_SRC_DST_AWLEN;
reg    BUS_SRC_DST_WVALID;
wire    BUS_SRC_DST_WREADY;
reg   [31:0] BUS_SRC_DST_WDATA;
reg    BUS_SRC_DST_ARVALID;
wire    BUS_SRC_DST_ARREADY;
reg   [63:0] BUS_SRC_DST_ARADDR;
reg   [31:0] BUS_SRC_DST_ARLEN;
wire    BUS_SRC_DST_RVALID;
reg    BUS_SRC_DST_RREADY;
wire   [31:0] BUS_SRC_DST_RDATA;
wire    BUS_SRC_DST_RLAST;
wire   [0:0] BUS_SRC_DST_RID;
wire   [0:0] BUS_SRC_DST_RUSER;
wire   [1:0] BUS_SRC_DST_RRESP;
wire    BUS_SRC_DST_BVALID;
reg    BUS_SRC_DST_BREADY;
wire   [1:0] BUS_SRC_DST_BRESP;
wire   [0:0] BUS_SRC_DST_BID;
wire   [0:0] BUS_SRC_DST_BUSER;
reg   [5:0] indvar_reg_924;
reg   [5:0] indvar1_reg_946;
wire   [62:0] tmp_4_cast_fu_1163_p1;
reg   [62:0] tmp_4_cast_reg_4781;
reg   [63:0] BUS_SRC_DST_addr_reg_4801;
wire   [62:0] tmp_5_cast1_fu_1183_p1;
reg   [62:0] tmp_5_cast1_reg_4808;
wire   [3:0] i_3_fu_1193_p2;
reg   [3:0] i_3_reg_4823;
wire    ap_CS_fsm_state2;
reg   [63:0] aptr_reg_4828;
wire   [0:0] exitcond1_fu_1187_p2;
reg   [63:0] aptr_8_reg_4834;
wire   [3:0] sum2_fu_1233_p2;
reg   [3:0] sum2_reg_4840;
reg    ap_sig_ioackin_BUS_SRC_DST_ARREADY;
reg   [63:0] aptr_1_reg_4846;
reg   [63:0] aptr_9_reg_4852;
wire   [4:0] sum_fu_1273_p3;
reg   [4:0] sum_reg_4858;
reg   [63:0] aptr_2_reg_4863;
reg   [63:0] aptr_10_reg_4869;
reg   [63:0] aptr_3_reg_4875;
reg   [63:0] aptr_11_reg_4881;
reg   [63:0] aptr_4_reg_4887;
reg   [63:0] aptr_12_reg_4893;
reg   [63:0] aptr_5_reg_4899;
reg   [63:0] aptr_13_reg_4905;
reg   [63:0] aptr_6_reg_4911;
reg   [63:0] aptr_7_reg_4917;
reg   [63:0] aptr_14_reg_4923;
reg   [63:0] aptr_15_reg_4929;
reg   [31:0] aptr_read_reg_4935;
reg   [31:0] aptr_1_read_reg_4940;
reg   [31:0] aptr_2_read_reg_4945;
reg   [31:0] aptr_3_read_reg_4950;
reg   [31:0] aptr_4_read_reg_4955;
reg   [31:0] aptr_5_read_reg_4960;
reg   [31:0] aptr_6_read_reg_4965;
reg   [31:0] aptr_7_read_reg_4970;
wire    ap_CS_fsm_state18;
wire  signed [40:0] tmp_5_cast_fu_1580_p1;
wire  signed [40:0] tmp_7_cast_fu_1590_p1;
wire   [31:0] tmp_13_fu_1624_p2;
reg  signed [31:0] tmp_13_reg_5007;
wire   [31:0] tmp_15_fu_1630_p2;
reg  signed [31:0] tmp_15_reg_5012;
wire  signed [40:0] tmp_28_cast_fu_1636_p1;
wire  signed [40:0] tmp_30_cast_fu_1646_p1;
wire   [39:0] grp_fu_1560_p2;
reg   [39:0] tmp_s_reg_5029;
wire    ap_CS_fsm_state19;
wire   [40:0] grp_fu_1574_p2;
reg   [40:0] tmp_2_reg_5034;
wire   [40:0] grp_fu_1584_p2;
reg   [40:0] tmp_6_reg_5039;
wire   [40:0] grp_fu_1594_p2;
reg   [40:0] tmp_8_reg_5044;
wire   [40:0] grp_fu_1600_p2;
reg   [40:0] tmp_7_reg_5049;
wire   [40:0] grp_fu_1606_p2;
reg   [40:0] tmp_9_reg_5054;
wire   [40:0] grp_fu_1612_p2;
reg   [40:0] tmp_10_reg_5059;
wire   [39:0] grp_fu_1618_p2;
reg   [39:0] tmp_11_reg_5064;
wire   [40:0] grp_fu_1640_p2;
reg   [40:0] tmp_17_reg_5074;
wire   [40:0] grp_fu_1650_p2;
reg   [40:0] tmp_18_reg_5079;
wire   [40:0] grp_fu_1656_p2;
reg   [40:0] tmp_20_reg_5084;
wire   [40:0] grp_fu_1662_p2;
reg   [40:0] tmp_21_reg_5089;
reg   [31:0] c0_reg_5094;
wire    ap_CS_fsm_state20;
reg   [31:0] c1_reg_5100;
reg   [31:0] c2_reg_5106;
reg   [31:0] c3_reg_5112;
reg   [31:0] a0_1_reg_5118;
reg   [31:0] a2_1_reg_5124;
reg   [31:0] a3_1_reg_5130;
wire   [31:0] b3_1_fu_1783_p2;
reg   [31:0] b3_1_reg_5136;
reg    ap_sig_ioackin_BUS_SRC_DST_AWREADY;
wire   [31:0] a0_6_fu_1787_p2;
reg   [31:0] a0_6_reg_5142;
wire   [31:0] tmp_23_fu_1803_p2;
reg  signed [31:0] tmp_23_reg_5148;
wire   [31:0] tmp_25_fu_1809_p2;
reg  signed [31:0] tmp_25_reg_5153;
wire   [31:0] tmp_27_fu_1815_p2;
reg   [31:0] tmp_27_reg_5158;
wire   [31:0] tmp_34_fu_1821_p2;
reg   [31:0] tmp_34_reg_5163;
reg    ap_sig_ioackin_BUS_SRC_DST_WREADY;
reg   [31:0] a1_1_reg_5178;
wire    ap_CS_fsm_state23;
reg   [31:0] c2_1_reg_5189;
wire   [31:0] b2_1_fu_1878_p2;
reg   [31:0] b2_1_reg_5195;
reg   [31:0] c1_1_reg_5201;
wire   [31:0] tmp_28_fu_1892_p2;
reg   [31:0] tmp_28_reg_5207;
wire   [31:0] tmp_33_fu_1897_p2;
reg   [31:0] tmp_33_reg_5212;
wire   [31:0] tmp_29_fu_1902_p2;
reg   [31:0] tmp_29_reg_5217;
reg    ap_block_state25_io;
wire   [31:0] tmp_32_fu_1906_p2;
reg   [31:0] tmp_32_reg_5222;
wire   [31:0] tmp_30_fu_1910_p2;
reg   [31:0] tmp_30_reg_5227;
reg    ap_block_state26_io;
wire   [31:0] tmp_31_fu_1914_p2;
reg   [31:0] tmp_31_reg_5232;
wire   [3:0] i_4_fu_1924_p2;
reg   [3:0] i_4_reg_5240;
reg    ap_block_state37_io;
wire   [5:0] tmp_36_fu_1934_p3;
reg   [5:0] tmp_36_reg_5245;
reg   [63:0] aptr_16_reg_5252;
wire   [5:0] p_sum1_fu_1961_p2;
reg   [5:0] p_sum1_reg_5643;
reg   [63:0] aptr_17_reg_5648;
reg   [63:0] aptr_18_reg_5655;
wire   [5:0] p_sum_fu_2013_p2;
reg   [5:0] p_sum_reg_5662;
reg   [63:0] aptr_19_reg_5667;
wire   [6:0] p_sum_cast1_fu_2037_p1;
reg   [6:0] p_sum_cast1_reg_5674;
reg   [63:0] aptr_20_reg_5680;
reg   [63:0] aptr_21_reg_5687;
reg   [63:0] aptr_22_reg_5694;
reg   [63:0] aptr_23_reg_5701;
reg   [31:0] b0_2_reg_5708;
reg  signed [31:0] a0_3_reg_5714;
reg   [31:0] b2_2_reg_5720;
reg   [31:0] a1_3_reg_5725;
reg   [31:0] b1_2_reg_5730;
reg   [31:0] a2_3_reg_5736;
reg   [31:0] b3_2_reg_5741;
reg  signed [31:0] a3_3_reg_5746;
wire    ap_CS_fsm_state53;
wire  signed [40:0] tmp_62_cast_fu_2161_p1;
wire  signed [40:0] tmp_64_cast_fu_2170_p1;
wire   [31:0] tmp_49_fu_2203_p2;
reg  signed [31:0] tmp_49_reg_5784;
wire   [31:0] tmp_51_fu_2207_p2;
reg  signed [31:0] tmp_51_reg_5789;
wire  signed [40:0] tmp_84_cast_fu_2211_p1;
wire  signed [40:0] tmp_86_cast_fu_2220_p1;
wire   [39:0] grp_fu_2143_p2;
reg   [39:0] tmp_37_reg_5806;
wire    ap_CS_fsm_state54;
wire   [40:0] grp_fu_2155_p2;
reg   [40:0] tmp_38_reg_5811;
wire   [40:0] grp_fu_2164_p2;
reg   [40:0] tmp_40_reg_5816;
wire   [40:0] grp_fu_2173_p2;
reg   [40:0] tmp_41_reg_5821;
wire   [40:0] grp_fu_2179_p2;
reg   [40:0] tmp_43_reg_5826;
wire   [40:0] grp_fu_2185_p2;
reg   [40:0] tmp_44_reg_5831;
wire   [40:0] grp_fu_2191_p2;
reg   [40:0] tmp_46_reg_5836;
wire   [39:0] grp_fu_2197_p2;
reg   [39:0] tmp_47_reg_5841;
wire   [40:0] grp_fu_2214_p2;
reg   [40:0] tmp_53_reg_5851;
wire   [40:0] grp_fu_2223_p2;
reg   [40:0] tmp_54_reg_5856;
wire   [40:0] grp_fu_2229_p2;
reg   [40:0] tmp_56_reg_5861;
wire   [40:0] grp_fu_2235_p2;
reg   [40:0] tmp_57_reg_5866;
reg   [31:0] c0_2_reg_5871;
wire    ap_CS_fsm_state55;
reg   [31:0] c1_2_reg_5877;
reg   [31:0] c2_2_reg_5883;
reg   [31:0] c3_2_reg_5889;
reg   [31:0] a0_4_reg_5895;
reg   [31:0] a2_4_reg_5901;
reg   [31:0] a3_4_reg_5907;
wire   [31:0] b3_3_fu_2356_p2;
reg   [31:0] b3_3_reg_5913;
wire   [31:0] a0_7_fu_2360_p2;
reg   [31:0] a0_7_reg_5919;
wire   [31:0] tmp_59_fu_2376_p2;
reg  signed [31:0] tmp_59_reg_5925;
wire   [31:0] tmp_61_fu_2382_p2;
reg  signed [31:0] tmp_61_reg_5930;
wire   [31:0] tmp_63_fu_2388_p2;
reg   [31:0] tmp_63_reg_5935;
wire   [31:0] tmp_70_fu_2394_p2;
reg   [31:0] tmp_70_reg_5940;
reg   [31:0] a1_4_reg_5955;
wire    ap_CS_fsm_state58;
reg   [31:0] c2_3_reg_5966;
wire   [31:0] b2_3_fu_2451_p2;
reg   [31:0] b2_3_reg_5972;
reg   [31:0] c1_3_reg_5978;
wire   [31:0] tmp_64_fu_2465_p2;
reg   [31:0] tmp_64_reg_5984;
wire   [31:0] tmp_69_fu_2470_p2;
reg   [31:0] tmp_69_reg_5989;
wire   [31:0] tmp_65_fu_2475_p2;
reg   [31:0] tmp_65_reg_5994;
reg    ap_block_state60_io;
wire   [31:0] tmp_68_fu_2479_p2;
reg   [31:0] tmp_68_reg_5999;
wire   [31:0] tmp_66_fu_2483_p2;
reg   [31:0] tmp_66_reg_6004;
reg    ap_block_state61_io;
wire   [31:0] tmp_67_fu_2487_p2;
reg   [31:0] tmp_67_reg_6009;
wire   [0:0] exitcond3_fu_2491_p2;
wire    ap_CS_fsm_state78;
wire   [1:0] i_5_fu_2497_p2;
reg   [1:0] i_5_reg_6018;
wire   [0:0] exitcond4_fu_2503_p2;
wire    ap_block_state79_pp0_stage0_iter0;
reg    ap_block_state80_pp0_stage0_iter1;
wire    ap_block_state81_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] indvar_next_fu_2509_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] tmp_71_fu_2515_p1;
reg   [3:0] tmp_71_reg_6032;
reg   [3:0] ap_reg_pp0_iter1_tmp_71_reg_6032;
reg   [0:0] tmp_72_reg_6036;
reg   [0:0] ap_reg_pp0_iter1_tmp_72_reg_6036;
reg   [31:0] inp1_buf_0_0_reg_6072;
wire   [0:0] exitcond_fu_2879_p2;
wire    ap_CS_fsm_state83;
wire   [0:0] tmp_73_fu_2885_p3;
reg   [0:0] tmp_73_reg_6112;
reg   [0:0] tmp_76_reg_6148;
reg   [27:0] tmp_77_reg_6153;
reg   [27:0] tmp_78_reg_6158;
reg   [0:0] tmp_80_reg_6163;
reg   [27:0] tmp_81_reg_6168;
reg   [27:0] tmp_82_reg_6173;
reg   [0:0] tmp_84_reg_6178;
reg   [27:0] tmp_85_reg_6183;
reg   [27:0] tmp_86_reg_6188;
reg   [0:0] tmp_88_reg_6193;
reg   [27:0] tmp_89_reg_6198;
reg   [27:0] tmp_90_reg_6203;
reg   [0:0] tmp_92_reg_6208;
reg   [27:0] tmp_93_reg_6213;
reg   [27:0] tmp_94_reg_6218;
reg   [0:0] tmp_96_reg_6223;
reg   [27:0] tmp_97_reg_6228;
reg   [27:0] tmp_98_reg_6233;
reg   [0:0] tmp_100_reg_6238;
reg   [27:0] tmp_101_reg_6243;
reg   [27:0] tmp_102_reg_6248;
reg   [0:0] tmp_104_reg_6253;
reg   [27:0] tmp_105_reg_6258;
reg   [27:0] tmp_106_reg_6263;
reg   [0:0] tmp_108_reg_6268;
reg   [27:0] tmp_109_reg_6273;
reg   [27:0] tmp_110_reg_6278;
reg   [0:0] tmp_114_reg_6283;
reg   [27:0] tmp_112_reg_6288;
reg   [27:0] tmp_113_reg_6293;
reg   [0:0] tmp_120_reg_6298;
reg   [27:0] tmp_115_reg_6303;
reg   [27:0] tmp_119_reg_6308;
reg   [0:0] tmp_126_reg_6313;
reg   [27:0] tmp_121_reg_6318;
reg   [27:0] tmp_122_reg_6323;
reg   [0:0] tmp_132_reg_6328;
reg   [27:0] tmp_124_reg_6333;
reg   [27:0] tmp_125_reg_6338;
reg   [0:0] tmp_137_reg_6343;
reg   [27:0] tmp_127_reg_6348;
reg   [27:0] tmp_128_reg_6353;
reg   [0:0] tmp_139_reg_6358;
reg   [27:0] tmp_130_reg_6363;
reg   [27:0] tmp_131_reg_6368;
reg   [0:0] tmp_141_reg_6373;
reg   [27:0] tmp_133_reg_6378;
reg   [27:0] tmp_134_reg_6383;
wire   [5:0] k_1_s_fu_3917_p2;
reg   [5:0] k_1_s_reg_6388;
wire   [0:0] exitcond5_fu_4675_p2;
wire    ap_block_state85_pp1_stage0_iter0;
wire    ap_block_state86_pp1_stage0_iter1;
reg    ap_block_state86_io;
reg    ap_block_pp1_stage0_11001;
wire   [5:0] indvar_next1_fu_4681_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] tmp_135_fu_4711_p34;
reg   [31:0] tmp_135_reg_6402;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state79;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state85;
reg   [3:0] i_reg_890;
reg   [3:0] i_1_reg_902;
reg   [1:0] i_2_reg_913;
wire    ap_CS_fsm_state87;
reg   [5:0] k_reg_935;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state82;
wire   [63:0] tmp_4_fu_1159_p1;
wire   [63:0] x2_sum_cast_fu_1208_p1;
wire   [63:0] y4_sum_cast_fu_1223_p1;
wire   [63:0] x2_sum5_cast_fu_1248_p1;
wire   [63:0] y4_sum1_cast_fu_1263_p1;
wire   [63:0] x2_sum6_cast_fu_1290_p1;
wire   [63:0] y4_sum2_cast_fu_1305_p1;
wire   [63:0] x2_sum7_cast_fu_1327_p1;
wire   [63:0] y4_sum3_cast_fu_1342_p1;
wire   [63:0] x2_sum8_cast_fu_1369_p1;
wire   [63:0] y4_sum4_cast_fu_1384_p1;
wire   [63:0] x2_sum9_cast_fu_1413_p1;
wire   [63:0] y4_sum5_cast_fu_1428_p1;
wire   [63:0] x2_sum1_cast_fu_1450_p1;
wire   [63:0] x2_sum2_cast_fu_1472_p1;
wire   [63:0] y4_sum6_cast_fu_1487_p1;
wire   [63:0] y4_sum7_cast_fu_1502_p1;
wire   [63:0] y4_sum8_cast_fu_1951_p1;
wire   [63:0] y4_sum9_cast_fu_1975_p1;
wire   [63:0] y4_sum10_cast_fu_2003_p1;
wire   [63:0] y4_sum11_cast_fu_2027_p1;
wire   [63:0] y4_sum12_cast_fu_2055_p1;
wire   [63:0] y4_sum13_cast_fu_2079_p1;
wire   [63:0] y4_sum14_cast_fu_2103_p1;
wire   [63:0] y4_sum15_cast_fu_2127_p1;
reg    ap_reg_ioackin_BUS_SRC_DST_ARREADY;
reg    ap_reg_ioackin_BUS_SRC_DST_AWREADY;
reg    ap_block_state27_io;
reg    ap_reg_ioackin_BUS_SRC_DST_WREADY;
reg    ap_block_state30_io;
reg    ap_block_state28_io;
reg    ap_block_state29_io;
reg    ap_block_state62_io;
reg    ap_block_state65_io;
reg    ap_block_state63_io;
reg    ap_block_state64_io;
wire    ap_block_pp1_stage0_01001;
reg   [31:0] inp1_buf_0_1_2_fu_200;
wire   [31:0] inp1_buf_0_1_4_fu_2841_p3;
reg   [31:0] inp1_buf_0_1_33_fu_204;
wire   [31:0] inp1_buf_0_1_3_fu_2835_p3;
reg   [31:0] inp1_buf_0_1_34_fu_208;
wire   [31:0] inp1_buf_0_1_6_fu_2819_p3;
reg   [31:0] inp1_buf_0_1_35_fu_212;
wire   [31:0] inp1_buf_0_1_5_fu_2813_p3;
reg   [31:0] inp1_buf_0_1_36_fu_216;
wire   [31:0] inp1_buf_0_1_8_fu_2797_p3;
reg   [31:0] inp1_buf_0_1_37_fu_220;
wire   [31:0] inp1_buf_0_1_7_fu_2791_p3;
reg   [31:0] inp1_buf_0_1_38_fu_224;
wire   [31:0] inp1_buf_0_1_65_fu_2775_p3;
reg   [31:0] inp1_buf_0_1_39_fu_228;
wire   [31:0] inp1_buf_0_1_9_fu_2769_p3;
reg   [31:0] inp1_buf_0_1_40_fu_232;
wire   [31:0] inp1_buf_0_1_67_fu_2753_p3;
reg   [31:0] inp1_buf_0_1_41_fu_236;
wire   [31:0] inp1_buf_0_1_66_fu_2747_p3;
reg   [31:0] inp1_buf_0_1_42_fu_240;
wire   [31:0] inp1_buf_0_1_69_fu_2731_p3;
reg   [31:0] inp1_buf_0_1_43_fu_244;
wire   [31:0] inp1_buf_0_1_68_fu_2725_p3;
reg   [31:0] inp1_buf_0_1_44_fu_248;
wire   [31:0] inp1_buf_0_1_71_fu_2709_p3;
reg   [31:0] inp1_buf_0_1_45_fu_252;
wire   [31:0] inp1_buf_0_1_70_fu_2703_p3;
reg   [31:0] inp1_buf_0_1_46_fu_256;
wire   [31:0] inp1_buf_0_1_73_fu_2687_p3;
reg   [31:0] inp1_buf_0_1_47_fu_260;
wire   [31:0] inp1_buf_0_1_72_fu_2681_p3;
reg   [31:0] inp1_buf_0_1_48_fu_264;
wire   [31:0] inp1_buf_0_1_75_fu_2665_p3;
reg   [31:0] inp1_buf_0_1_49_fu_268;
wire   [31:0] inp1_buf_0_1_74_fu_2659_p3;
reg   [31:0] inp1_buf_0_1_50_fu_272;
wire   [31:0] inp1_buf_0_1_77_fu_2643_p3;
reg   [31:0] inp1_buf_0_1_51_fu_276;
wire   [31:0] inp1_buf_0_1_76_fu_2637_p3;
reg   [31:0] inp1_buf_0_1_52_fu_280;
wire   [31:0] inp1_buf_0_1_79_fu_2621_p3;
reg   [31:0] inp1_buf_0_1_53_fu_284;
wire   [31:0] inp1_buf_0_1_78_fu_2615_p3;
reg   [31:0] inp1_buf_0_1_54_fu_288;
wire   [31:0] inp1_buf_0_1_81_fu_2599_p3;
reg   [31:0] inp1_buf_0_1_55_fu_292;
wire   [31:0] inp1_buf_0_1_80_fu_2593_p3;
reg   [31:0] inp1_buf_0_1_56_fu_296;
wire   [31:0] inp1_buf_0_1_83_fu_2577_p3;
reg   [31:0] inp1_buf_0_1_57_fu_300;
wire   [31:0] inp1_buf_0_1_82_fu_2571_p3;
reg   [31:0] inp1_buf_0_1_58_fu_304;
wire   [31:0] inp1_buf_0_1_85_fu_2555_p3;
reg   [31:0] inp1_buf_0_1_59_fu_308;
wire   [31:0] inp1_buf_0_1_84_fu_2549_p3;
reg   [31:0] inp1_buf_0_1_60_fu_312;
wire   [31:0] inp1_buf_0_1_87_fu_2533_p3;
reg   [31:0] inp1_buf_0_1_61_fu_316;
wire   [31:0] inp1_buf_0_1_86_fu_2527_p3;
reg   [31:0] inp1_buf_0_1_62_fu_320;
wire   [31:0] inp1_buf_0_1_1_fu_2863_p3;
reg   [31:0] inp1_buf_0_1_63_fu_324;
wire   [31:0] inp1_buf_0_1_fu_2857_p3;
reg   [31:0] out1_buf_0_1_1_fu_328;
wire   [31:0] out1_buf_0_1_2_fu_3953_p3;
reg   [31:0] out1_buf_0_1_3_fu_332;
wire   [31:0] out1_buf_0_1_fu_3946_p3;
reg   [31:0] out1_buf_1_1_1_fu_336;
wire   [31:0] out1_buf_1_1_2_fu_3990_p3;
reg   [31:0] out1_buf_1_1_3_fu_340;
wire   [31:0] out1_buf_1_1_fu_3983_p3;
reg   [31:0] out1_buf_2_1_1_fu_344;
wire   [31:0] out1_buf_2_1_2_fu_4027_p3;
reg   [31:0] out1_buf_2_1_3_fu_348;
wire   [31:0] out1_buf_2_1_fu_4020_p3;
reg   [31:0] out1_buf_3_1_1_fu_352;
wire   [31:0] out1_buf_3_1_2_fu_4064_p3;
reg   [31:0] out1_buf_3_1_3_fu_356;
wire   [31:0] out1_buf_3_1_fu_4057_p3;
reg   [31:0] out1_buf_4_1_1_fu_360;
wire   [31:0] out1_buf_4_1_2_fu_4101_p3;
reg   [31:0] out1_buf_4_1_3_fu_364;
wire   [31:0] out1_buf_4_1_fu_4094_p3;
reg   [31:0] out1_buf_5_1_1_fu_368;
wire   [31:0] out1_buf_5_1_2_fu_4138_p3;
reg   [31:0] out1_buf_5_1_3_fu_372;
wire   [31:0] out1_buf_5_1_fu_4131_p3;
reg   [31:0] out1_buf_6_1_1_fu_376;
wire   [31:0] out1_buf_6_1_2_fu_4175_p3;
reg   [31:0] out1_buf_6_1_3_fu_380;
wire   [31:0] out1_buf_6_1_fu_4168_p3;
reg   [31:0] out1_buf_7_1_1_fu_384;
wire   [31:0] out1_buf_7_1_2_fu_4212_p3;
reg   [31:0] out1_buf_7_1_3_fu_388;
wire   [31:0] out1_buf_7_1_fu_4205_p3;
reg   [31:0] out1_buf_8_1_1_fu_392;
wire   [31:0] out1_buf_8_1_2_fu_4249_p3;
reg   [31:0] out1_buf_8_1_3_fu_396;
wire   [31:0] out1_buf_8_1_fu_4242_p3;
reg   [31:0] out1_buf_9_1_1_fu_400;
wire   [31:0] out1_buf_9_1_2_fu_4286_p3;
reg   [31:0] out1_buf_9_1_3_fu_404;
wire   [31:0] out1_buf_9_1_fu_4279_p3;
reg   [31:0] out1_buf_10_1_1_fu_408;
wire   [31:0] out1_buf_10_1_2_fu_4323_p3;
reg   [31:0] out1_buf_10_1_3_fu_412;
wire   [31:0] out1_buf_10_1_fu_4316_p3;
reg   [31:0] out1_buf_11_1_1_fu_416;
wire   [31:0] out1_buf_11_1_2_fu_4360_p3;
reg   [31:0] out1_buf_11_1_3_fu_420;
wire   [31:0] out1_buf_11_1_fu_4353_p3;
reg   [31:0] out1_buf_12_1_1_fu_424;
wire   [31:0] out1_buf_12_1_2_fu_4397_p3;
reg   [31:0] out1_buf_12_1_3_fu_428;
wire   [31:0] out1_buf_12_1_fu_4390_p3;
reg   [31:0] out1_buf_13_1_1_fu_432;
wire   [31:0] out1_buf_13_1_2_fu_4434_p3;
reg   [31:0] out1_buf_13_1_3_fu_436;
wire   [31:0] out1_buf_13_1_fu_4427_p3;
reg   [31:0] out1_buf_14_1_1_fu_440;
wire   [31:0] out1_buf_14_1_2_fu_4471_p3;
reg   [31:0] out1_buf_14_1_3_fu_444;
wire   [31:0] out1_buf_14_1_fu_4464_p3;
reg   [31:0] out1_buf_15_1_1_fu_448;
wire   [31:0] out1_buf_15_1_2_fu_4508_p3;
reg   [31:0] out1_buf_15_1_3_fu_452;
wire   [31:0] out1_buf_15_1_fu_4501_p3;
wire   [61:0] y3_fu_1149_p4;
wire   [61:0] tmp_fu_1173_p4;
wire   [62:0] tmp_cast1_fu_1199_p1;
wire   [62:0] x2_sum_fu_1203_p2;
wire   [62:0] y4_sum_fu_1218_p2;
wire   [62:0] sum2_cast_cast_fu_1239_p1;
wire   [62:0] x2_sum5_fu_1243_p2;
wire   [62:0] y4_sum1_fu_1258_p2;
wire   [62:0] sum_cast_cast_fu_1281_p1;
wire   [62:0] x2_sum6_fu_1285_p2;
wire   [62:0] y4_sum2_fu_1300_p2;
wire  signed [4:0] sum1_cast1_fu_1315_p1;
wire   [62:0] sum1_cast_cast_fu_1318_p1;
wire   [62:0] x2_sum7_fu_1322_p2;
wire   [62:0] y4_sum3_fu_1337_p2;
wire   [5:0] sum3_fu_1352_p3;
wire   [62:0] sum3_cast_cast_fu_1360_p1;
wire   [62:0] x2_sum8_fu_1364_p2;
wire   [62:0] y4_sum4_fu_1379_p2;
wire   [5:0] tmp_cast_fu_1394_p1;
wire   [5:0] sum4_fu_1398_p2;
wire   [62:0] sum4_cast_cast_fu_1404_p1;
wire   [62:0] x2_sum9_fu_1408_p2;
wire   [62:0] y4_sum5_fu_1423_p2;
wire  signed [5:0] sum5_cast1_fu_1438_p1;
wire   [62:0] sum5_cast_cast_fu_1441_p1;
wire   [62:0] x2_sum1_fu_1445_p2;
wire  signed [5:0] sum6_cast1_fu_1460_p1;
wire   [62:0] sum6_cast_cast_fu_1463_p1;
wire   [62:0] x2_sum2_fu_1467_p2;
wire   [62:0] y4_sum6_fu_1482_p2;
wire   [62:0] y4_sum7_fu_1497_p2;
wire  signed [31:0] a0_fu_1517_p2;
wire   [7:0] grp_fu_1560_p0;
wire  signed [31:0] a3_fu_1547_p2;
wire  signed [9:0] grp_fu_1574_p0;
wire   [31:0] a2_fu_1537_p2;
wire   [9:0] grp_fu_1584_p0;
wire  signed [31:0] grp_fu_1584_p1;
wire   [31:0] a1_fu_1527_p2;
wire  signed [9:0] grp_fu_1594_p0;
wire  signed [31:0] grp_fu_1594_p1;
wire   [9:0] grp_fu_1600_p0;
wire  signed [31:0] grp_fu_1600_p1;
wire   [9:0] grp_fu_1606_p0;
wire  signed [31:0] grp_fu_1606_p1;
wire   [9:0] grp_fu_1612_p0;
wire   [7:0] grp_fu_1618_p0;
wire   [31:0] b0_fu_1512_p2;
wire   [31:0] b1_fu_1532_p2;
wire   [31:0] b2_fu_1522_p2;
wire   [8:0] grp_fu_1640_p0;
wire  signed [31:0] grp_fu_1640_p1;
wire   [31:0] b3_fu_1542_p2;
wire  signed [9:0] grp_fu_1650_p0;
wire  signed [31:0] grp_fu_1650_p1;
wire   [9:0] grp_fu_1656_p0;
wire  signed [31:0] grp_fu_1656_p1;
wire   [8:0] grp_fu_1662_p0;
wire  signed [31:0] grp_fu_1662_p1;
wire   [9:0] grp_fu_1671_p0;
wire  signed [40:0] tmp_cast_29_fu_1677_p1;
wire   [40:0] tmp_3_fu_1680_p2;
wire   [40:0] tmp_1_fu_1695_p2;
wire   [40:0] tmp_5_fu_1709_p2;
wire  signed [40:0] tmp_17_cast_fu_1723_p1;
wire   [40:0] tmp_12_fu_1726_p2;
wire   [40:0] grp_fu_1671_p2;
wire   [40:0] tmp_19_fu_1751_p2;
wire   [40:0] tmp_22_fu_1765_p2;
wire   [31:0] a2_2_fu_1795_p2;
wire   [31:0] a1_2_fu_1791_p2;
wire   [31:0] b0_1_fu_1779_p2;
wire   [31:0] a3_6_fu_1799_p2;
wire   [9:0] grp_fu_1830_p0;
wire   [9:0] grp_fu_1839_p0;
wire   [40:0] grp_fu_1830_p2;
wire   [9:0] grp_fu_1858_p0;
wire   [40:0] grp_fu_1839_p2;
wire   [40:0] grp_fu_1858_p2;
wire   [31:0] b1_1_fu_1874_p2;
wire   [2:0] tmp_35_fu_1930_p1;
wire   [62:0] tmp_46_cast_fu_1942_p1;
wire   [62:0] y4_sum8_fu_1946_p2;
wire   [62:0] p_sum1_cast_cast_fu_1966_p1;
wire   [62:0] y4_sum9_fu_1970_p2;
wire   [6:0] p_sum1_cast1_fu_1985_p1;
wire   [6:0] sum7_fu_1988_p2;
wire   [62:0] sum7_cast_cast_fu_1994_p1;
wire   [62:0] y4_sum10_fu_1998_p2;
wire   [62:0] p_sum_cast_cast_fu_2018_p1;
wire   [62:0] y4_sum11_fu_2022_p2;
wire   [6:0] sum8_fu_2040_p2;
wire   [62:0] sum8_cast_cast_fu_2046_p1;
wire   [62:0] y4_sum12_fu_2050_p2;
wire   [6:0] sum9_fu_2065_p2;
wire   [62:0] sum9_cast_cast_fu_2070_p1;
wire   [62:0] y4_sum13_fu_2074_p2;
wire   [6:0] sum1_fu_2089_p2;
wire   [62:0] sum10_cast_cast_fu_2094_p1;
wire   [62:0] y4_sum14_fu_2098_p2;
wire   [5:0] p_sum2_fu_2113_p2;
wire   [62:0] p_sum2_cast_cast_fu_2118_p1;
wire   [62:0] y4_sum15_fu_2122_p2;
wire   [7:0] grp_fu_2143_p0;
wire  signed [9:0] grp_fu_2155_p0;
wire   [9:0] grp_fu_2164_p0;
wire  signed [31:0] grp_fu_2164_p1;
wire  signed [9:0] grp_fu_2173_p0;
wire  signed [31:0] grp_fu_2173_p1;
wire   [9:0] grp_fu_2179_p0;
wire  signed [31:0] grp_fu_2179_p1;
wire   [9:0] grp_fu_2185_p0;
wire  signed [31:0] grp_fu_2185_p1;
wire   [9:0] grp_fu_2191_p0;
wire   [7:0] grp_fu_2197_p0;
wire   [8:0] grp_fu_2214_p0;
wire  signed [31:0] grp_fu_2214_p1;
wire  signed [9:0] grp_fu_2223_p0;
wire  signed [31:0] grp_fu_2223_p1;
wire   [9:0] grp_fu_2229_p0;
wire  signed [31:0] grp_fu_2229_p1;
wire   [8:0] grp_fu_2235_p0;
wire  signed [31:0] grp_fu_2235_p1;
wire   [9:0] grp_fu_2244_p0;
wire  signed [40:0] tmp_57_cast_fu_2250_p1;
wire   [40:0] tmp_39_fu_2253_p2;
wire   [40:0] tmp_42_fu_2268_p2;
wire   [40:0] tmp_45_fu_2282_p2;
wire  signed [40:0] tmp_73_cast_fu_2296_p1;
wire   [40:0] tmp_48_fu_2299_p2;
wire   [40:0] grp_fu_2244_p2;
wire   [40:0] tmp_55_fu_2324_p2;
wire   [40:0] tmp_58_fu_2338_p2;
wire   [31:0] a2_5_fu_2368_p2;
wire   [31:0] a1_5_fu_2364_p2;
wire   [31:0] b0_3_fu_2352_p2;
wire   [31:0] a3_7_fu_2372_p2;
wire   [9:0] grp_fu_2403_p0;
wire   [9:0] grp_fu_2412_p0;
wire   [40:0] grp_fu_2403_p2;
wire   [9:0] grp_fu_2431_p0;
wire   [40:0] grp_fu_2412_p2;
wire   [40:0] grp_fu_2431_p2;
wire   [31:0] b1_3_fu_2447_p2;
wire   [31:0] inp1_buf_load_0_phi_fu_2893_p3;
wire   [0:0] tmp_74_fu_2901_p3;
wire   [31:0] tmp_114_cast_cast_fu_2909_p3;
wire   [31:0] tmp_75_fu_2917_p2;
wire   [31:0] p_neg_fu_2931_p2;
wire   [31:0] inp1_buf_load_1_phi_fu_2957_p3;
wire   [0:0] tmp_79_fu_2965_p3;
wire   [31:0] tmp_122_cast_cast_fu_2973_p3;
wire   [31:0] tmp_119_1_fu_2981_p2;
wire   [31:0] p_neg_1_fu_2995_p2;
wire   [31:0] inp1_buf_load_2_phi_fu_3021_p3;
wire   [0:0] tmp_83_fu_3029_p3;
wire   [31:0] tmp_125_cast_cast_fu_3037_p3;
wire   [31:0] tmp_119_2_fu_3045_p2;
wire   [31:0] p_neg_2_fu_3059_p2;
wire   [31:0] inp1_buf_load_3_phi_fu_3085_p3;
wire   [0:0] tmp_87_fu_3093_p3;
wire   [31:0] tmp_128_cast_cast_fu_3101_p3;
wire   [31:0] tmp_119_3_fu_3109_p2;
wire   [31:0] p_neg_3_fu_3123_p2;
wire   [31:0] inp1_buf_load_4_phi_fu_3149_p3;
wire   [0:0] tmp_91_fu_3157_p3;
wire   [31:0] tmp_131_cast_cast_fu_3165_p3;
wire   [31:0] tmp_119_4_fu_3173_p2;
wire   [31:0] p_neg_4_fu_3187_p2;
wire   [31:0] inp1_buf_load_5_phi_fu_3213_p3;
wire   [0:0] tmp_95_fu_3221_p3;
wire   [31:0] tmp_134_cast_cast_fu_3229_p3;
wire   [31:0] tmp_119_5_fu_3237_p2;
wire   [31:0] p_neg_5_fu_3251_p2;
wire   [31:0] inp1_buf_load_6_phi_fu_3277_p3;
wire   [0:0] tmp_99_fu_3285_p3;
wire   [31:0] tmp_137_cast_cast_fu_3293_p3;
wire   [31:0] tmp_119_6_fu_3301_p2;
wire   [31:0] p_neg_6_fu_3315_p2;
wire   [31:0] inp1_buf_load_7_phi_fu_3341_p3;
wire   [0:0] tmp_103_fu_3349_p3;
wire   [31:0] tmp_140_cast_cast_fu_3357_p3;
wire   [31:0] tmp_119_7_fu_3365_p2;
wire   [31:0] p_neg_7_fu_3379_p2;
wire   [31:0] inp1_buf_load_8_phi_fu_3405_p3;
wire   [0:0] tmp_107_fu_3413_p3;
wire   [31:0] tmp_143_cast_cast_fu_3421_p3;
wire   [31:0] tmp_119_8_fu_3429_p2;
wire   [31:0] p_neg_8_fu_3443_p2;
wire   [31:0] inp1_buf_load_9_phi_fu_3469_p3;
wire   [0:0] tmp_111_fu_3477_p3;
wire   [31:0] tmp_146_cast_cast_fu_3485_p3;
wire   [31:0] tmp_119_9_fu_3493_p2;
wire   [31:0] p_neg_9_fu_3507_p2;
wire   [31:0] inp1_buf_load_10_phi_fu_3533_p3;
wire   [0:0] tmp_118_fu_3541_p3;
wire   [31:0] tmp_149_cast_cast_fu_3549_p3;
wire   [31:0] tmp_119_s_fu_3557_p2;
wire   [31:0] p_neg_s_fu_3571_p2;
wire   [31:0] inp1_buf_load_11_phi_fu_3597_p3;
wire   [0:0] tmp_123_fu_3605_p3;
wire   [31:0] tmp_152_cast_cast_fu_3613_p3;
wire   [31:0] tmp_119_10_fu_3621_p2;
wire   [31:0] p_neg_10_fu_3635_p2;
wire   [31:0] inp1_buf_load_12_phi_fu_3661_p3;
wire   [0:0] tmp_129_fu_3669_p3;
wire   [31:0] tmp_155_cast_cast_fu_3677_p3;
wire   [31:0] tmp_119_11_fu_3685_p2;
wire   [31:0] p_neg_11_fu_3699_p2;
wire   [31:0] inp1_buf_load_13_phi_fu_3725_p3;
wire   [0:0] tmp_136_fu_3733_p3;
wire   [31:0] tmp_158_cast_cast_fu_3741_p3;
wire   [31:0] tmp_119_12_fu_3749_p2;
wire   [31:0] p_neg_12_fu_3763_p2;
wire   [31:0] inp1_buf_load_14_phi_fu_3789_p3;
wire   [0:0] tmp_138_fu_3797_p3;
wire   [31:0] tmp_161_cast_cast_fu_3805_p3;
wire   [31:0] tmp_119_13_fu_3813_p2;
wire   [31:0] p_neg_13_fu_3827_p2;
wire   [31:0] inp1_buf_load_15_phi_fu_3853_p3;
wire   [0:0] tmp_140_fu_3861_p3;
wire   [31:0] tmp_164_cast_cast_fu_3869_p3;
wire   [31:0] tmp_119_14_fu_3877_p2;
wire   [31:0] p_neg_14_fu_3891_p2;
wire   [28:0] p_lshr_cast_fu_3923_p1;
wire   [28:0] p_neg_t_fu_3926_p2;
wire   [28:0] p_lshr_f_cast_fu_3932_p1;
wire   [28:0] out1_buf_0_1_5_fu_3935_p3;
wire  signed [31:0] out1_buf_0_1_0_cas_fu_3942_p1;
wire   [28:0] p_lshr_1_cast_fu_3960_p1;
wire   [28:0] p_neg_t_1_fu_3963_p2;
wire   [28:0] p_lshr_f_1_cast_fu_3969_p1;
wire   [28:0] out1_buf_1_1_5_fu_3972_p3;
wire  signed [31:0] out1_buf_1_1_0_cas_fu_3979_p1;
wire   [28:0] p_lshr_2_cast_fu_3997_p1;
wire   [28:0] p_neg_t_2_fu_4000_p2;
wire   [28:0] p_lshr_f_2_cast_fu_4006_p1;
wire   [28:0] out1_buf_2_1_5_fu_4009_p3;
wire  signed [31:0] out1_buf_2_1_0_cas_fu_4016_p1;
wire   [28:0] p_lshr_3_cast_fu_4034_p1;
wire   [28:0] p_neg_t_3_fu_4037_p2;
wire   [28:0] p_lshr_f_3_cast_fu_4043_p1;
wire   [28:0] out1_buf_3_1_5_fu_4046_p3;
wire  signed [31:0] out1_buf_3_1_0_cas_fu_4053_p1;
wire   [28:0] p_lshr_4_cast_fu_4071_p1;
wire   [28:0] p_neg_t_4_fu_4074_p2;
wire   [28:0] p_lshr_f_4_cast_fu_4080_p1;
wire   [28:0] out1_buf_4_1_5_fu_4083_p3;
wire  signed [31:0] out1_buf_4_1_0_cas_fu_4090_p1;
wire   [28:0] p_lshr_5_cast_fu_4108_p1;
wire   [28:0] p_neg_t_5_fu_4111_p2;
wire   [28:0] p_lshr_f_5_cast_fu_4117_p1;
wire   [28:0] out1_buf_5_1_5_fu_4120_p3;
wire  signed [31:0] out1_buf_5_1_0_cas_fu_4127_p1;
wire   [28:0] p_lshr_6_cast_fu_4145_p1;
wire   [28:0] p_neg_t_6_fu_4148_p2;
wire   [28:0] p_lshr_f_6_cast_fu_4154_p1;
wire   [28:0] out1_buf_6_1_5_fu_4157_p3;
wire  signed [31:0] out1_buf_6_1_0_cas_fu_4164_p1;
wire   [28:0] p_lshr_7_cast_fu_4182_p1;
wire   [28:0] p_neg_t_7_fu_4185_p2;
wire   [28:0] p_lshr_f_7_cast_fu_4191_p1;
wire   [28:0] out1_buf_7_1_5_fu_4194_p3;
wire  signed [31:0] out1_buf_7_1_0_cas_fu_4201_p1;
wire   [28:0] p_lshr_8_cast_fu_4219_p1;
wire   [28:0] p_neg_t_8_fu_4222_p2;
wire   [28:0] p_lshr_f_8_cast_fu_4228_p1;
wire   [28:0] out1_buf_8_1_5_fu_4231_p3;
wire  signed [31:0] out1_buf_8_1_0_cas_fu_4238_p1;
wire   [28:0] p_lshr_9_cast_fu_4256_p1;
wire   [28:0] p_neg_t_9_fu_4259_p2;
wire   [28:0] p_lshr_f_9_cast_fu_4265_p1;
wire   [28:0] out1_buf_9_1_5_fu_4268_p3;
wire  signed [31:0] out1_buf_9_1_0_cas_fu_4275_p1;
wire   [28:0] p_lshr_cast_36_fu_4293_p1;
wire   [28:0] p_neg_t_s_fu_4296_p2;
wire   [28:0] p_lshr_f_cast_37_fu_4302_p1;
wire   [28:0] out1_buf_10_1_5_fu_4305_p3;
wire  signed [31:0] out1_buf_10_1_0_ca_fu_4312_p1;
wire   [28:0] p_lshr_10_cast_fu_4330_p1;
wire   [28:0] p_neg_t_10_fu_4333_p2;
wire   [28:0] p_lshr_f_10_cast_fu_4339_p1;
wire   [28:0] out1_buf_11_1_5_fu_4342_p3;
wire  signed [31:0] out1_buf_11_1_0_ca_fu_4349_p1;
wire   [28:0] p_lshr_11_cast_fu_4367_p1;
wire   [28:0] p_neg_t_11_fu_4370_p2;
wire   [28:0] p_lshr_f_11_cast_fu_4376_p1;
wire   [28:0] out1_buf_12_1_5_fu_4379_p3;
wire  signed [31:0] out1_buf_12_1_0_ca_fu_4386_p1;
wire   [28:0] p_lshr_12_cast_fu_4404_p1;
wire   [28:0] p_neg_t_12_fu_4407_p2;
wire   [28:0] p_lshr_f_12_cast_fu_4413_p1;
wire   [28:0] out1_buf_13_1_5_fu_4416_p3;
wire  signed [31:0] out1_buf_13_1_0_ca_fu_4423_p1;
wire   [28:0] p_lshr_13_cast_fu_4441_p1;
wire   [28:0] p_neg_t_13_fu_4444_p2;
wire   [28:0] p_lshr_f_13_cast_fu_4450_p1;
wire   [28:0] out1_buf_14_1_5_fu_4453_p3;
wire  signed [31:0] out1_buf_14_1_0_ca_fu_4460_p1;
wire   [28:0] p_lshr_14_cast_fu_4478_p1;
wire   [28:0] p_neg_t_14_fu_4481_p2;
wire   [28:0] p_lshr_f_14_cast_fu_4487_p1;
wire   [28:0] out1_buf_15_1_5_fu_4490_p3;
wire  signed [31:0] out1_buf_15_1_0_ca_fu_4497_p1;
wire   [3:0] tmp_142_fu_4687_p1;
wire   [0:0] tmp_143_fu_4691_p3;
wire   [4:0] tmp_116_fu_4699_p3;
wire   [5:0] tmp_135_fu_4711_p33;
reg    grp_fu_1830_ce;
reg    grp_fu_1839_ce;
reg    grp_fu_1858_ce;
reg    grp_fu_2403_ce;
reg    grp_fu_2412_ce;
reg    grp_fu_2431_ce;
reg   [87:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_1757;

// power-on initialization
initial begin
#0 ap_CS_fsm = 88'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_BUS_SRC_DST_ARREADY = 1'b0;
#0 ap_reg_ioackin_BUS_SRC_DST_AWREADY = 1'b0;
#0 ap_reg_ioackin_BUS_SRC_DST_WREADY = 1'b0;
end

ChenIDct_BUS_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS_CTRL_DATA_WIDTH ))
ChenIDct_BUS_CTRL_s_axi_U(
    .AWVALID(s_axi_BUS_CTRL_AWVALID),
    .AWREADY(s_axi_BUS_CTRL_AWREADY),
    .AWADDR(s_axi_BUS_CTRL_AWADDR),
    .WVALID(s_axi_BUS_CTRL_WVALID),
    .WREADY(s_axi_BUS_CTRL_WREADY),
    .WDATA(s_axi_BUS_CTRL_WDATA),
    .WSTRB(s_axi_BUS_CTRL_WSTRB),
    .ARVALID(s_axi_BUS_CTRL_ARVALID),
    .ARREADY(s_axi_BUS_CTRL_ARREADY),
    .ARADDR(s_axi_BUS_CTRL_ARADDR),
    .RVALID(s_axi_BUS_CTRL_RVALID),
    .RREADY(s_axi_BUS_CTRL_RREADY),
    .RDATA(s_axi_BUS_CTRL_RDATA),
    .RRESP(s_axi_BUS_CTRL_RRESP),
    .BVALID(s_axi_BUS_CTRL_BVALID),
    .BREADY(s_axi_BUS_CTRL_BREADY),
    .BRESP(s_axi_BUS_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .x(x),
    .y(y)
);

ChenIDct_BUS_SRC_DST_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BUS_SRC_DST_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BUS_SRC_DST_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BUS_SRC_DST_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BUS_SRC_DST_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BUS_SRC_DST_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BUS_SRC_DST_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BUS_SRC_DST_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BUS_SRC_DST_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_BUS_SRC_DST_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BUS_SRC_DST_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BUS_SRC_DST_CACHE_VALUE ))
ChenIDct_BUS_SRC_DST_m_axi_U(
    .AWVALID(m_axi_BUS_SRC_DST_AWVALID),
    .AWREADY(m_axi_BUS_SRC_DST_AWREADY),
    .AWADDR(m_axi_BUS_SRC_DST_AWADDR),
    .AWID(m_axi_BUS_SRC_DST_AWID),
    .AWLEN(m_axi_BUS_SRC_DST_AWLEN),
    .AWSIZE(m_axi_BUS_SRC_DST_AWSIZE),
    .AWBURST(m_axi_BUS_SRC_DST_AWBURST),
    .AWLOCK(m_axi_BUS_SRC_DST_AWLOCK),
    .AWCACHE(m_axi_BUS_SRC_DST_AWCACHE),
    .AWPROT(m_axi_BUS_SRC_DST_AWPROT),
    .AWQOS(m_axi_BUS_SRC_DST_AWQOS),
    .AWREGION(m_axi_BUS_SRC_DST_AWREGION),
    .AWUSER(m_axi_BUS_SRC_DST_AWUSER),
    .WVALID(m_axi_BUS_SRC_DST_WVALID),
    .WREADY(m_axi_BUS_SRC_DST_WREADY),
    .WDATA(m_axi_BUS_SRC_DST_WDATA),
    .WSTRB(m_axi_BUS_SRC_DST_WSTRB),
    .WLAST(m_axi_BUS_SRC_DST_WLAST),
    .WID(m_axi_BUS_SRC_DST_WID),
    .WUSER(m_axi_BUS_SRC_DST_WUSER),
    .ARVALID(m_axi_BUS_SRC_DST_ARVALID),
    .ARREADY(m_axi_BUS_SRC_DST_ARREADY),
    .ARADDR(m_axi_BUS_SRC_DST_ARADDR),
    .ARID(m_axi_BUS_SRC_DST_ARID),
    .ARLEN(m_axi_BUS_SRC_DST_ARLEN),
    .ARSIZE(m_axi_BUS_SRC_DST_ARSIZE),
    .ARBURST(m_axi_BUS_SRC_DST_ARBURST),
    .ARLOCK(m_axi_BUS_SRC_DST_ARLOCK),
    .ARCACHE(m_axi_BUS_SRC_DST_ARCACHE),
    .ARPROT(m_axi_BUS_SRC_DST_ARPROT),
    .ARQOS(m_axi_BUS_SRC_DST_ARQOS),
    .ARREGION(m_axi_BUS_SRC_DST_ARREGION),
    .ARUSER(m_axi_BUS_SRC_DST_ARUSER),
    .RVALID(m_axi_BUS_SRC_DST_RVALID),
    .RREADY(m_axi_BUS_SRC_DST_RREADY),
    .RDATA(m_axi_BUS_SRC_DST_RDATA),
    .RLAST(m_axi_BUS_SRC_DST_RLAST),
    .RID(m_axi_BUS_SRC_DST_RID),
    .RUSER(m_axi_BUS_SRC_DST_RUSER),
    .RRESP(m_axi_BUS_SRC_DST_RRESP),
    .BVALID(m_axi_BUS_SRC_DST_BVALID),
    .BREADY(m_axi_BUS_SRC_DST_BREADY),
    .BRESP(m_axi_BUS_SRC_DST_BRESP),
    .BID(m_axi_BUS_SRC_DST_BID),
    .BUSER(m_axi_BUS_SRC_DST_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(BUS_SRC_DST_ARVALID),
    .I_ARREADY(BUS_SRC_DST_ARREADY),
    .I_ARADDR(BUS_SRC_DST_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(BUS_SRC_DST_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(BUS_SRC_DST_RVALID),
    .I_RREADY(BUS_SRC_DST_RREADY),
    .I_RDATA(BUS_SRC_DST_RDATA),
    .I_RID(BUS_SRC_DST_RID),
    .I_RUSER(BUS_SRC_DST_RUSER),
    .I_RRESP(BUS_SRC_DST_RRESP),
    .I_RLAST(BUS_SRC_DST_RLAST),
    .I_AWVALID(BUS_SRC_DST_AWVALID),
    .I_AWREADY(BUS_SRC_DST_AWREADY),
    .I_AWADDR(BUS_SRC_DST_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(BUS_SRC_DST_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(BUS_SRC_DST_WVALID),
    .I_WREADY(BUS_SRC_DST_WREADY),
    .I_WDATA(BUS_SRC_DST_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(BUS_SRC_DST_BVALID),
    .I_BREADY(BUS_SRC_DST_BREADY),
    .I_BRESP(BUS_SRC_DST_BRESP),
    .I_BID(BUS_SRC_DST_BID),
    .I_BUSER(BUS_SRC_DST_BUSER)
);

ChenIDct_mul_8ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
ChenIDct_mul_8ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1560_p0),
    .din1(a0_fu_1517_p2),
    .ce(1'b1),
    .dout(grp_fu_1560_p2)
);

ChenIDct_mul_10s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10s_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1574_p0),
    .din1(a3_fu_1547_p2),
    .ce(1'b1),
    .dout(grp_fu_1574_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1584_p0),
    .din1(grp_fu_1584_p1),
    .ce(1'b1),
    .dout(grp_fu_1584_p2)
);

ChenIDct_mul_10s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10s_cud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1594_p0),
    .din1(grp_fu_1594_p1),
    .ce(1'b1),
    .dout(grp_fu_1594_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1600_p0),
    .din1(grp_fu_1600_p1),
    .ce(1'b1),
    .dout(grp_fu_1600_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1606_p0),
    .din1(grp_fu_1606_p1),
    .ce(1'b1),
    .dout(grp_fu_1606_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1612_p0),
    .din1(a0_fu_1517_p2),
    .ce(1'b1),
    .dout(grp_fu_1612_p2)
);

ChenIDct_mul_8ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
ChenIDct_mul_8ns_bkb_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1618_p0),
    .din1(a3_fu_1547_p2),
    .ce(1'b1),
    .dout(grp_fu_1618_p2)
);

ChenIDct_mul_9ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_9ns_eOg_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1640_p0),
    .din1(grp_fu_1640_p1),
    .ce(1'b1),
    .dout(grp_fu_1640_p2)
);

ChenIDct_mul_10s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10s_cud_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1650_p0),
    .din1(grp_fu_1650_p1),
    .ce(1'b1),
    .dout(grp_fu_1650_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1656_p0),
    .din1(grp_fu_1656_p1),
    .ce(1'b1),
    .dout(grp_fu_1656_p2)
);

ChenIDct_mul_9ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_9ns_eOg_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1662_p0),
    .din1(grp_fu_1662_p1),
    .ce(1'b1),
    .dout(grp_fu_1662_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1671_p0),
    .din1(tmp_13_reg_5007),
    .ce(1'b1),
    .dout(grp_fu_1671_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1830_p0),
    .din1(tmp_15_reg_5012),
    .ce(grp_fu_1830_ce),
    .dout(grp_fu_1830_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1839_p0),
    .din1(tmp_25_reg_5153),
    .ce(grp_fu_1839_ce),
    .dout(grp_fu_1839_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1858_p0),
    .din1(tmp_23_reg_5148),
    .ce(grp_fu_1858_ce),
    .dout(grp_fu_1858_p2)
);

ChenIDct_mul_8ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
ChenIDct_mul_8ns_bkb_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2143_p0),
    .din1(a0_3_reg_5714),
    .ce(1'b1),
    .dout(grp_fu_2143_p2)
);

ChenIDct_mul_10s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10s_cud_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2155_p0),
    .din1(a3_3_reg_5746),
    .ce(1'b1),
    .dout(grp_fu_2155_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2164_p0),
    .din1(grp_fu_2164_p1),
    .ce(1'b1),
    .dout(grp_fu_2164_p2)
);

ChenIDct_mul_10s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10s_cud_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2173_p0),
    .din1(grp_fu_2173_p1),
    .ce(1'b1),
    .dout(grp_fu_2173_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2179_p0),
    .din1(grp_fu_2179_p1),
    .ce(1'b1),
    .dout(grp_fu_2179_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2185_p0),
    .din1(grp_fu_2185_p1),
    .ce(1'b1),
    .dout(grp_fu_2185_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2191_p0),
    .din1(a0_3_reg_5714),
    .ce(1'b1),
    .dout(grp_fu_2191_p2)
);

ChenIDct_mul_8ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
ChenIDct_mul_8ns_bkb_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2197_p0),
    .din1(a3_3_reg_5746),
    .ce(1'b1),
    .dout(grp_fu_2197_p2)
);

ChenIDct_mul_9ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_9ns_eOg_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2214_p0),
    .din1(grp_fu_2214_p1),
    .ce(1'b1),
    .dout(grp_fu_2214_p2)
);

ChenIDct_mul_10s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10s_cud_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2223_p0),
    .din1(grp_fu_2223_p1),
    .ce(1'b1),
    .dout(grp_fu_2223_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2229_p0),
    .din1(grp_fu_2229_p1),
    .ce(1'b1),
    .dout(grp_fu_2229_p2)
);

ChenIDct_mul_9ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_9ns_eOg_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2235_p0),
    .din1(grp_fu_2235_p1),
    .ce(1'b1),
    .dout(grp_fu_2235_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2244_p0),
    .din1(tmp_49_reg_5784),
    .ce(1'b1),
    .dout(grp_fu_2244_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2403_p0),
    .din1(tmp_51_reg_5789),
    .ce(grp_fu_2403_ce),
    .dout(grp_fu_2403_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2412_p0),
    .din1(tmp_61_reg_5930),
    .ce(grp_fu_2412_ce),
    .dout(grp_fu_2412_p2)
);

ChenIDct_mul_10nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 41 ))
ChenIDct_mul_10nsdEe_U32(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2431_p0),
    .din1(tmp_59_reg_5925),
    .ce(grp_fu_2431_ce),
    .dout(grp_fu_2431_p2)
);

ChenIDct_mux_326_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
ChenIDct_mux_326_fYi_U33(
    .din0(out1_buf_0_1_1_fu_328),
    .din1(out1_buf_0_1_3_fu_332),
    .din2(out1_buf_1_1_1_fu_336),
    .din3(out1_buf_1_1_3_fu_340),
    .din4(out1_buf_2_1_1_fu_344),
    .din5(out1_buf_2_1_3_fu_348),
    .din6(out1_buf_3_1_1_fu_352),
    .din7(out1_buf_3_1_3_fu_356),
    .din8(out1_buf_4_1_1_fu_360),
    .din9(out1_buf_4_1_3_fu_364),
    .din10(out1_buf_5_1_1_fu_368),
    .din11(out1_buf_5_1_3_fu_372),
    .din12(out1_buf_6_1_1_fu_376),
    .din13(out1_buf_6_1_3_fu_380),
    .din14(out1_buf_7_1_1_fu_384),
    .din15(out1_buf_7_1_3_fu_388),
    .din16(out1_buf_8_1_1_fu_392),
    .din17(out1_buf_8_1_3_fu_396),
    .din18(out1_buf_9_1_1_fu_400),
    .din19(out1_buf_9_1_3_fu_404),
    .din20(out1_buf_10_1_1_fu_408),
    .din21(out1_buf_10_1_3_fu_412),
    .din22(out1_buf_11_1_1_fu_416),
    .din23(out1_buf_11_1_3_fu_420),
    .din24(out1_buf_12_1_1_fu_424),
    .din25(out1_buf_12_1_3_fu_428),
    .din26(out1_buf_13_1_1_fu_432),
    .din27(out1_buf_13_1_3_fu_436),
    .din28(out1_buf_14_1_1_fu_440),
    .din29(out1_buf_14_1_3_fu_444),
    .din30(out1_buf_15_1_1_fu_448),
    .din31(out1_buf_15_1_3_fu_452),
    .din32(tmp_135_fu_4711_p33),
    .dout(tmp_135_fu_4711_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state79) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond3_fu_2491_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state79)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state79);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((exitcond3_fu_2491_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state85) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state83) & (exitcond_fu_2879_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state85) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state85);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state83) & (exitcond_fu_2879_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_BUS_SRC_DST_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | (~((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b0) | (1'b0 == BUS_SRC_DST_RVALID)) & (1'b1 == ap_CS_fsm_state45)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | (~((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b0) | (1'b0 == BUS_SRC_DST_RVALID)) & (1'b1 == ap_CS_fsm_state10)) | ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37) & (exitcond2_fu_1918_p2 == 1'd1)))) begin
            ap_reg_ioackin_BUS_SRC_DST_ARREADY <= 1'b0;
        end else if ((((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state44)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state43)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state41)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state40)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state39)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state45)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state38)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == BUS_SRC_DST_ARREADY) & (1'b1 == ap_CS_fsm_state37) & (exitcond2_fu_1918_p2 == 1'd1)))) begin
            ap_reg_ioackin_BUS_SRC_DST_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_BUS_SRC_DST_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state64) & (1'b0 == ap_block_state64_io)) | ((1'b1 == ap_CS_fsm_state63) & (1'b0 == ap_block_state63_io)) | ((1'b1 == ap_CS_fsm_state61) & (1'b0 == ap_block_state61_io)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state65_io)) & (1'b1 == ap_CS_fsm_state65)) | ((1'b1 == ap_CS_fsm_state60) & (1'b0 == ap_block_state60_io)) | ((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state62_io)) & (1'b1 == ap_CS_fsm_state62)) | ((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state56)) | ((1'b1 == ap_CS_fsm_state29) & (1'b0 == ap_block_state29_io)) | ((1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_block_state28_io)) | ((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state30_io)) & (1'b1 == ap_CS_fsm_state30)) | ((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25)) | ((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state27_io)) & (1'b1 == ap_CS_fsm_state27)) | ((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77)))) begin
            ap_reg_ioackin_BUS_SRC_DST_AWREADY <= 1'b0;
        end else if ((((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state64)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state63)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state61)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state65)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state60)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state59)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state62)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state56)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state30)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == BUS_SRC_DST_AWREADY) & (1'b1 == ap_CS_fsm_state77)))) begin
            ap_reg_ioackin_BUS_SRC_DST_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_BUS_SRC_DST_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state64) & (1'b0 == ap_block_state64_io)) | ((1'b1 == ap_CS_fsm_state63) & (1'b0 == ap_block_state63_io)) | (~((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (1'b0 == BUS_SRC_DST_BVALID)) & (1'b1 == ap_CS_fsm_state66)) | ((1'b1 == ap_CS_fsm_state61) & (1'b0 == ap_block_state61_io)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state65_io)) & (1'b1 == ap_CS_fsm_state65)) | ((1'b1 == ap_CS_fsm_state60) & (1'b0 == ap_block_state60_io)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state62_io)) & (1'b1 == ap_CS_fsm_state62)) | ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57)) | ((1'b1 == ap_CS_fsm_state29) & (1'b0 == ap_block_state29_io)) | ((1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_block_state28_io)) | (~((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (1'b0 == BUS_SRC_DST_BVALID)) & (1'b1 == ap_CS_fsm_state31)) | ((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state30_io)) & (1'b1 == ap_CS_fsm_state30)) | ((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state27_io)) & (1'b1 == ap_CS_fsm_state27)) | ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((exitcond5_reg_6393 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
            ap_reg_ioackin_BUS_SRC_DST_WREADY <= 1'b0;
        end else if ((((1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state64)) | ((1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state63)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state66)) | ((1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state61)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state65)) | ((1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state60)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state62)) | ((1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state57)) | ((1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state30)) | ((1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == BUS_SRC_DST_WREADY) & (1'b1 == ap_CS_fsm_state22)) | ((exitcond5_reg_6393 == 1'd0) & (1'b1 == BUS_SRC_DST_WREADY) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001)))) begin
            ap_reg_ioackin_BUS_SRC_DST_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_1187_p2 == 1'd1))) begin
        i_1_reg_902 <= 4'd0;
    end else if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state71))) begin
        i_1_reg_902 <= i_4_reg_5240;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        i_2_reg_913 <= i_5_reg_6018;
    end else if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
        i_2_reg_913 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state36))) begin
        i_reg_890 <= i_3_reg_4823;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_890 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state83) & (exitcond_fu_2879_p2 == 1'd1))) begin
        indvar1_reg_946 <= 6'd0;
    end else if (((exitcond5_fu_4675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar1_reg_946 <= indvar_next1_fu_4681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_2503_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_reg_924 <= indvar_next_fu_2509_p2;
    end else if (((exitcond3_fu_2491_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        indvar_reg_924 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        k_reg_935 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        k_reg_935 <= k_1_s_reg_6388;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        BUS_SRC_DST_addr_reg_4801[61 : 0] <= tmp_4_fu_1159_p1[61 : 0];
        tmp_4_cast_reg_4781[61 : 0] <= tmp_4_cast_fu_1163_p1[61 : 0];
        tmp_5_cast1_reg_4808[61 : 0] <= tmp_5_cast1_fu_1183_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        a0_1_reg_5118 <= {{grp_fu_1671_p2[40:9]}};
        a2_1_reg_5124 <= {{tmp_19_fu_1751_p2[40:9]}};
        a3_1_reg_5130 <= {{tmp_22_fu_1765_p2[40:9]}};
        c0_reg_5094 <= {{tmp_3_fu_1680_p2[40:9]}};
        c1_reg_5100 <= {{tmp_1_fu_1695_p2[40:9]}};
        c2_reg_5106 <= {{tmp_5_fu_1709_p2[40:9]}};
        c3_reg_5112 <= {{tmp_12_fu_1726_p2[40:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state46))) begin
        a0_3_reg_5714 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        a0_4_reg_5895 <= {{grp_fu_2244_p2[40:9]}};
        a2_4_reg_5901 <= {{tmp_55_fu_2324_p2[40:9]}};
        a3_4_reg_5907 <= {{tmp_58_fu_2338_p2[40:9]}};
        c0_2_reg_5871 <= {{tmp_39_fu_2253_p2[40:9]}};
        c1_2_reg_5877 <= {{tmp_42_fu_2268_p2[40:9]}};
        c2_2_reg_5883 <= {{tmp_45_fu_2282_p2[40:9]}};
        c3_2_reg_5889 <= {{tmp_48_fu_2299_p2[40:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        a0_6_reg_5142 <= a0_6_fu_1787_p2;
        b3_1_reg_5136 <= b3_1_fu_1783_p2;
        tmp_23_reg_5148 <= tmp_23_fu_1803_p2;
        tmp_25_reg_5153 <= tmp_25_fu_1809_p2;
        tmp_27_reg_5158 <= tmp_27_fu_1815_p2;
        tmp_34_reg_5163 <= tmp_34_fu_1821_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
        a0_7_reg_5919 <= a0_7_fu_2360_p2;
        b3_3_reg_5913 <= b3_3_fu_2356_p2;
        tmp_59_reg_5925 <= tmp_59_fu_2376_p2;
        tmp_61_reg_5930 <= tmp_61_fu_2382_p2;
        tmp_63_reg_5935 <= tmp_63_fu_2388_p2;
        tmp_70_reg_5940 <= tmp_70_fu_2394_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        a1_1_reg_5178 <= {{grp_fu_1830_p2[40:9]}};
        c2_1_reg_5189 <= {{grp_fu_1839_p2[40:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state48))) begin
        a1_3_reg_5725 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        a1_4_reg_5955 <= {{grp_fu_2403_p2[40:9]}};
        c2_3_reg_5966 <= {{grp_fu_2412_p2[40:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state50))) begin
        a2_3_reg_5736 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state52))) begin
        a3_3_reg_5746 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_tmp_71_reg_6032 <= tmp_71_reg_6032;
        ap_reg_pp0_iter1_tmp_72_reg_6036 <= tmp_72_reg_6036;
        inp1_buf_0_0_reg_6072 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        aptr_10_reg_4869[62 : 0] <= y4_sum2_cast_fu_1305_p1[62 : 0];
        aptr_2_reg_4863[62 : 0] <= x2_sum6_cast_fu_1290_p1[62 : 0];
        sum_reg_4858[3 : 0] <= sum_fu_1273_p3[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        aptr_11_reg_4881[62 : 0] <= y4_sum3_cast_fu_1342_p1[62 : 0];
        aptr_3_reg_4875[62 : 0] <= x2_sum7_cast_fu_1327_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        aptr_12_reg_4893[62 : 0] <= y4_sum4_cast_fu_1384_p1[62 : 0];
        aptr_4_reg_4887[62 : 0] <= x2_sum8_cast_fu_1369_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        aptr_13_reg_4905[62 : 0] <= y4_sum5_cast_fu_1428_p1[62 : 0];
        aptr_5_reg_4899[62 : 0] <= x2_sum9_cast_fu_1413_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        aptr_14_reg_4923[62 : 0] <= y4_sum6_cast_fu_1487_p1[62 : 0];
        aptr_15_reg_4929[62 : 0] <= y4_sum7_cast_fu_1502_p1[62 : 0];
        aptr_6_reg_4911[62 : 0] <= x2_sum1_cast_fu_1450_p1[62 : 0];
        aptr_7_reg_4917[62 : 0] <= x2_sum2_cast_fu_1472_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37) & (exitcond2_fu_1918_p2 == 1'd0))) begin
        aptr_16_reg_5252[62 : 0] <= y4_sum8_cast_fu_1951_p1[62 : 0];
        tmp_36_reg_5245[5 : 3] <= tmp_36_fu_1934_p3[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        aptr_17_reg_5648[62 : 0] <= y4_sum9_cast_fu_1975_p1[62 : 0];
        p_sum1_reg_5643[5 : 3] <= p_sum1_fu_1961_p2[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        aptr_18_reg_5655[62 : 0] <= y4_sum10_cast_fu_2003_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        aptr_19_reg_5667[62 : 0] <= y4_sum11_cast_fu_2027_p1[62 : 0];
        p_sum_reg_5662[5 : 3] <= p_sum_fu_2013_p2[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state11))) begin
        aptr_1_read_reg_4940 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        aptr_1_reg_4846[62 : 0] <= x2_sum5_cast_fu_1248_p1[62 : 0];
        aptr_9_reg_4852[62 : 0] <= y4_sum1_cast_fu_1263_p1[62 : 0];
        sum2_reg_4840 <= sum2_fu_1233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        aptr_20_reg_5680[62 : 0] <= y4_sum12_cast_fu_2055_p1[62 : 0];
        p_sum_cast1_reg_5674[5 : 3] <= p_sum_cast1_fu_2037_p1[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        aptr_21_reg_5687[62 : 0] <= y4_sum13_cast_fu_2079_p1[62 : 0];
        aptr_22_reg_5694[62 : 0] <= y4_sum14_cast_fu_2103_p1[62 : 0];
        aptr_23_reg_5701[62 : 0] <= y4_sum15_cast_fu_2127_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state12))) begin
        aptr_2_read_reg_4945 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state13))) begin
        aptr_3_read_reg_4950 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state14))) begin
        aptr_4_read_reg_4955 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state15))) begin
        aptr_5_read_reg_4960 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state16))) begin
        aptr_6_read_reg_4965 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state17))) begin
        aptr_7_read_reg_4970 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        aptr_8_reg_4834[62 : 0] <= y4_sum_cast_fu_1223_p1[62 : 0];
        aptr_reg_4828[62 : 0] <= x2_sum_cast_fu_1208_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b0) | (1'b0 == BUS_SRC_DST_RVALID)) & (1'b1 == ap_CS_fsm_state10))) begin
        aptr_read_reg_4935 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b0) | (1'b0 == BUS_SRC_DST_RVALID)) & (1'b1 == ap_CS_fsm_state45))) begin
        b0_2_reg_5708 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state49))) begin
        b1_2_reg_5730 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        b2_1_reg_5195 <= b2_1_fu_1878_p2;
        c1_1_reg_5201 <= {{grp_fu_1858_p2[40:9]}};
        tmp_28_reg_5207 <= tmp_28_fu_1892_p2;
        tmp_33_reg_5212 <= tmp_33_fu_1897_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state47))) begin
        b2_2_reg_5720 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        b2_3_reg_5972 <= b2_3_fu_2451_p2;
        c1_3_reg_5978 <= {{grp_fu_2431_p2[40:9]}};
        tmp_64_reg_5984 <= tmp_64_fu_2465_p2;
        tmp_69_reg_5989 <= tmp_69_fu_2470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state51))) begin
        b3_2_reg_5741 <= BUS_SRC_DST_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond5_reg_6393 <= exitcond5_fu_4675_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_4823 <= i_3_fu_1193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
        i_4_reg_5240 <= i_4_fu_1924_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        i_5_reg_6018 <= i_5_fu_2497_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_2_fu_200 <= inp1_buf_0_1_4_fu_2841_p3;
        inp1_buf_0_1_33_fu_204 <= inp1_buf_0_1_3_fu_2835_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_34_fu_208 <= inp1_buf_0_1_6_fu_2819_p3;
        inp1_buf_0_1_35_fu_212 <= inp1_buf_0_1_5_fu_2813_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_36_fu_216 <= inp1_buf_0_1_8_fu_2797_p3;
        inp1_buf_0_1_37_fu_220 <= inp1_buf_0_1_7_fu_2791_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_38_fu_224 <= inp1_buf_0_1_65_fu_2775_p3;
        inp1_buf_0_1_39_fu_228 <= inp1_buf_0_1_9_fu_2769_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_40_fu_232 <= inp1_buf_0_1_67_fu_2753_p3;
        inp1_buf_0_1_41_fu_236 <= inp1_buf_0_1_66_fu_2747_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_42_fu_240 <= inp1_buf_0_1_69_fu_2731_p3;
        inp1_buf_0_1_43_fu_244 <= inp1_buf_0_1_68_fu_2725_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_44_fu_248 <= inp1_buf_0_1_71_fu_2709_p3;
        inp1_buf_0_1_45_fu_252 <= inp1_buf_0_1_70_fu_2703_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_46_fu_256 <= inp1_buf_0_1_73_fu_2687_p3;
        inp1_buf_0_1_47_fu_260 <= inp1_buf_0_1_72_fu_2681_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_48_fu_264 <= inp1_buf_0_1_75_fu_2665_p3;
        inp1_buf_0_1_49_fu_268 <= inp1_buf_0_1_74_fu_2659_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_50_fu_272 <= inp1_buf_0_1_77_fu_2643_p3;
        inp1_buf_0_1_51_fu_276 <= inp1_buf_0_1_76_fu_2637_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_52_fu_280 <= inp1_buf_0_1_79_fu_2621_p3;
        inp1_buf_0_1_53_fu_284 <= inp1_buf_0_1_78_fu_2615_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_54_fu_288 <= inp1_buf_0_1_81_fu_2599_p3;
        inp1_buf_0_1_55_fu_292 <= inp1_buf_0_1_80_fu_2593_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_56_fu_296 <= inp1_buf_0_1_83_fu_2577_p3;
        inp1_buf_0_1_57_fu_300 <= inp1_buf_0_1_82_fu_2571_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_58_fu_304 <= inp1_buf_0_1_85_fu_2555_p3;
        inp1_buf_0_1_59_fu_308 <= inp1_buf_0_1_84_fu_2549_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_60_fu_312 <= inp1_buf_0_1_87_fu_2533_p3;
        inp1_buf_0_1_61_fu_316 <= inp1_buf_0_1_86_fu_2527_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_71_reg_6032 == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp1_buf_0_1_62_fu_320 <= inp1_buf_0_1_1_fu_2863_p3;
        inp1_buf_0_1_63_fu_324 <= inp1_buf_0_1_fu_2857_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_2879_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state83))) begin
        k_1_s_reg_6388 <= k_1_s_fu_3917_p2;
        tmp_100_reg_6238 <= tmp_119_6_fu_3301_p2[32'd31];
        tmp_101_reg_6243 <= {{p_neg_6_fu_3315_p2[31:4]}};
        tmp_102_reg_6248 <= {{tmp_119_6_fu_3301_p2[31:4]}};
        tmp_104_reg_6253 <= tmp_119_7_fu_3365_p2[32'd31];
        tmp_105_reg_6258 <= {{p_neg_7_fu_3379_p2[31:4]}};
        tmp_106_reg_6263 <= {{tmp_119_7_fu_3365_p2[31:4]}};
        tmp_108_reg_6268 <= tmp_119_8_fu_3429_p2[32'd31];
        tmp_109_reg_6273 <= {{p_neg_8_fu_3443_p2[31:4]}};
        tmp_110_reg_6278 <= {{tmp_119_8_fu_3429_p2[31:4]}};
        tmp_112_reg_6288 <= {{p_neg_9_fu_3507_p2[31:4]}};
        tmp_113_reg_6293 <= {{tmp_119_9_fu_3493_p2[31:4]}};
        tmp_114_reg_6283 <= tmp_119_9_fu_3493_p2[32'd31];
        tmp_115_reg_6303 <= {{p_neg_s_fu_3571_p2[31:4]}};
        tmp_119_reg_6308 <= {{tmp_119_s_fu_3557_p2[31:4]}};
        tmp_120_reg_6298 <= tmp_119_s_fu_3557_p2[32'd31];
        tmp_121_reg_6318 <= {{p_neg_10_fu_3635_p2[31:4]}};
        tmp_122_reg_6323 <= {{tmp_119_10_fu_3621_p2[31:4]}};
        tmp_124_reg_6333 <= {{p_neg_11_fu_3699_p2[31:4]}};
        tmp_125_reg_6338 <= {{tmp_119_11_fu_3685_p2[31:4]}};
        tmp_126_reg_6313 <= tmp_119_10_fu_3621_p2[32'd31];
        tmp_127_reg_6348 <= {{p_neg_12_fu_3763_p2[31:4]}};
        tmp_128_reg_6353 <= {{tmp_119_12_fu_3749_p2[31:4]}};
        tmp_130_reg_6363 <= {{p_neg_13_fu_3827_p2[31:4]}};
        tmp_131_reg_6368 <= {{tmp_119_13_fu_3813_p2[31:4]}};
        tmp_132_reg_6328 <= tmp_119_11_fu_3685_p2[32'd31];
        tmp_133_reg_6378 <= {{p_neg_14_fu_3891_p2[31:4]}};
        tmp_134_reg_6383 <= {{tmp_119_14_fu_3877_p2[31:4]}};
        tmp_137_reg_6343 <= tmp_119_12_fu_3749_p2[32'd31];
        tmp_139_reg_6358 <= tmp_119_13_fu_3813_p2[32'd31];
        tmp_141_reg_6373 <= tmp_119_14_fu_3877_p2[32'd31];
        tmp_73_reg_6112 <= k_reg_935[32'd4];
        tmp_76_reg_6148 <= tmp_75_fu_2917_p2[32'd31];
        tmp_77_reg_6153 <= {{p_neg_fu_2931_p2[31:4]}};
        tmp_78_reg_6158 <= {{tmp_75_fu_2917_p2[31:4]}};
        tmp_80_reg_6163 <= tmp_119_1_fu_2981_p2[32'd31];
        tmp_81_reg_6168 <= {{p_neg_1_fu_2995_p2[31:4]}};
        tmp_82_reg_6173 <= {{tmp_119_1_fu_2981_p2[31:4]}};
        tmp_84_reg_6178 <= tmp_119_2_fu_3045_p2[32'd31];
        tmp_85_reg_6183 <= {{p_neg_2_fu_3059_p2[31:4]}};
        tmp_86_reg_6188 <= {{tmp_119_2_fu_3045_p2[31:4]}};
        tmp_88_reg_6193 <= tmp_119_3_fu_3109_p2[32'd31];
        tmp_89_reg_6198 <= {{p_neg_3_fu_3123_p2[31:4]}};
        tmp_90_reg_6203 <= {{tmp_119_3_fu_3109_p2[31:4]}};
        tmp_92_reg_6208 <= tmp_119_4_fu_3173_p2[32'd31];
        tmp_93_reg_6213 <= {{p_neg_4_fu_3187_p2[31:4]}};
        tmp_94_reg_6218 <= {{tmp_119_4_fu_3173_p2[31:4]}};
        tmp_96_reg_6223 <= tmp_119_5_fu_3237_p2[32'd31];
        tmp_97_reg_6228 <= {{p_neg_5_fu_3251_p2[31:4]}};
        tmp_98_reg_6233 <= {{tmp_119_5_fu_3237_p2[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        out1_buf_0_1_1_fu_328 <= out1_buf_0_1_2_fu_3953_p3;
        out1_buf_0_1_3_fu_332 <= out1_buf_0_1_fu_3946_p3;
        out1_buf_10_1_1_fu_408 <= out1_buf_10_1_2_fu_4323_p3;
        out1_buf_10_1_3_fu_412 <= out1_buf_10_1_fu_4316_p3;
        out1_buf_11_1_1_fu_416 <= out1_buf_11_1_2_fu_4360_p3;
        out1_buf_11_1_3_fu_420 <= out1_buf_11_1_fu_4353_p3;
        out1_buf_12_1_1_fu_424 <= out1_buf_12_1_2_fu_4397_p3;
        out1_buf_12_1_3_fu_428 <= out1_buf_12_1_fu_4390_p3;
        out1_buf_13_1_1_fu_432 <= out1_buf_13_1_2_fu_4434_p3;
        out1_buf_13_1_3_fu_436 <= out1_buf_13_1_fu_4427_p3;
        out1_buf_14_1_1_fu_440 <= out1_buf_14_1_2_fu_4471_p3;
        out1_buf_14_1_3_fu_444 <= out1_buf_14_1_fu_4464_p3;
        out1_buf_15_1_1_fu_448 <= out1_buf_15_1_2_fu_4508_p3;
        out1_buf_15_1_3_fu_452 <= out1_buf_15_1_fu_4501_p3;
        out1_buf_1_1_1_fu_336 <= out1_buf_1_1_2_fu_3990_p3;
        out1_buf_1_1_3_fu_340 <= out1_buf_1_1_fu_3983_p3;
        out1_buf_2_1_1_fu_344 <= out1_buf_2_1_2_fu_4027_p3;
        out1_buf_2_1_3_fu_348 <= out1_buf_2_1_fu_4020_p3;
        out1_buf_3_1_1_fu_352 <= out1_buf_3_1_2_fu_4064_p3;
        out1_buf_3_1_3_fu_356 <= out1_buf_3_1_fu_4057_p3;
        out1_buf_4_1_1_fu_360 <= out1_buf_4_1_2_fu_4101_p3;
        out1_buf_4_1_3_fu_364 <= out1_buf_4_1_fu_4094_p3;
        out1_buf_5_1_1_fu_368 <= out1_buf_5_1_2_fu_4138_p3;
        out1_buf_5_1_3_fu_372 <= out1_buf_5_1_fu_4131_p3;
        out1_buf_6_1_1_fu_376 <= out1_buf_6_1_2_fu_4175_p3;
        out1_buf_6_1_3_fu_380 <= out1_buf_6_1_fu_4168_p3;
        out1_buf_7_1_1_fu_384 <= out1_buf_7_1_2_fu_4212_p3;
        out1_buf_7_1_3_fu_388 <= out1_buf_7_1_fu_4205_p3;
        out1_buf_8_1_1_fu_392 <= out1_buf_8_1_2_fu_4249_p3;
        out1_buf_8_1_3_fu_396 <= out1_buf_8_1_fu_4242_p3;
        out1_buf_9_1_1_fu_400 <= out1_buf_9_1_2_fu_4286_p3;
        out1_buf_9_1_3_fu_404 <= out1_buf_9_1_fu_4279_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_10_reg_5059 <= grp_fu_1612_p2;
        tmp_11_reg_5064 <= grp_fu_1618_p2;
        tmp_17_reg_5074 <= grp_fu_1640_p2;
        tmp_18_reg_5079 <= grp_fu_1650_p2;
        tmp_20_reg_5084 <= grp_fu_1656_p2;
        tmp_21_reg_5089 <= grp_fu_1662_p2;
        tmp_2_reg_5034 <= grp_fu_1574_p2;
        tmp_6_reg_5039 <= grp_fu_1584_p2;
        tmp_7_reg_5049 <= grp_fu_1600_p2;
        tmp_8_reg_5044 <= grp_fu_1594_p2;
        tmp_9_reg_5054 <= grp_fu_1606_p2;
        tmp_s_reg_5029 <= grp_fu_1560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_4675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_135_reg_6402 <= tmp_135_fu_4711_p34;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_13_reg_5007[31 : 2] <= tmp_13_fu_1624_p2[31 : 2];
        tmp_15_reg_5012[31 : 2] <= tmp_15_fu_1630_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25))) begin
        tmp_29_reg_5217 <= tmp_29_fu_1902_p2;
        tmp_32_reg_5222 <= tmp_32_fu_1906_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26))) begin
        tmp_30_reg_5227 <= tmp_30_fu_1910_p2;
        tmp_31_reg_5232 <= tmp_31_fu_1914_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        tmp_37_reg_5806 <= grp_fu_2143_p2;
        tmp_38_reg_5811 <= grp_fu_2155_p2;
        tmp_40_reg_5816 <= grp_fu_2164_p2;
        tmp_41_reg_5821 <= grp_fu_2173_p2;
        tmp_43_reg_5826 <= grp_fu_2179_p2;
        tmp_44_reg_5831 <= grp_fu_2185_p2;
        tmp_46_reg_5836 <= grp_fu_2191_p2;
        tmp_47_reg_5841 <= grp_fu_2197_p2;
        tmp_53_reg_5851 <= grp_fu_2214_p2;
        tmp_54_reg_5856 <= grp_fu_2223_p2;
        tmp_56_reg_5861 <= grp_fu_2229_p2;
        tmp_57_reg_5866 <= grp_fu_2235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        tmp_49_reg_5784 <= tmp_49_fu_2203_p2;
        tmp_51_reg_5789 <= tmp_51_fu_2207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) & (1'b0 == ap_block_state60_io))) begin
        tmp_65_reg_5994 <= tmp_65_fu_2475_p2;
        tmp_68_reg_5999 <= tmp_68_fu_2479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & (1'b0 == ap_block_state61_io))) begin
        tmp_66_reg_6004 <= tmp_66_fu_2483_p2;
        tmp_67_reg_6009 <= tmp_67_fu_2487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_2503_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_71_reg_6032 <= tmp_71_fu_2515_p1;
        tmp_72_reg_6036 <= indvar_reg_924[32'd4];
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0)) begin
        if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state45))) begin
            BUS_SRC_DST_ARADDR = aptr_23_reg_5701;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            BUS_SRC_DST_ARADDR = aptr_22_reg_5694;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            BUS_SRC_DST_ARADDR = aptr_21_reg_5687;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            BUS_SRC_DST_ARADDR = aptr_20_reg_5680;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            BUS_SRC_DST_ARADDR = aptr_19_reg_5667;
        end else if ((1'b1 == ap_CS_fsm_state40)) begin
            BUS_SRC_DST_ARADDR = aptr_18_reg_5655;
        end else if ((1'b1 == ap_CS_fsm_state39)) begin
            BUS_SRC_DST_ARADDR = aptr_17_reg_5648;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            BUS_SRC_DST_ARADDR = aptr_16_reg_5252;
        end else if (((1'b1 == ap_CS_fsm_state37) & (exitcond2_fu_1918_p2 == 1'd1))) begin
            BUS_SRC_DST_ARADDR = BUS_SRC_DST_addr_reg_4801;
        end else if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state10))) begin
            BUS_SRC_DST_ARADDR = aptr_7_reg_4917;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            BUS_SRC_DST_ARADDR = aptr_6_reg_4911;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            BUS_SRC_DST_ARADDR = aptr_5_reg_4899;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            BUS_SRC_DST_ARADDR = aptr_4_reg_4887;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            BUS_SRC_DST_ARADDR = aptr_3_reg_4875;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            BUS_SRC_DST_ARADDR = aptr_2_reg_4863;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            BUS_SRC_DST_ARADDR = aptr_1_reg_4846;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            BUS_SRC_DST_ARADDR = aptr_reg_4828;
        end else begin
            BUS_SRC_DST_ARADDR = 'bx;
        end
    end else begin
        BUS_SRC_DST_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state37) & (exitcond2_fu_1918_p2 == 1'd1))) begin
        BUS_SRC_DST_ARLEN = 32'd64;
    end else if ((((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state44)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state40)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state39)) | ((1'b1 == BUS_SRC_DST_RVALID) & (ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state45)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state38)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == BUS_SRC_DST_RVALID) & (ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        BUS_SRC_DST_ARLEN = 32'd1;
    end else begin
        BUS_SRC_DST_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state44)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state40)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state39)) | ((1'b1 == BUS_SRC_DST_RVALID) & (ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state45)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state38)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == BUS_SRC_DST_RVALID) & (ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state37) & (exitcond2_fu_1918_p2 == 1'd1)))) begin
        BUS_SRC_DST_ARVALID = 1'b1;
    end else begin
        BUS_SRC_DST_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0)) begin
        if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state65))) begin
            BUS_SRC_DST_AWADDR = aptr_23_reg_5701;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            BUS_SRC_DST_AWADDR = aptr_22_reg_5694;
        end else if ((1'b1 == ap_CS_fsm_state63)) begin
            BUS_SRC_DST_AWADDR = aptr_21_reg_5687;
        end else if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state62))) begin
            BUS_SRC_DST_AWADDR = aptr_20_reg_5680;
        end else if ((1'b1 == ap_CS_fsm_state61)) begin
            BUS_SRC_DST_AWADDR = aptr_19_reg_5667;
        end else if ((1'b1 == ap_CS_fsm_state60)) begin
            BUS_SRC_DST_AWADDR = aptr_18_reg_5655;
        end else if ((1'b1 == ap_CS_fsm_state59)) begin
            BUS_SRC_DST_AWADDR = aptr_17_reg_5648;
        end else if ((1'b1 == ap_CS_fsm_state56)) begin
            BUS_SRC_DST_AWADDR = aptr_16_reg_5252;
        end else if ((1'b1 == ap_CS_fsm_state77)) begin
            BUS_SRC_DST_AWADDR = BUS_SRC_DST_addr_reg_4801;
        end else if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
            BUS_SRC_DST_AWADDR = aptr_15_reg_4929;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            BUS_SRC_DST_AWADDR = aptr_14_reg_4923;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            BUS_SRC_DST_AWADDR = aptr_13_reg_4905;
        end else if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state27))) begin
            BUS_SRC_DST_AWADDR = aptr_12_reg_4893;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            BUS_SRC_DST_AWADDR = aptr_11_reg_4881;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            BUS_SRC_DST_AWADDR = aptr_10_reg_4869;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            BUS_SRC_DST_AWADDR = aptr_9_reg_4852;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            BUS_SRC_DST_AWADDR = aptr_8_reg_4834;
        end else begin
            BUS_SRC_DST_AWADDR = 'bx;
        end
    end else begin
        BUS_SRC_DST_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state77))) begin
        BUS_SRC_DST_AWLEN = 32'd64;
    end else if ((((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state64)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state63)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state61)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state65)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state60)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state59)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state62)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state56)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state21)))) begin
        BUS_SRC_DST_AWLEN = 32'd1;
    end else begin
        BUS_SRC_DST_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state64)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state63)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state61)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state65)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state60)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state59)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state62)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state56)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state21)) | ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state77)))) begin
        BUS_SRC_DST_AWVALID = 1'b1;
    end else begin
        BUS_SRC_DST_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state71)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state70)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state69)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state68)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state67)) | (~((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (1'b0 == BUS_SRC_DST_BVALID)) & (1'b1 == ap_CS_fsm_state66)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state65_io)) & (1'b1 == ap_CS_fsm_state65)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state62_io)) & (1'b1 == ap_CS_fsm_state62)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state36)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state35)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state32)) | (~((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (1'b0 == BUS_SRC_DST_BVALID)) & (1'b1 == ap_CS_fsm_state31)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state30_io)) & (1'b1 == ap_CS_fsm_state30)) | (~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state27_io)) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state91)))) begin
        BUS_SRC_DST_BREADY = 1'b1;
    end else begin
        BUS_SRC_DST_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state52)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state51)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state50)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state49)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state48)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state47)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state46)) | (~((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b0) | (1'b0 == BUS_SRC_DST_RVALID)) & (1'b1 == ap_CS_fsm_state45)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state11)) | (~((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b0) | (1'b0 == BUS_SRC_DST_RVALID)) & (1'b1 == ap_CS_fsm_state10)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        BUS_SRC_DST_RREADY = 1'b1;
    end else begin
        BUS_SRC_DST_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_1757)) begin
            BUS_SRC_DST_WDATA = tmp_135_reg_6402;
        end else if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state66))) begin
            BUS_SRC_DST_WDATA = tmp_70_reg_5940;
        end else if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state65))) begin
            BUS_SRC_DST_WDATA = tmp_69_reg_5989;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            BUS_SRC_DST_WDATA = tmp_68_reg_5999;
        end else if ((1'b1 == ap_CS_fsm_state63)) begin
            BUS_SRC_DST_WDATA = tmp_67_reg_6009;
        end else if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state62))) begin
            BUS_SRC_DST_WDATA = tmp_66_reg_6004;
        end else if ((1'b1 == ap_CS_fsm_state61)) begin
            BUS_SRC_DST_WDATA = tmp_65_reg_5994;
        end else if ((1'b1 == ap_CS_fsm_state60)) begin
            BUS_SRC_DST_WDATA = tmp_64_reg_5984;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            BUS_SRC_DST_WDATA = tmp_63_reg_5935;
        end else if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state31))) begin
            BUS_SRC_DST_WDATA = tmp_34_reg_5163;
        end else if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
            BUS_SRC_DST_WDATA = tmp_33_reg_5212;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            BUS_SRC_DST_WDATA = tmp_32_reg_5222;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            BUS_SRC_DST_WDATA = tmp_31_reg_5232;
        end else if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state27))) begin
            BUS_SRC_DST_WDATA = tmp_30_reg_5227;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            BUS_SRC_DST_WDATA = tmp_29_reg_5217;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            BUS_SRC_DST_WDATA = tmp_28_reg_5207;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            BUS_SRC_DST_WDATA = tmp_27_reg_5158;
        end else begin
            BUS_SRC_DST_WDATA = 'bx;
        end
    end else begin
        BUS_SRC_DST_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state64)) | ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state63)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state66)) | ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state61)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state65)) | ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state60)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state62)) | ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state57)) | ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state31)) | ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30)) | ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == BUS_SRC_DST_BVALID) & (ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)) | ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state22)) | ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (exitcond5_reg_6393 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001)))) begin
        BUS_SRC_DST_WVALID = 1'b1;
    end else begin
        BUS_SRC_DST_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state37) & (exitcond2_fu_1918_p2 == 1'd1)))) begin
        BUS_SRC_DST_blk_n_AR = m_axi_BUS_SRC_DST_ARREADY;
    end else begin
        BUS_SRC_DST_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state77))) begin
        BUS_SRC_DST_blk_n_AW = m_axi_BUS_SRC_DST_AWREADY;
    end else begin
        BUS_SRC_DST_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state91))) begin
        BUS_SRC_DST_blk_n_B = m_axi_BUS_SRC_DST_BVALID;
    end else begin
        BUS_SRC_DST_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        BUS_SRC_DST_blk_n_R = m_axi_BUS_SRC_DST_RVALID;
    end else begin
        BUS_SRC_DST_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22) | ((exitcond5_reg_6393 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        BUS_SRC_DST_blk_n_W = m_axi_BUS_SRC_DST_WREADY;
    end else begin
        BUS_SRC_DST_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond4_fu_2503_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state79 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state79 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_4675_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state85 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state85 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state91))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state91))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_BUS_SRC_DST_ARREADY == 1'b0)) begin
        ap_sig_ioackin_BUS_SRC_DST_ARREADY = BUS_SRC_DST_ARREADY;
    end else begin
        ap_sig_ioackin_BUS_SRC_DST_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_BUS_SRC_DST_AWREADY == 1'b0)) begin
        ap_sig_ioackin_BUS_SRC_DST_AWREADY = BUS_SRC_DST_AWREADY;
    end else begin
        ap_sig_ioackin_BUS_SRC_DST_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_BUS_SRC_DST_WREADY == 1'b0)) begin
        ap_sig_ioackin_BUS_SRC_DST_WREADY = BUS_SRC_DST_WREADY;
    end else begin
        ap_sig_ioackin_BUS_SRC_DST_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
        grp_fu_1830_ce = 1'b1;
    end else begin
        grp_fu_1830_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
        grp_fu_1839_ce = 1'b1;
    end else begin
        grp_fu_1839_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)))) begin
        grp_fu_1858_ce = 1'b1;
    end else begin
        grp_fu_1858_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57)))) begin
        grp_fu_2403_ce = 1'b1;
    end else begin
        grp_fu_2403_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57)))) begin
        grp_fu_2412_ce = 1'b1;
    end else begin
        grp_fu_2412_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | ((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59)))) begin
        grp_fu_2431_ce = 1'b1;
    end else begin
        grp_fu_2431_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_1187_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b0) | (1'b0 == BUS_SRC_DST_RVALID)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state27_io)) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_block_state28_io))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (1'b0 == ap_block_state29_io))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state30_io)) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if ((~((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (1'b0 == BUS_SRC_DST_BVALID)) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37) & (exitcond2_fu_1918_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37) & (exitcond2_fu_1918_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if ((~((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b0) | (1'b0 == BUS_SRC_DST_RVALID)) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == BUS_SRC_DST_RVALID) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (1'b0 == ap_block_state60_io))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (1'b0 == ap_block_state61_io))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if ((~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state62_io)) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (1'b0 == ap_block_state63_io))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (1'b0 == ap_block_state64_io))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if ((~((1'b0 == BUS_SRC_DST_BVALID) | (1'b1 == ap_block_state65_io)) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if ((~((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (1'b0 == BUS_SRC_DST_BVALID)) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((exitcond3_fu_2491_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond4_fu_2503_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond4_fu_2503_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((1'b1 == ap_CS_fsm_state83) & (exitcond_fu_2879_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond5_fu_4675_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond5_fu_4675_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            if (((1'b1 == BUS_SRC_DST_BVALID) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a0_6_fu_1787_p2 = (c1_reg_5100 + c0_reg_5094);

assign a0_7_fu_2360_p2 = (c1_2_reg_5877 + c0_2_reg_5871);

assign a0_fu_1517_p2 = aptr_1_read_reg_4940 << 32'd2;

assign a1_2_fu_1791_p2 = (c0_reg_5094 - c1_reg_5100);

assign a1_5_fu_2364_p2 = (c0_2_reg_5871 - c1_2_reg_5877);

assign a1_fu_1527_p2 = aptr_3_read_reg_4950 << 32'd2;

assign a2_2_fu_1795_p2 = (c3_reg_5112 - c2_reg_5106);

assign a2_5_fu_2368_p2 = (c3_2_reg_5889 - c2_2_reg_5883);

assign a2_fu_1537_p2 = aptr_5_read_reg_4960 << 32'd2;

assign a3_6_fu_1799_p2 = (c2_reg_5106 + c3_reg_5112);

assign a3_7_fu_2372_p2 = (c2_2_reg_5883 + c3_2_reg_5889);

assign a3_fu_1547_p2 = aptr_7_read_reg_4970 << 32'd2;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd87];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == BUS_SRC_DST_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == BUS_SRC_DST_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state86_io));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state86_io));
end

always @ (*) begin
    ap_block_state25_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state26_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state27_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state28_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state29_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state30_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state37_io = ((ap_sig_ioackin_BUS_SRC_DST_ARREADY == 1'b0) & (exitcond2_fu_1918_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state60_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state61_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state62_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state63_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state64_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state65_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) | (ap_sig_ioackin_BUS_SRC_DST_AWREADY == 1'b0));
end

assign ap_block_state79_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state80_pp0_stage0_iter1 = (1'b0 == BUS_SRC_DST_RVALID);
end

assign ap_block_state81_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state86_io = ((ap_sig_ioackin_BUS_SRC_DST_WREADY == 1'b0) & (exitcond5_reg_6393 == 1'd0));
end

assign ap_block_state86_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1757 = ((exitcond5_reg_6393 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b0_1_fu_1779_p2 = (a0_1_reg_5118 + a3_1_reg_5130);

assign b0_3_fu_2352_p2 = (a0_4_reg_5895 + a3_4_reg_5907);

assign b0_fu_1512_p2 = aptr_read_reg_4935 << 32'd2;

assign b1_1_fu_1874_p2 = (a1_1_reg_5178 + a2_1_reg_5124);

assign b1_3_fu_2447_p2 = (a1_4_reg_5955 + a2_4_reg_5901);

assign b1_fu_1532_p2 = aptr_4_read_reg_4955 << 32'd2;

assign b2_1_fu_1878_p2 = (a1_1_reg_5178 - a2_1_reg_5124);

assign b2_3_fu_2451_p2 = (a1_4_reg_5955 - a2_4_reg_5901);

assign b2_fu_1522_p2 = aptr_2_read_reg_4945 << 32'd2;

assign b3_1_fu_1783_p2 = (a0_1_reg_5118 - a3_1_reg_5130);

assign b3_3_fu_2356_p2 = (a0_4_reg_5895 - a3_4_reg_5907);

assign b3_fu_1542_p2 = aptr_6_read_reg_4965 << 32'd2;

assign exitcond1_fu_1187_p2 = ((i_reg_890 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond2_fu_1918_p2 = ((i_1_reg_902 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond3_fu_2491_p2 = ((i_2_reg_913 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond4_fu_2503_p2 = ((indvar_reg_924 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond5_fu_4675_p2 = ((indvar1_reg_946 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_fu_2879_p2 = ((k_reg_935 == 6'd32) ? 1'b1 : 1'b0);

assign grp_fu_1560_p0 = 40'd100;

assign grp_fu_1574_p0 = 41'd2199023255050;

assign grp_fu_1584_p0 = 41'd426;

assign grp_fu_1584_p1 = tmp_5_cast_fu_1580_p1;

assign grp_fu_1594_p0 = 41'd2199023255268;

assign grp_fu_1594_p1 = tmp_7_cast_fu_1590_p1;

assign grp_fu_1600_p0 = 41'd426;

assign grp_fu_1600_p1 = tmp_7_cast_fu_1590_p1;

assign grp_fu_1606_p0 = 41'd284;

assign grp_fu_1606_p1 = tmp_5_cast_fu_1580_p1;

assign grp_fu_1612_p0 = 41'd502;

assign grp_fu_1618_p0 = 40'd100;

assign grp_fu_1640_p0 = 41'd196;

assign grp_fu_1640_p1 = tmp_28_cast_fu_1636_p1;

assign grp_fu_1650_p0 = 41'd2199023255079;

assign grp_fu_1650_p1 = tmp_30_cast_fu_1646_p1;

assign grp_fu_1656_p0 = 41'd473;

assign grp_fu_1656_p1 = tmp_28_cast_fu_1636_p1;

assign grp_fu_1662_p0 = 41'd196;

assign grp_fu_1662_p1 = tmp_30_cast_fu_1646_p1;

assign grp_fu_1671_p0 = 41'd362;

assign grp_fu_1830_p0 = 41'd362;

assign grp_fu_1839_p0 = 41'd362;

assign grp_fu_1858_p0 = 41'd362;

assign grp_fu_2143_p0 = 40'd100;

assign grp_fu_2155_p0 = 41'd2199023255050;

assign grp_fu_2164_p0 = 41'd426;

assign grp_fu_2164_p1 = tmp_62_cast_fu_2161_p1;

assign grp_fu_2173_p0 = 41'd2199023255268;

assign grp_fu_2173_p1 = tmp_64_cast_fu_2170_p1;

assign grp_fu_2179_p0 = 41'd426;

assign grp_fu_2179_p1 = tmp_64_cast_fu_2170_p1;

assign grp_fu_2185_p0 = 41'd284;

assign grp_fu_2185_p1 = tmp_62_cast_fu_2161_p1;

assign grp_fu_2191_p0 = 41'd502;

assign grp_fu_2197_p0 = 40'd100;

assign grp_fu_2214_p0 = 41'd196;

assign grp_fu_2214_p1 = tmp_84_cast_fu_2211_p1;

assign grp_fu_2223_p0 = 41'd2199023255079;

assign grp_fu_2223_p1 = tmp_86_cast_fu_2220_p1;

assign grp_fu_2229_p0 = 41'd473;

assign grp_fu_2229_p1 = tmp_84_cast_fu_2211_p1;

assign grp_fu_2235_p0 = 41'd196;

assign grp_fu_2235_p1 = tmp_86_cast_fu_2220_p1;

assign grp_fu_2244_p0 = 41'd362;

assign grp_fu_2403_p0 = 41'd362;

assign grp_fu_2412_p0 = 41'd362;

assign grp_fu_2431_p0 = 41'd362;

assign i_3_fu_1193_p2 = (i_reg_890 + 4'd1);

assign i_4_fu_1924_p2 = (i_1_reg_902 + 4'd1);

assign i_5_fu_2497_p2 = (i_2_reg_913 + 2'd1);

assign indvar_next1_fu_4681_p2 = (indvar1_reg_946 + 6'd1);

assign indvar_next_fu_2509_p2 = (indvar_reg_924 + 6'd1);

assign inp1_buf_0_1_1_fu_2863_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_62_fu_320 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_3_fu_2835_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_33_fu_204);

assign inp1_buf_0_1_4_fu_2841_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_2_fu_200 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_5_fu_2813_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_35_fu_212);

assign inp1_buf_0_1_65_fu_2775_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_38_fu_224 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_66_fu_2747_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_41_fu_236);

assign inp1_buf_0_1_67_fu_2753_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_40_fu_232 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_68_fu_2725_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_43_fu_244);

assign inp1_buf_0_1_69_fu_2731_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_42_fu_240 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_6_fu_2819_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_34_fu_208 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_70_fu_2703_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_45_fu_252);

assign inp1_buf_0_1_71_fu_2709_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_44_fu_248 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_72_fu_2681_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_47_fu_260);

assign inp1_buf_0_1_73_fu_2687_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_46_fu_256 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_74_fu_2659_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_49_fu_268);

assign inp1_buf_0_1_75_fu_2665_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_48_fu_264 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_76_fu_2637_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_51_fu_276);

assign inp1_buf_0_1_77_fu_2643_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_50_fu_272 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_78_fu_2615_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_53_fu_284);

assign inp1_buf_0_1_79_fu_2621_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_52_fu_280 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_7_fu_2791_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_37_fu_220);

assign inp1_buf_0_1_80_fu_2593_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_55_fu_292);

assign inp1_buf_0_1_81_fu_2599_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_54_fu_288 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_82_fu_2571_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_57_fu_300);

assign inp1_buf_0_1_83_fu_2577_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_56_fu_296 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_84_fu_2549_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_59_fu_308);

assign inp1_buf_0_1_85_fu_2555_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_58_fu_304 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_86_fu_2527_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_61_fu_316);

assign inp1_buf_0_1_87_fu_2533_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_60_fu_312 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_8_fu_2797_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_1_36_fu_216 : inp1_buf_0_0_reg_6072);

assign inp1_buf_0_1_9_fu_2769_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_39_fu_228);

assign inp1_buf_0_1_fu_2857_p3 = ((ap_reg_pp0_iter1_tmp_72_reg_6036[0:0] === 1'b1) ? inp1_buf_0_0_reg_6072 : inp1_buf_0_1_63_fu_324);

assign inp1_buf_load_0_phi_fu_2893_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_33_fu_204 : inp1_buf_0_1_2_fu_200);

assign inp1_buf_load_10_phi_fu_3533_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_53_fu_284 : inp1_buf_0_1_52_fu_280);

assign inp1_buf_load_11_phi_fu_3597_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_55_fu_292 : inp1_buf_0_1_54_fu_288);

assign inp1_buf_load_12_phi_fu_3661_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_57_fu_300 : inp1_buf_0_1_56_fu_296);

assign inp1_buf_load_13_phi_fu_3725_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_59_fu_308 : inp1_buf_0_1_58_fu_304);

assign inp1_buf_load_14_phi_fu_3789_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_61_fu_316 : inp1_buf_0_1_60_fu_312);

assign inp1_buf_load_15_phi_fu_3853_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_63_fu_324 : inp1_buf_0_1_62_fu_320);

assign inp1_buf_load_1_phi_fu_2957_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_35_fu_212 : inp1_buf_0_1_34_fu_208);

assign inp1_buf_load_2_phi_fu_3021_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_37_fu_220 : inp1_buf_0_1_36_fu_216);

assign inp1_buf_load_3_phi_fu_3085_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_39_fu_228 : inp1_buf_0_1_38_fu_224);

assign inp1_buf_load_4_phi_fu_3149_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_41_fu_236 : inp1_buf_0_1_40_fu_232);

assign inp1_buf_load_5_phi_fu_3213_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_43_fu_244 : inp1_buf_0_1_42_fu_240);

assign inp1_buf_load_6_phi_fu_3277_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_45_fu_252 : inp1_buf_0_1_44_fu_248);

assign inp1_buf_load_7_phi_fu_3341_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_47_fu_260 : inp1_buf_0_1_46_fu_256);

assign inp1_buf_load_8_phi_fu_3405_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_49_fu_268 : inp1_buf_0_1_48_fu_264);

assign inp1_buf_load_9_phi_fu_3469_p3 = ((tmp_73_fu_2885_p3[0:0] === 1'b1) ? inp1_buf_0_1_51_fu_276 : inp1_buf_0_1_50_fu_272);

assign k_1_s_fu_3917_p2 = (k_reg_935 + 6'd16);

assign out1_buf_0_1_0_cas_fu_3942_p1 = $signed(out1_buf_0_1_5_fu_3935_p3);

assign out1_buf_0_1_2_fu_3953_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_0_1_1_fu_328 : out1_buf_0_1_0_cas_fu_3942_p1);

assign out1_buf_0_1_5_fu_3935_p3 = ((tmp_76_reg_6148[0:0] === 1'b1) ? p_neg_t_fu_3926_p2 : p_lshr_f_cast_fu_3932_p1);

assign out1_buf_0_1_fu_3946_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_0_1_0_cas_fu_3942_p1 : out1_buf_0_1_3_fu_332);

assign out1_buf_10_1_0_ca_fu_4312_p1 = $signed(out1_buf_10_1_5_fu_4305_p3);

assign out1_buf_10_1_2_fu_4323_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_10_1_1_fu_408 : out1_buf_10_1_0_ca_fu_4312_p1);

assign out1_buf_10_1_5_fu_4305_p3 = ((tmp_120_reg_6298[0:0] === 1'b1) ? p_neg_t_s_fu_4296_p2 : p_lshr_f_cast_37_fu_4302_p1);

assign out1_buf_10_1_fu_4316_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_10_1_0_ca_fu_4312_p1 : out1_buf_10_1_3_fu_412);

assign out1_buf_11_1_0_ca_fu_4349_p1 = $signed(out1_buf_11_1_5_fu_4342_p3);

assign out1_buf_11_1_2_fu_4360_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_11_1_1_fu_416 : out1_buf_11_1_0_ca_fu_4349_p1);

assign out1_buf_11_1_5_fu_4342_p3 = ((tmp_126_reg_6313[0:0] === 1'b1) ? p_neg_t_10_fu_4333_p2 : p_lshr_f_10_cast_fu_4339_p1);

assign out1_buf_11_1_fu_4353_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_11_1_0_ca_fu_4349_p1 : out1_buf_11_1_3_fu_420);

assign out1_buf_12_1_0_ca_fu_4386_p1 = $signed(out1_buf_12_1_5_fu_4379_p3);

assign out1_buf_12_1_2_fu_4397_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_12_1_1_fu_424 : out1_buf_12_1_0_ca_fu_4386_p1);

assign out1_buf_12_1_5_fu_4379_p3 = ((tmp_132_reg_6328[0:0] === 1'b1) ? p_neg_t_11_fu_4370_p2 : p_lshr_f_11_cast_fu_4376_p1);

assign out1_buf_12_1_fu_4390_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_12_1_0_ca_fu_4386_p1 : out1_buf_12_1_3_fu_428);

assign out1_buf_13_1_0_ca_fu_4423_p1 = $signed(out1_buf_13_1_5_fu_4416_p3);

assign out1_buf_13_1_2_fu_4434_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_13_1_1_fu_432 : out1_buf_13_1_0_ca_fu_4423_p1);

assign out1_buf_13_1_5_fu_4416_p3 = ((tmp_137_reg_6343[0:0] === 1'b1) ? p_neg_t_12_fu_4407_p2 : p_lshr_f_12_cast_fu_4413_p1);

assign out1_buf_13_1_fu_4427_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_13_1_0_ca_fu_4423_p1 : out1_buf_13_1_3_fu_436);

assign out1_buf_14_1_0_ca_fu_4460_p1 = $signed(out1_buf_14_1_5_fu_4453_p3);

assign out1_buf_14_1_2_fu_4471_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_14_1_1_fu_440 : out1_buf_14_1_0_ca_fu_4460_p1);

assign out1_buf_14_1_5_fu_4453_p3 = ((tmp_139_reg_6358[0:0] === 1'b1) ? p_neg_t_13_fu_4444_p2 : p_lshr_f_13_cast_fu_4450_p1);

assign out1_buf_14_1_fu_4464_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_14_1_0_ca_fu_4460_p1 : out1_buf_14_1_3_fu_444);

assign out1_buf_15_1_0_ca_fu_4497_p1 = $signed(out1_buf_15_1_5_fu_4490_p3);

assign out1_buf_15_1_2_fu_4508_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_15_1_1_fu_448 : out1_buf_15_1_0_ca_fu_4497_p1);

assign out1_buf_15_1_5_fu_4490_p3 = ((tmp_141_reg_6373[0:0] === 1'b1) ? p_neg_t_14_fu_4481_p2 : p_lshr_f_14_cast_fu_4487_p1);

assign out1_buf_15_1_fu_4501_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_15_1_0_ca_fu_4497_p1 : out1_buf_15_1_3_fu_452);

assign out1_buf_1_1_0_cas_fu_3979_p1 = $signed(out1_buf_1_1_5_fu_3972_p3);

assign out1_buf_1_1_2_fu_3990_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_1_1_1_fu_336 : out1_buf_1_1_0_cas_fu_3979_p1);

assign out1_buf_1_1_5_fu_3972_p3 = ((tmp_80_reg_6163[0:0] === 1'b1) ? p_neg_t_1_fu_3963_p2 : p_lshr_f_1_cast_fu_3969_p1);

assign out1_buf_1_1_fu_3983_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_1_1_0_cas_fu_3979_p1 : out1_buf_1_1_3_fu_340);

assign out1_buf_2_1_0_cas_fu_4016_p1 = $signed(out1_buf_2_1_5_fu_4009_p3);

assign out1_buf_2_1_2_fu_4027_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_2_1_1_fu_344 : out1_buf_2_1_0_cas_fu_4016_p1);

assign out1_buf_2_1_5_fu_4009_p3 = ((tmp_84_reg_6178[0:0] === 1'b1) ? p_neg_t_2_fu_4000_p2 : p_lshr_f_2_cast_fu_4006_p1);

assign out1_buf_2_1_fu_4020_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_2_1_0_cas_fu_4016_p1 : out1_buf_2_1_3_fu_348);

assign out1_buf_3_1_0_cas_fu_4053_p1 = $signed(out1_buf_3_1_5_fu_4046_p3);

assign out1_buf_3_1_2_fu_4064_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_3_1_1_fu_352 : out1_buf_3_1_0_cas_fu_4053_p1);

assign out1_buf_3_1_5_fu_4046_p3 = ((tmp_88_reg_6193[0:0] === 1'b1) ? p_neg_t_3_fu_4037_p2 : p_lshr_f_3_cast_fu_4043_p1);

assign out1_buf_3_1_fu_4057_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_3_1_0_cas_fu_4053_p1 : out1_buf_3_1_3_fu_356);

assign out1_buf_4_1_0_cas_fu_4090_p1 = $signed(out1_buf_4_1_5_fu_4083_p3);

assign out1_buf_4_1_2_fu_4101_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_4_1_1_fu_360 : out1_buf_4_1_0_cas_fu_4090_p1);

assign out1_buf_4_1_5_fu_4083_p3 = ((tmp_92_reg_6208[0:0] === 1'b1) ? p_neg_t_4_fu_4074_p2 : p_lshr_f_4_cast_fu_4080_p1);

assign out1_buf_4_1_fu_4094_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_4_1_0_cas_fu_4090_p1 : out1_buf_4_1_3_fu_364);

assign out1_buf_5_1_0_cas_fu_4127_p1 = $signed(out1_buf_5_1_5_fu_4120_p3);

assign out1_buf_5_1_2_fu_4138_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_5_1_1_fu_368 : out1_buf_5_1_0_cas_fu_4127_p1);

assign out1_buf_5_1_5_fu_4120_p3 = ((tmp_96_reg_6223[0:0] === 1'b1) ? p_neg_t_5_fu_4111_p2 : p_lshr_f_5_cast_fu_4117_p1);

assign out1_buf_5_1_fu_4131_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_5_1_0_cas_fu_4127_p1 : out1_buf_5_1_3_fu_372);

assign out1_buf_6_1_0_cas_fu_4164_p1 = $signed(out1_buf_6_1_5_fu_4157_p3);

assign out1_buf_6_1_2_fu_4175_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_6_1_1_fu_376 : out1_buf_6_1_0_cas_fu_4164_p1);

assign out1_buf_6_1_5_fu_4157_p3 = ((tmp_100_reg_6238[0:0] === 1'b1) ? p_neg_t_6_fu_4148_p2 : p_lshr_f_6_cast_fu_4154_p1);

assign out1_buf_6_1_fu_4168_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_6_1_0_cas_fu_4164_p1 : out1_buf_6_1_3_fu_380);

assign out1_buf_7_1_0_cas_fu_4201_p1 = $signed(out1_buf_7_1_5_fu_4194_p3);

assign out1_buf_7_1_2_fu_4212_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_7_1_1_fu_384 : out1_buf_7_1_0_cas_fu_4201_p1);

assign out1_buf_7_1_5_fu_4194_p3 = ((tmp_104_reg_6253[0:0] === 1'b1) ? p_neg_t_7_fu_4185_p2 : p_lshr_f_7_cast_fu_4191_p1);

assign out1_buf_7_1_fu_4205_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_7_1_0_cas_fu_4201_p1 : out1_buf_7_1_3_fu_388);

assign out1_buf_8_1_0_cas_fu_4238_p1 = $signed(out1_buf_8_1_5_fu_4231_p3);

assign out1_buf_8_1_2_fu_4249_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_8_1_1_fu_392 : out1_buf_8_1_0_cas_fu_4238_p1);

assign out1_buf_8_1_5_fu_4231_p3 = ((tmp_108_reg_6268[0:0] === 1'b1) ? p_neg_t_8_fu_4222_p2 : p_lshr_f_8_cast_fu_4228_p1);

assign out1_buf_8_1_fu_4242_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_8_1_0_cas_fu_4238_p1 : out1_buf_8_1_3_fu_396);

assign out1_buf_9_1_0_cas_fu_4275_p1 = $signed(out1_buf_9_1_5_fu_4268_p3);

assign out1_buf_9_1_2_fu_4286_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_9_1_1_fu_400 : out1_buf_9_1_0_cas_fu_4275_p1);

assign out1_buf_9_1_5_fu_4268_p3 = ((tmp_114_reg_6283[0:0] === 1'b1) ? p_neg_t_9_fu_4259_p2 : p_lshr_f_9_cast_fu_4265_p1);

assign out1_buf_9_1_fu_4279_p3 = ((tmp_73_reg_6112[0:0] === 1'b1) ? out1_buf_9_1_0_cas_fu_4275_p1 : out1_buf_9_1_3_fu_404);

assign p_lshr_10_cast_fu_4330_p1 = tmp_121_reg_6318;

assign p_lshr_11_cast_fu_4367_p1 = tmp_124_reg_6333;

assign p_lshr_12_cast_fu_4404_p1 = tmp_127_reg_6348;

assign p_lshr_13_cast_fu_4441_p1 = tmp_130_reg_6363;

assign p_lshr_14_cast_fu_4478_p1 = tmp_133_reg_6378;

assign p_lshr_1_cast_fu_3960_p1 = tmp_81_reg_6168;

assign p_lshr_2_cast_fu_3997_p1 = tmp_85_reg_6183;

assign p_lshr_3_cast_fu_4034_p1 = tmp_89_reg_6198;

assign p_lshr_4_cast_fu_4071_p1 = tmp_93_reg_6213;

assign p_lshr_5_cast_fu_4108_p1 = tmp_97_reg_6228;

assign p_lshr_6_cast_fu_4145_p1 = tmp_101_reg_6243;

assign p_lshr_7_cast_fu_4182_p1 = tmp_105_reg_6258;

assign p_lshr_8_cast_fu_4219_p1 = tmp_109_reg_6273;

assign p_lshr_9_cast_fu_4256_p1 = tmp_112_reg_6288;

assign p_lshr_cast_36_fu_4293_p1 = tmp_115_reg_6303;

assign p_lshr_cast_fu_3923_p1 = tmp_77_reg_6153;

assign p_lshr_f_10_cast_fu_4339_p1 = tmp_122_reg_6323;

assign p_lshr_f_11_cast_fu_4376_p1 = tmp_125_reg_6338;

assign p_lshr_f_12_cast_fu_4413_p1 = tmp_128_reg_6353;

assign p_lshr_f_13_cast_fu_4450_p1 = tmp_131_reg_6368;

assign p_lshr_f_14_cast_fu_4487_p1 = tmp_134_reg_6383;

assign p_lshr_f_1_cast_fu_3969_p1 = tmp_82_reg_6173;

assign p_lshr_f_2_cast_fu_4006_p1 = tmp_86_reg_6188;

assign p_lshr_f_3_cast_fu_4043_p1 = tmp_90_reg_6203;

assign p_lshr_f_4_cast_fu_4080_p1 = tmp_94_reg_6218;

assign p_lshr_f_5_cast_fu_4117_p1 = tmp_98_reg_6233;

assign p_lshr_f_6_cast_fu_4154_p1 = tmp_102_reg_6248;

assign p_lshr_f_7_cast_fu_4191_p1 = tmp_106_reg_6263;

assign p_lshr_f_8_cast_fu_4228_p1 = tmp_110_reg_6278;

assign p_lshr_f_9_cast_fu_4265_p1 = tmp_113_reg_6293;

assign p_lshr_f_cast_37_fu_4302_p1 = tmp_119_reg_6308;

assign p_lshr_f_cast_fu_3932_p1 = tmp_78_reg_6158;

assign p_neg_10_fu_3635_p2 = (32'd0 - tmp_119_10_fu_3621_p2);

assign p_neg_11_fu_3699_p2 = (32'd0 - tmp_119_11_fu_3685_p2);

assign p_neg_12_fu_3763_p2 = (32'd0 - tmp_119_12_fu_3749_p2);

assign p_neg_13_fu_3827_p2 = (32'd0 - tmp_119_13_fu_3813_p2);

assign p_neg_14_fu_3891_p2 = (32'd0 - tmp_119_14_fu_3877_p2);

assign p_neg_1_fu_2995_p2 = (32'd0 - tmp_119_1_fu_2981_p2);

assign p_neg_2_fu_3059_p2 = (32'd0 - tmp_119_2_fu_3045_p2);

assign p_neg_3_fu_3123_p2 = (32'd0 - tmp_119_3_fu_3109_p2);

assign p_neg_4_fu_3187_p2 = (32'd0 - tmp_119_4_fu_3173_p2);

assign p_neg_5_fu_3251_p2 = (32'd0 - tmp_119_5_fu_3237_p2);

assign p_neg_6_fu_3315_p2 = (32'd0 - tmp_119_6_fu_3301_p2);

assign p_neg_7_fu_3379_p2 = (32'd0 - tmp_119_7_fu_3365_p2);

assign p_neg_8_fu_3443_p2 = (32'd0 - tmp_119_8_fu_3429_p2);

assign p_neg_9_fu_3507_p2 = (32'd0 - tmp_119_9_fu_3493_p2);

assign p_neg_fu_2931_p2 = (32'd0 - tmp_75_fu_2917_p2);

assign p_neg_s_fu_3571_p2 = (32'd0 - tmp_119_s_fu_3557_p2);

assign p_neg_t_10_fu_4333_p2 = (29'd0 - p_lshr_10_cast_fu_4330_p1);

assign p_neg_t_11_fu_4370_p2 = (29'd0 - p_lshr_11_cast_fu_4367_p1);

assign p_neg_t_12_fu_4407_p2 = (29'd0 - p_lshr_12_cast_fu_4404_p1);

assign p_neg_t_13_fu_4444_p2 = (29'd0 - p_lshr_13_cast_fu_4441_p1);

assign p_neg_t_14_fu_4481_p2 = (29'd0 - p_lshr_14_cast_fu_4478_p1);

assign p_neg_t_1_fu_3963_p2 = (29'd0 - p_lshr_1_cast_fu_3960_p1);

assign p_neg_t_2_fu_4000_p2 = (29'd0 - p_lshr_2_cast_fu_3997_p1);

assign p_neg_t_3_fu_4037_p2 = (29'd0 - p_lshr_3_cast_fu_4034_p1);

assign p_neg_t_4_fu_4074_p2 = (29'd0 - p_lshr_4_cast_fu_4071_p1);

assign p_neg_t_5_fu_4111_p2 = (29'd0 - p_lshr_5_cast_fu_4108_p1);

assign p_neg_t_6_fu_4148_p2 = (29'd0 - p_lshr_6_cast_fu_4145_p1);

assign p_neg_t_7_fu_4185_p2 = (29'd0 - p_lshr_7_cast_fu_4182_p1);

assign p_neg_t_8_fu_4222_p2 = (29'd0 - p_lshr_8_cast_fu_4219_p1);

assign p_neg_t_9_fu_4259_p2 = (29'd0 - p_lshr_9_cast_fu_4256_p1);

assign p_neg_t_fu_3926_p2 = (29'd0 - p_lshr_cast_fu_3923_p1);

assign p_neg_t_s_fu_4296_p2 = (29'd0 - p_lshr_cast_36_fu_4293_p1);

assign p_sum1_cast1_fu_1985_p1 = p_sum1_reg_5643;

assign p_sum1_cast_cast_fu_1966_p1 = p_sum1_fu_1961_p2;

assign p_sum1_fu_1961_p2 = (tmp_36_reg_5245 | 6'd1);

assign p_sum2_cast_cast_fu_2118_p1 = p_sum2_fu_2113_p2;

assign p_sum2_fu_2113_p2 = (tmp_36_reg_5245 | 6'd7);

assign p_sum_cast1_fu_2037_p1 = p_sum_reg_5662;

assign p_sum_cast_cast_fu_2018_p1 = p_sum_fu_2013_p2;

assign p_sum_fu_2013_p2 = (tmp_36_reg_5245 | 6'd3);

assign sum10_cast_cast_fu_2094_p1 = sum1_fu_2089_p2;

assign sum1_cast1_fu_1315_p1 = $signed(sum2_reg_4840);

assign sum1_cast_cast_fu_1318_p1 = $unsigned(sum1_cast1_fu_1315_p1);

assign sum1_fu_2089_p2 = (7'd3 + p_sum_cast1_reg_5674);

assign sum2_cast_cast_fu_1239_p1 = sum2_fu_1233_p2;

assign sum2_fu_1233_p2 = (i_reg_890 ^ 4'd8);

assign sum3_cast_cast_fu_1360_p1 = sum3_fu_1352_p3;

assign sum3_fu_1352_p3 = {{2'd2}, {i_reg_890}};

assign sum4_cast_cast_fu_1404_p1 = sum4_fu_1398_p2;

assign sum4_fu_1398_p2 = ($signed(6'd40) + $signed(tmp_cast_fu_1394_p1));

assign sum5_cast1_fu_1438_p1 = $signed(sum_reg_4858);

assign sum5_cast_cast_fu_1441_p1 = $unsigned(sum5_cast1_fu_1438_p1);

assign sum6_cast1_fu_1460_p1 = $signed(sum2_reg_4840);

assign sum6_cast_cast_fu_1463_p1 = $unsigned(sum6_cast1_fu_1460_p1);

assign sum7_cast_cast_fu_1994_p1 = sum7_fu_1988_p2;

assign sum7_fu_1988_p2 = (7'd1 + p_sum1_cast1_fu_1985_p1);

assign sum8_cast_cast_fu_2046_p1 = sum8_fu_2040_p2;

assign sum8_fu_2040_p2 = (7'd1 + p_sum_cast1_fu_2037_p1);

assign sum9_cast_cast_fu_2070_p1 = sum9_fu_2065_p2;

assign sum9_fu_2065_p2 = (7'd2 + p_sum_cast1_reg_5674);

assign sum_cast_cast_fu_1281_p1 = sum_fu_1273_p3;

assign sum_fu_1273_p3 = {{1'd1}, {i_reg_890}};

assign tmp_103_fu_3349_p3 = inp1_buf_load_7_phi_fu_3341_p3[32'd31];

assign tmp_107_fu_3413_p3 = inp1_buf_load_8_phi_fu_3405_p3[32'd31];

assign tmp_111_fu_3477_p3 = inp1_buf_load_9_phi_fu_3469_p3[32'd31];

assign tmp_114_cast_cast_fu_2909_p3 = ((tmp_74_fu_2901_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_116_fu_4699_p3 = {{tmp_142_fu_4687_p1}, {tmp_143_fu_4691_p3}};

assign tmp_118_fu_3541_p3 = inp1_buf_load_10_phi_fu_3533_p3[32'd31];

assign tmp_119_10_fu_3621_p2 = (tmp_152_cast_cast_fu_3613_p3 + inp1_buf_load_11_phi_fu_3597_p3);

assign tmp_119_11_fu_3685_p2 = (tmp_155_cast_cast_fu_3677_p3 + inp1_buf_load_12_phi_fu_3661_p3);

assign tmp_119_12_fu_3749_p2 = (tmp_158_cast_cast_fu_3741_p3 + inp1_buf_load_13_phi_fu_3725_p3);

assign tmp_119_13_fu_3813_p2 = (tmp_161_cast_cast_fu_3805_p3 + inp1_buf_load_14_phi_fu_3789_p3);

assign tmp_119_14_fu_3877_p2 = (tmp_164_cast_cast_fu_3869_p3 + inp1_buf_load_15_phi_fu_3853_p3);

assign tmp_119_1_fu_2981_p2 = (tmp_122_cast_cast_fu_2973_p3 + inp1_buf_load_1_phi_fu_2957_p3);

assign tmp_119_2_fu_3045_p2 = (tmp_125_cast_cast_fu_3037_p3 + inp1_buf_load_2_phi_fu_3021_p3);

assign tmp_119_3_fu_3109_p2 = (tmp_128_cast_cast_fu_3101_p3 + inp1_buf_load_3_phi_fu_3085_p3);

assign tmp_119_4_fu_3173_p2 = (tmp_131_cast_cast_fu_3165_p3 + inp1_buf_load_4_phi_fu_3149_p3);

assign tmp_119_5_fu_3237_p2 = (tmp_134_cast_cast_fu_3229_p3 + inp1_buf_load_5_phi_fu_3213_p3);

assign tmp_119_6_fu_3301_p2 = (tmp_137_cast_cast_fu_3293_p3 + inp1_buf_load_6_phi_fu_3277_p3);

assign tmp_119_7_fu_3365_p2 = (tmp_140_cast_cast_fu_3357_p3 + inp1_buf_load_7_phi_fu_3341_p3);

assign tmp_119_8_fu_3429_p2 = (tmp_143_cast_cast_fu_3421_p3 + inp1_buf_load_8_phi_fu_3405_p3);

assign tmp_119_9_fu_3493_p2 = (tmp_146_cast_cast_fu_3485_p3 + inp1_buf_load_9_phi_fu_3469_p3);

assign tmp_119_s_fu_3557_p2 = (tmp_149_cast_cast_fu_3549_p3 + inp1_buf_load_10_phi_fu_3533_p3);

assign tmp_122_cast_cast_fu_2973_p3 = ((tmp_79_fu_2965_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_123_fu_3605_p3 = inp1_buf_load_11_phi_fu_3597_p3[32'd31];

assign tmp_125_cast_cast_fu_3037_p3 = ((tmp_83_fu_3029_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_128_cast_cast_fu_3101_p3 = ((tmp_87_fu_3093_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_129_fu_3669_p3 = inp1_buf_load_12_phi_fu_3661_p3[32'd31];

assign tmp_12_fu_1726_p2 = ($signed(tmp_10_reg_5059) + $signed(tmp_17_cast_fu_1723_p1));

assign tmp_131_cast_cast_fu_3165_p3 = ((tmp_91_fu_3157_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_134_cast_cast_fu_3229_p3 = ((tmp_95_fu_3221_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_135_fu_4711_p33 = tmp_116_fu_4699_p3;

assign tmp_136_fu_3733_p3 = inp1_buf_load_13_phi_fu_3725_p3[32'd31];

assign tmp_137_cast_cast_fu_3293_p3 = ((tmp_99_fu_3285_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_138_fu_3797_p3 = inp1_buf_load_14_phi_fu_3789_p3[32'd31];

assign tmp_13_fu_1624_p2 = (b0_fu_1512_p2 + b1_fu_1532_p2);

assign tmp_140_cast_cast_fu_3357_p3 = ((tmp_103_fu_3349_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_140_fu_3861_p3 = inp1_buf_load_15_phi_fu_3853_p3[32'd31];

assign tmp_142_fu_4687_p1 = indvar1_reg_946[3:0];

assign tmp_143_cast_cast_fu_3421_p3 = ((tmp_107_fu_3413_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_143_fu_4691_p3 = indvar1_reg_946[32'd4];

assign tmp_146_cast_cast_fu_3485_p3 = ((tmp_111_fu_3477_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_149_cast_cast_fu_3549_p3 = ((tmp_118_fu_3541_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_152_cast_cast_fu_3613_p3 = ((tmp_123_fu_3605_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_155_cast_cast_fu_3677_p3 = ((tmp_129_fu_3669_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_158_cast_cast_fu_3741_p3 = ((tmp_136_fu_3733_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_15_fu_1630_p2 = (b0_fu_1512_p2 - b1_fu_1532_p2);

assign tmp_161_cast_cast_fu_3805_p3 = ((tmp_138_fu_3797_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_164_cast_cast_fu_3869_p3 = ((tmp_140_fu_3861_p3[0:0] === 1'b1) ? 32'd4294967288 : 32'd8);

assign tmp_17_cast_fu_1723_p1 = $signed(tmp_11_reg_5064);

assign tmp_19_fu_1751_p2 = (tmp_17_reg_5074 + tmp_18_reg_5079);

assign tmp_1_fu_1695_p2 = (tmp_8_reg_5044 + tmp_6_reg_5039);

assign tmp_22_fu_1765_p2 = (tmp_20_reg_5084 + tmp_21_reg_5089);

assign tmp_23_fu_1803_p2 = (a2_2_fu_1795_p2 - a1_2_fu_1791_p2);

assign tmp_25_fu_1809_p2 = (a1_2_fu_1791_p2 + a2_2_fu_1795_p2);

assign tmp_27_fu_1815_p2 = (b0_1_fu_1779_p2 + a3_6_fu_1799_p2);

assign tmp_28_cast_fu_1636_p1 = $signed(b2_fu_1522_p2);

assign tmp_28_fu_1892_p2 = (b1_1_fu_1874_p2 + c2_1_reg_5189);

assign tmp_29_fu_1902_p2 = (b2_1_reg_5195 + c1_1_reg_5201);

assign tmp_30_cast_fu_1646_p1 = $signed(b3_fu_1542_p2);

assign tmp_30_fu_1910_p2 = (b3_1_reg_5136 + a0_6_reg_5142);

assign tmp_31_fu_1914_p2 = (b3_1_reg_5136 - a0_6_reg_5142);

assign tmp_32_fu_1906_p2 = (b2_1_reg_5195 - c1_1_reg_5201);

assign tmp_33_fu_1897_p2 = (b1_1_fu_1874_p2 - c2_1_reg_5189);

assign tmp_34_fu_1821_p2 = (b0_1_fu_1779_p2 - a3_6_fu_1799_p2);

assign tmp_35_fu_1930_p1 = i_1_reg_902[2:0];

assign tmp_36_fu_1934_p3 = {{tmp_35_fu_1930_p1}, {3'd0}};

assign tmp_39_fu_2253_p2 = ($signed(tmp_57_cast_fu_2250_p1) + $signed(tmp_38_reg_5811));

assign tmp_3_fu_1680_p2 = ($signed(tmp_cast_29_fu_1677_p1) + $signed(tmp_2_reg_5034));

assign tmp_42_fu_2268_p2 = (tmp_41_reg_5821 + tmp_40_reg_5816);

assign tmp_45_fu_2282_p2 = (tmp_43_reg_5826 + tmp_44_reg_5831);

assign tmp_46_cast_fu_1942_p1 = tmp_36_fu_1934_p3;

assign tmp_48_fu_2299_p2 = ($signed(tmp_46_reg_5836) + $signed(tmp_73_cast_fu_2296_p1));

assign tmp_49_fu_2203_p2 = (b0_2_reg_5708 + b1_2_reg_5730);

assign tmp_4_cast_fu_1163_p1 = y3_fu_1149_p4;

assign tmp_4_fu_1159_p1 = y3_fu_1149_p4;

assign tmp_51_fu_2207_p2 = (b0_2_reg_5708 - b1_2_reg_5730);

assign tmp_55_fu_2324_p2 = (tmp_53_reg_5851 + tmp_54_reg_5856);

assign tmp_57_cast_fu_2250_p1 = $signed(tmp_37_reg_5806);

assign tmp_58_fu_2338_p2 = (tmp_56_reg_5861 + tmp_57_reg_5866);

assign tmp_59_fu_2376_p2 = (a2_5_fu_2368_p2 - a1_5_fu_2364_p2);

assign tmp_5_cast1_fu_1183_p1 = tmp_fu_1173_p4;

assign tmp_5_cast_fu_1580_p1 = $signed(a2_fu_1537_p2);

assign tmp_5_fu_1709_p2 = (tmp_7_reg_5049 + tmp_9_reg_5054);

assign tmp_61_fu_2382_p2 = (a1_5_fu_2364_p2 + a2_5_fu_2368_p2);

assign tmp_62_cast_fu_2161_p1 = $signed(a2_3_reg_5736);

assign tmp_63_fu_2388_p2 = (b0_3_fu_2352_p2 + a3_7_fu_2372_p2);

assign tmp_64_cast_fu_2170_p1 = $signed(a1_3_reg_5725);

assign tmp_64_fu_2465_p2 = (b1_3_fu_2447_p2 + c2_3_reg_5966);

assign tmp_65_fu_2475_p2 = (b2_3_reg_5972 + c1_3_reg_5978);

assign tmp_66_fu_2483_p2 = (b3_3_reg_5913 + a0_7_reg_5919);

assign tmp_67_fu_2487_p2 = (b3_3_reg_5913 - a0_7_reg_5919);

assign tmp_68_fu_2479_p2 = (b2_3_reg_5972 - c1_3_reg_5978);

assign tmp_69_fu_2470_p2 = (b1_3_fu_2447_p2 - c2_3_reg_5966);

assign tmp_70_fu_2394_p2 = (b0_3_fu_2352_p2 - a3_7_fu_2372_p2);

assign tmp_71_fu_2515_p1 = indvar_reg_924[3:0];

assign tmp_73_cast_fu_2296_p1 = $signed(tmp_47_reg_5841);

assign tmp_73_fu_2885_p3 = k_reg_935[32'd4];

assign tmp_74_fu_2901_p3 = inp1_buf_load_0_phi_fu_2893_p3[32'd31];

assign tmp_75_fu_2917_p2 = (tmp_114_cast_cast_fu_2909_p3 + inp1_buf_load_0_phi_fu_2893_p3);

assign tmp_79_fu_2965_p3 = inp1_buf_load_1_phi_fu_2957_p3[32'd31];

assign tmp_7_cast_fu_1590_p1 = $signed(a1_fu_1527_p2);

assign tmp_83_fu_3029_p3 = inp1_buf_load_2_phi_fu_3021_p3[32'd31];

assign tmp_84_cast_fu_2211_p1 = $signed(b2_2_reg_5720);

assign tmp_86_cast_fu_2220_p1 = $signed(b3_2_reg_5741);

assign tmp_87_fu_3093_p3 = inp1_buf_load_3_phi_fu_3085_p3[32'd31];

assign tmp_91_fu_3157_p3 = inp1_buf_load_4_phi_fu_3149_p3[32'd31];

assign tmp_95_fu_3221_p3 = inp1_buf_load_5_phi_fu_3213_p3[32'd31];

assign tmp_99_fu_3285_p3 = inp1_buf_load_6_phi_fu_3277_p3[32'd31];

assign tmp_cast1_fu_1199_p1 = i_reg_890;

assign tmp_cast_29_fu_1677_p1 = $signed(tmp_s_reg_5029);

assign tmp_cast_fu_1394_p1 = i_reg_890;

assign tmp_fu_1173_p4 = {{x[63:2]}};

assign x2_sum1_cast_fu_1450_p1 = x2_sum1_fu_1445_p2;

assign x2_sum1_fu_1445_p2 = (tmp_5_cast1_reg_4808 + sum5_cast_cast_fu_1441_p1);

assign x2_sum2_cast_fu_1472_p1 = x2_sum2_fu_1467_p2;

assign x2_sum2_fu_1467_p2 = (tmp_5_cast1_reg_4808 + sum6_cast_cast_fu_1463_p1);

assign x2_sum5_cast_fu_1248_p1 = x2_sum5_fu_1243_p2;

assign x2_sum5_fu_1243_p2 = (tmp_5_cast1_reg_4808 + sum2_cast_cast_fu_1239_p1);

assign x2_sum6_cast_fu_1290_p1 = x2_sum6_fu_1285_p2;

assign x2_sum6_fu_1285_p2 = (tmp_5_cast1_reg_4808 + sum_cast_cast_fu_1281_p1);

assign x2_sum7_cast_fu_1327_p1 = x2_sum7_fu_1322_p2;

assign x2_sum7_fu_1322_p2 = (tmp_5_cast1_reg_4808 + sum1_cast_cast_fu_1318_p1);

assign x2_sum8_cast_fu_1369_p1 = x2_sum8_fu_1364_p2;

assign x2_sum8_fu_1364_p2 = (tmp_5_cast1_reg_4808 + sum3_cast_cast_fu_1360_p1);

assign x2_sum9_cast_fu_1413_p1 = x2_sum9_fu_1408_p2;

assign x2_sum9_fu_1408_p2 = (tmp_5_cast1_reg_4808 + sum4_cast_cast_fu_1404_p1);

assign x2_sum_cast_fu_1208_p1 = x2_sum_fu_1203_p2;

assign x2_sum_fu_1203_p2 = (tmp_5_cast1_reg_4808 + tmp_cast1_fu_1199_p1);

assign y3_fu_1149_p4 = {{y[63:2]}};

assign y4_sum10_cast_fu_2003_p1 = y4_sum10_fu_1998_p2;

assign y4_sum10_fu_1998_p2 = (tmp_4_cast_reg_4781 + sum7_cast_cast_fu_1994_p1);

assign y4_sum11_cast_fu_2027_p1 = y4_sum11_fu_2022_p2;

assign y4_sum11_fu_2022_p2 = (tmp_4_cast_reg_4781 + p_sum_cast_cast_fu_2018_p1);

assign y4_sum12_cast_fu_2055_p1 = y4_sum12_fu_2050_p2;

assign y4_sum12_fu_2050_p2 = (tmp_4_cast_reg_4781 + sum8_cast_cast_fu_2046_p1);

assign y4_sum13_cast_fu_2079_p1 = y4_sum13_fu_2074_p2;

assign y4_sum13_fu_2074_p2 = (tmp_4_cast_reg_4781 + sum9_cast_cast_fu_2070_p1);

assign y4_sum14_cast_fu_2103_p1 = y4_sum14_fu_2098_p2;

assign y4_sum14_fu_2098_p2 = (tmp_4_cast_reg_4781 + sum10_cast_cast_fu_2094_p1);

assign y4_sum15_cast_fu_2127_p1 = y4_sum15_fu_2122_p2;

assign y4_sum15_fu_2122_p2 = (tmp_4_cast_reg_4781 + p_sum2_cast_cast_fu_2118_p1);

assign y4_sum1_cast_fu_1263_p1 = y4_sum1_fu_1258_p2;

assign y4_sum1_fu_1258_p2 = (tmp_4_cast_reg_4781 + sum2_cast_cast_fu_1239_p1);

assign y4_sum2_cast_fu_1305_p1 = y4_sum2_fu_1300_p2;

assign y4_sum2_fu_1300_p2 = (tmp_4_cast_reg_4781 + sum_cast_cast_fu_1281_p1);

assign y4_sum3_cast_fu_1342_p1 = y4_sum3_fu_1337_p2;

assign y4_sum3_fu_1337_p2 = (tmp_4_cast_reg_4781 + sum1_cast_cast_fu_1318_p1);

assign y4_sum4_cast_fu_1384_p1 = y4_sum4_fu_1379_p2;

assign y4_sum4_fu_1379_p2 = (tmp_4_cast_reg_4781 + sum3_cast_cast_fu_1360_p1);

assign y4_sum5_cast_fu_1428_p1 = y4_sum5_fu_1423_p2;

assign y4_sum5_fu_1423_p2 = (tmp_4_cast_reg_4781 + sum4_cast_cast_fu_1404_p1);

assign y4_sum6_cast_fu_1487_p1 = y4_sum6_fu_1482_p2;

assign y4_sum6_fu_1482_p2 = (tmp_4_cast_reg_4781 + sum5_cast_cast_fu_1441_p1);

assign y4_sum7_cast_fu_1502_p1 = y4_sum7_fu_1497_p2;

assign y4_sum7_fu_1497_p2 = (tmp_4_cast_reg_4781 + sum6_cast_cast_fu_1463_p1);

assign y4_sum8_cast_fu_1951_p1 = y4_sum8_fu_1946_p2;

assign y4_sum8_fu_1946_p2 = (tmp_4_cast_reg_4781 + tmp_46_cast_fu_1942_p1);

assign y4_sum9_cast_fu_1975_p1 = y4_sum9_fu_1970_p2;

assign y4_sum9_fu_1970_p2 = (tmp_4_cast_reg_4781 + p_sum1_cast_cast_fu_1966_p1);

assign y4_sum_cast_fu_1223_p1 = y4_sum_fu_1218_p2;

assign y4_sum_fu_1218_p2 = (tmp_4_cast_reg_4781 + tmp_cast1_fu_1199_p1);

always @ (posedge ap_clk) begin
    tmp_4_cast_reg_4781[62] <= 1'b0;
    BUS_SRC_DST_addr_reg_4801[63:62] <= 2'b00;
    tmp_5_cast1_reg_4808[62] <= 1'b0;
    aptr_reg_4828[63] <= 1'b0;
    aptr_8_reg_4834[63] <= 1'b0;
    aptr_1_reg_4846[63] <= 1'b0;
    aptr_9_reg_4852[63] <= 1'b0;
    sum_reg_4858[4] <= 1'b1;
    aptr_2_reg_4863[63] <= 1'b0;
    aptr_10_reg_4869[63] <= 1'b0;
    aptr_3_reg_4875[63] <= 1'b0;
    aptr_11_reg_4881[63] <= 1'b0;
    aptr_4_reg_4887[63] <= 1'b0;
    aptr_12_reg_4893[63] <= 1'b0;
    aptr_5_reg_4899[63] <= 1'b0;
    aptr_13_reg_4905[63] <= 1'b0;
    aptr_6_reg_4911[63] <= 1'b0;
    aptr_7_reg_4917[63] <= 1'b0;
    aptr_14_reg_4923[63] <= 1'b0;
    aptr_15_reg_4929[63] <= 1'b0;
    tmp_13_reg_5007[1:0] <= 2'b00;
    tmp_15_reg_5012[1:0] <= 2'b00;
    tmp_36_reg_5245[2:0] <= 3'b000;
    aptr_16_reg_5252[63] <= 1'b0;
    p_sum1_reg_5643[2:0] <= 3'b001;
    aptr_17_reg_5648[63] <= 1'b0;
    aptr_18_reg_5655[63] <= 1'b0;
    p_sum_reg_5662[2:0] <= 3'b011;
    aptr_19_reg_5667[63] <= 1'b0;
    p_sum_cast1_reg_5674[2:0] <= 3'b011;
    p_sum_cast1_reg_5674[6] <= 1'b0;
    aptr_20_reg_5680[63] <= 1'b0;
    aptr_21_reg_5687[63] <= 1'b0;
    aptr_22_reg_5694[63] <= 1'b0;
    aptr_23_reg_5701[63] <= 1'b0;
end

endmodule //ChenIDct
