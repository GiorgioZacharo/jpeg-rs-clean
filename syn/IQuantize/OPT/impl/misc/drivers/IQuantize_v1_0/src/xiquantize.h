// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XIQUANTIZE_H
#define XIQUANTIZE_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xiquantize_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Bus_ctrl_BaseAddress;
} XIquantize_Config;
#endif

typedef struct {
    u32 Bus_ctrl_BaseAddress;
    u32 IsReady;
} XIquantize;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XIquantize_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XIquantize_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XIquantize_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XIquantize_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XIquantize_Initialize(XIquantize *InstancePtr, u16 DeviceId);
XIquantize_Config* XIquantize_LookupConfig(u16 DeviceId);
int XIquantize_CfgInitialize(XIquantize *InstancePtr, XIquantize_Config *ConfigPtr);
#else
int XIquantize_Initialize(XIquantize *InstancePtr, const char* InstanceName);
int XIquantize_Release(XIquantize *InstancePtr);
#endif

void XIquantize_Start(XIquantize *InstancePtr);
u32 XIquantize_IsDone(XIquantize *InstancePtr);
u32 XIquantize_IsIdle(XIquantize *InstancePtr);
u32 XIquantize_IsReady(XIquantize *InstancePtr);
void XIquantize_EnableAutoRestart(XIquantize *InstancePtr);
void XIquantize_DisableAutoRestart(XIquantize *InstancePtr);

void XIquantize_Set_matrix(XIquantize *InstancePtr, u32 Data);
u32 XIquantize_Get_matrix(XIquantize *InstancePtr);
void XIquantize_Set_qmatrix(XIquantize *InstancePtr, u32 Data);
u32 XIquantize_Get_qmatrix(XIquantize *InstancePtr);

void XIquantize_InterruptGlobalEnable(XIquantize *InstancePtr);
void XIquantize_InterruptGlobalDisable(XIquantize *InstancePtr);
void XIquantize_InterruptEnable(XIquantize *InstancePtr, u32 Mask);
void XIquantize_InterruptDisable(XIquantize *InstancePtr, u32 Mask);
void XIquantize_InterruptClear(XIquantize *InstancePtr, u32 Mask);
u32 XIquantize_InterruptGetEnabled(XIquantize *InstancePtr);
u32 XIquantize_InterruptGetStatus(XIquantize *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
