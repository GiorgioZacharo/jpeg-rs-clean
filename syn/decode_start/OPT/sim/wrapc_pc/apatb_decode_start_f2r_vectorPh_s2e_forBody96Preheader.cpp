// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "BUS_SRC"
#define AUTOTB_TVIN_BUS_SRC  "../tv/cdatafile/c.decode_start_f2r_vectorPh_s2e_forBody96Preheader.autotvin_BUS_SRC.dat"
// wrapc file define: "BUS_DST"
#define AUTOTB_TVOUT_BUS_DST  "../tv/cdatafile/c.decode_start_f2r_vectorPh_s2e_forBody96Preheader.autotvout_BUS_DST.dat"
#define AUTOTB_TVIN_BUS_DST  "../tv/cdatafile/c.decode_start_f2r_vectorPh_s2e_forBody96Preheader.autotvin_BUS_DST.dat"
// wrapc file define: "y_buf"
#define AUTOTB_TVIN_y_buf  "../tv/cdatafile/c.decode_start_f2r_vectorPh_s2e_forBody96Preheader.autotvin_y_buf.dat"
// wrapc file define: "u_buf"
#define AUTOTB_TVIN_u_buf  "../tv/cdatafile/c.decode_start_f2r_vectorPh_s2e_forBody96Preheader.autotvin_u_buf.dat"
// wrapc file define: "v_buf"
#define AUTOTB_TVIN_v_buf  "../tv/cdatafile/c.decode_start_f2r_vectorPh_s2e_forBody96Preheader.autotvin_v_buf.dat"
// wrapc file define: "rgb_buf"
#define AUTOTB_TVIN_rgb_buf  "../tv/cdatafile/c.decode_start_f2r_vectorPh_s2e_forBody96Preheader.autotvin_rgb_buf.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "BUS_DST"
#define AUTOTB_TVOUT_PC_BUS_DST  "../tv/rtldatafile/rtl.decode_start_f2r_vectorPh_s2e_forBody96Preheader.autotvout_BUS_DST.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			BUS_SRC_depth = 0;
			BUS_DST_depth = 0;
			y_buf_depth = 0;
			u_buf_depth = 0;
			v_buf_depth = 0;
			rgb_buf_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{BUS_SRC " << BUS_SRC_depth << "}\n";
			total_list << "{BUS_DST " << BUS_DST_depth << "}\n";
			total_list << "{y_buf " << y_buf_depth << "}\n";
			total_list << "{u_buf " << u_buf_depth << "}\n";
			total_list << "{v_buf " << v_buf_depth << "}\n";
			total_list << "{rgb_buf " << rgb_buf_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int BUS_SRC_depth;
		int BUS_DST_depth;
		int y_buf_depth;
		int u_buf_depth;
		int v_buf_depth;
		int rgb_buf_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void decode_start_f2r_vectorPh_s2e_forBody96Preheader (
int y_buf[6][64],
int u_buf[64],
int v_buf[64],
int rgb_buf[4][3][64]);

extern "C" void AESL_WRAP_decode_start_f2r_vectorPh_s2e_forBody96Preheader (
int y_buf[6][64],
int u_buf[64],
int v_buf[64],
int rgb_buf[4][3][64])
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "BUS_DST"
		aesl_fh.read(AUTOTB_TVOUT_PC_BUS_DST, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_BUS_DST, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_BUS_DST, AESL_token); // data

			sc_bv<32> *BUS_DST_pc_buffer = new sc_bv<32>[768];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'BUS_DST', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'BUS_DST', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					BUS_DST_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_BUS_DST, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_BUS_DST))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: BUS_DST
				{
					// bitslice(31, 0)
					// {
						// celement: rgb_buf(31, 0)
						// {
							sc_lv<32>* rgb_buf_lv0_0_3_1_lv1_0_2_1_lv2_0_63_1 = new sc_lv<32>[768];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: rgb_buf(31, 0)
						{
							// carray: (0) => (3) @ (1)
							for (int i_0 = 0; i_0 <= 3; i_0 += 1)
							{
								// carray: (0) => (2) @ (1)
								for (int i_1 = 0; i_1 <= 2; i_1 += 1)
								{
									// carray: (0) => (63) @ (1)
									for (int i_2 = 0; i_2 <= 63; i_2 += 1)
									{
										if (&(rgb_buf[0][0][0]) != NULL) // check the null address if the c port is array or others
										{
											rgb_buf_lv0_0_3_1_lv1_0_2_1_lv2_0_63_1[hls_map_index].range(31, 0) = sc_bv<32>(BUS_DST_pc_buffer[hls_map_index].range(31, 0));
											hls_map_index++;
										}
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: rgb_buf(31, 0)
						{
							// carray: (0) => (3) @ (1)
							for (int i_0 = 0; i_0 <= 3; i_0 += 1)
							{
								// carray: (0) => (2) @ (1)
								for (int i_1 = 0; i_1 <= 2; i_1 += 1)
								{
									// carray: (0) => (63) @ (1)
									for (int i_2 = 0; i_2 <= 63; i_2 += 1)
									{
										// sub                    : i_0 i_1 i_2
										// ori_name               : rgb_buf[i_0][i_1][i_2]
										// sub_1st_elem           : 0 0 0
										// ori_name_1st_elem      : rgb_buf[0][0][0]
										// output_left_conversion : rgb_buf[i_0][i_1][i_2]
										// output_type_conversion : (rgb_buf_lv0_0_3_1_lv1_0_2_1_lv2_0_63_1[hls_map_index]).to_uint64()
										if (&(rgb_buf[0][0][0]) != NULL) // check the null address if the c port is array or others
										{
											rgb_buf[i_0][i_1][i_2] = (rgb_buf_lv0_0_3_1_lv1_0_2_1_lv2_0_63_1[hls_map_index]).to_uint64();
											hls_map_index++;
										}
									}
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] BUS_DST_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "BUS_SRC"
		char* tvin_BUS_SRC = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_BUS_SRC);

		// "BUS_DST"
		char* tvin_BUS_DST = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_BUS_DST);
		char* tvout_BUS_DST = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_BUS_DST);

		// "y_buf"
		char* tvin_y_buf = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_y_buf);

		// "u_buf"
		char* tvin_u_buf = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_u_buf);

		// "v_buf"
		char* tvin_v_buf = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_v_buf);

		// "rgb_buf"
		char* tvin_rgb_buf = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_rgb_buf);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_BUS_SRC, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_BUS_SRC, tvin_BUS_SRC);

		sc_bv<32>* BUS_SRC_tvin_wrapc_buffer = new sc_bv<32>[512];

		// RTL Name: BUS_SRC
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: y_buf(31, 0)
				{
					// carray: (0) => (5) @ (1)
					for (int i_0 = 0; i_0 <= 5; i_0 += 1)
					{
						// carray: (0) => (63) @ (1)
						for (int i_1 = 0; i_1 <= 63; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : y_buf[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : y_buf[0][0]
							// regulate_c_name       : y_buf
							// input_type_conversion : y_buf[i_0][i_1]
							if (&(y_buf[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> y_buf_tmp_mem;
								y_buf_tmp_mem = y_buf[i_0][i_1];
								BUS_SRC_tvin_wrapc_buffer[hls_map_index].range(31, 0) = y_buf_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
				// celement: u_buf(31, 0)
				{
					// carray: (0) => (63) @ (1)
					for (int i_0 = 0; i_0 <= 63; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : u_buf[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : u_buf[0]
						// regulate_c_name       : u_buf
						// input_type_conversion : u_buf[i_0]
						if (&(u_buf[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> u_buf_tmp_mem;
							u_buf_tmp_mem = u_buf[i_0];
							BUS_SRC_tvin_wrapc_buffer[hls_map_index].range(31, 0) = u_buf_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
				// celement: v_buf(31, 0)
				{
					// carray: (0) => (63) @ (1)
					for (int i_0 = 0; i_0 <= 63; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : v_buf[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : v_buf[0]
						// regulate_c_name       : v_buf
						// input_type_conversion : v_buf[i_0]
						if (&(v_buf[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> v_buf_tmp_mem;
							v_buf_tmp_mem = v_buf[i_0];
							BUS_SRC_tvin_wrapc_buffer[hls_map_index].range(31, 0) = v_buf_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 512; i++)
		{
			sprintf(tvin_BUS_SRC, "%s\n", (BUS_SRC_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_BUS_SRC, tvin_BUS_SRC);
		}

		tcl_file.set_num(512, &tcl_file.BUS_SRC_depth);
		sprintf(tvin_BUS_SRC, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_BUS_SRC, tvin_BUS_SRC);

		// release memory allocation
		delete [] BUS_SRC_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_BUS_DST, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_BUS_DST, tvin_BUS_DST);

		sc_bv<32>* BUS_DST_tvin_wrapc_buffer = new sc_bv<32>[768];

		// RTL Name: BUS_DST
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: rgb_buf(31, 0)
				{
					// carray: (0) => (3) @ (1)
					for (int i_0 = 0; i_0 <= 3; i_0 += 1)
					{
						// carray: (0) => (2) @ (1)
						for (int i_1 = 0; i_1 <= 2; i_1 += 1)
						{
							// carray: (0) => (63) @ (1)
							for (int i_2 = 0; i_2 <= 63; i_2 += 1)
							{
								// sub                   : i_0 i_1 i_2
								// ori_name              : rgb_buf[i_0][i_1][i_2]
								// sub_1st_elem          : 0 0 0
								// ori_name_1st_elem     : rgb_buf[0][0][0]
								// regulate_c_name       : rgb_buf
								// input_type_conversion : rgb_buf[i_0][i_1][i_2]
								if (&(rgb_buf[0][0][0]) != NULL) // check the null address if the c port is array or others
								{
									sc_lv<32> rgb_buf_tmp_mem;
									rgb_buf_tmp_mem = rgb_buf[i_0][i_1][i_2];
									BUS_DST_tvin_wrapc_buffer[hls_map_index].range(31, 0) = rgb_buf_tmp_mem.range(31, 0);
                                 			       hls_map_index++;
								}
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 768; i++)
		{
			sprintf(tvin_BUS_DST, "%s\n", (BUS_DST_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_BUS_DST, tvin_BUS_DST);
		}

		tcl_file.set_num(768, &tcl_file.BUS_DST_depth);
		sprintf(tvin_BUS_DST, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_BUS_DST, tvin_BUS_DST);

		// release memory allocation
		delete [] BUS_DST_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_y_buf, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_y_buf, tvin_y_buf);

		sc_bv<64> y_buf_tvin_wrapc_buffer;

		// RTL Name: y_buf
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_y_buf, "%s\n", (y_buf_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_y_buf, tvin_y_buf);
		}

		tcl_file.set_num(1, &tcl_file.y_buf_depth);
		sprintf(tvin_y_buf, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_y_buf, tvin_y_buf);

		// [[transaction]]
		sprintf(tvin_u_buf, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_u_buf, tvin_u_buf);

		sc_bv<64> u_buf_tvin_wrapc_buffer;

		// RTL Name: u_buf
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_u_buf, "%s\n", (u_buf_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_u_buf, tvin_u_buf);
		}

		tcl_file.set_num(1, &tcl_file.u_buf_depth);
		sprintf(tvin_u_buf, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_u_buf, tvin_u_buf);

		// [[transaction]]
		sprintf(tvin_v_buf, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_v_buf, tvin_v_buf);

		sc_bv<64> v_buf_tvin_wrapc_buffer;

		// RTL Name: v_buf
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_v_buf, "%s\n", (v_buf_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_v_buf, tvin_v_buf);
		}

		tcl_file.set_num(1, &tcl_file.v_buf_depth);
		sprintf(tvin_v_buf, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_v_buf, tvin_v_buf);

		// [[transaction]]
		sprintf(tvin_rgb_buf, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_rgb_buf, tvin_rgb_buf);

		sc_bv<64> rgb_buf_tvin_wrapc_buffer;

		// RTL Name: rgb_buf
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_rgb_buf, "%s\n", (rgb_buf_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_rgb_buf, tvin_rgb_buf);
		}

		tcl_file.set_num(1, &tcl_file.rgb_buf_depth);
		sprintf(tvin_rgb_buf, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_rgb_buf, tvin_rgb_buf);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		decode_start_f2r_vectorPh_s2e_forBody96Preheader(y_buf, u_buf, v_buf, rgb_buf);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_BUS_DST, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_BUS_DST, tvout_BUS_DST);

		sc_bv<32>* BUS_DST_tvout_wrapc_buffer = new sc_bv<32>[768];

		// RTL Name: BUS_DST
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: rgb_buf(31, 0)
				{
					// carray: (0) => (3) @ (1)
					for (int i_0 = 0; i_0 <= 3; i_0 += 1)
					{
						// carray: (0) => (2) @ (1)
						for (int i_1 = 0; i_1 <= 2; i_1 += 1)
						{
							// carray: (0) => (63) @ (1)
							for (int i_2 = 0; i_2 <= 63; i_2 += 1)
							{
								// sub                   : i_0 i_1 i_2
								// ori_name              : rgb_buf[i_0][i_1][i_2]
								// sub_1st_elem          : 0 0 0
								// ori_name_1st_elem     : rgb_buf[0][0][0]
								// regulate_c_name       : rgb_buf
								// input_type_conversion : rgb_buf[i_0][i_1][i_2]
								if (&(rgb_buf[0][0][0]) != NULL) // check the null address if the c port is array or others
								{
									sc_lv<32> rgb_buf_tmp_mem;
									rgb_buf_tmp_mem = rgb_buf[i_0][i_1][i_2];
									BUS_DST_tvout_wrapc_buffer[hls_map_index].range(31, 0) = rgb_buf_tmp_mem.range(31, 0);
                                 			       hls_map_index++;
								}
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 768; i++)
		{
			sprintf(tvout_BUS_DST, "%s\n", (BUS_DST_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_BUS_DST, tvout_BUS_DST);
		}

		tcl_file.set_num(768, &tcl_file.BUS_DST_depth);
		sprintf(tvout_BUS_DST, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_BUS_DST, tvout_BUS_DST);

		// release memory allocation
		delete [] BUS_DST_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "BUS_SRC"
		delete [] tvin_BUS_SRC;
		// release memory allocation: "BUS_DST"
		delete [] tvout_BUS_DST;
		delete [] tvin_BUS_DST;
		// release memory allocation: "y_buf"
		delete [] tvin_y_buf;
		// release memory allocation: "u_buf"
		delete [] tvin_u_buf;
		// release memory allocation: "v_buf"
		delete [] tvin_v_buf;
		// release memory allocation: "rgb_buf"
		delete [] tvin_rgb_buf;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

