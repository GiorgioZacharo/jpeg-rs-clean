// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XWRITEONEBLOCK_F2R_ENTRY_S2E_FOREND13_H
#define XWRITEONEBLOCK_F2R_ENTRY_S2E_FOREND13_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xwriteoneblock_f2r_entry_s2e_forend13_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Bus_ctrl_BaseAddress;
    u32 Ctrl_bus_BaseAddress;
} XWriteoneblock_f2r_entry_s2e_forend13_Config;
#endif

typedef struct {
    u32 Bus_ctrl_BaseAddress;
    u32 Ctrl_bus_BaseAddress;
    u32 IsReady;
} XWriteoneblock_f2r_entry_s2e_forend13;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XWriteoneblock_f2r_entry_s2e_forend13_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XWriteoneblock_f2r_entry_s2e_forend13_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XWriteoneblock_f2r_entry_s2e_forend13_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XWriteoneblock_f2r_entry_s2e_forend13_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XWriteoneblock_f2r_entry_s2e_forend13_Initialize(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, u16 DeviceId);
XWriteoneblock_f2r_entry_s2e_forend13_Config* XWriteoneblock_f2r_entry_s2e_forend13_LookupConfig(u16 DeviceId);
int XWriteoneblock_f2r_entry_s2e_forend13_CfgInitialize(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, XWriteoneblock_f2r_entry_s2e_forend13_Config *ConfigPtr);
#else
int XWriteoneblock_f2r_entry_s2e_forend13_Initialize(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, const char* InstanceName);
int XWriteoneblock_f2r_entry_s2e_forend13_Release(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
#endif

void XWriteoneblock_f2r_entry_s2e_forend13_Start(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
u32 XWriteoneblock_f2r_entry_s2e_forend13_IsDone(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
u32 XWriteoneblock_f2r_entry_s2e_forend13_IsIdle(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
u32 XWriteoneblock_f2r_entry_s2e_forend13_IsReady(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
void XWriteoneblock_f2r_entry_s2e_forend13_EnableAutoRestart(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
void XWriteoneblock_f2r_entry_s2e_forend13_DisableAutoRestart(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);

void XWriteoneblock_f2r_entry_s2e_forend13_Set_store(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, u64 Data);
u64 XWriteoneblock_f2r_entry_s2e_forend13_Get_store(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
void XWriteoneblock_f2r_entry_s2e_forend13_Set_out_buf(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, u64 Data);
u64 XWriteoneblock_f2r_entry_s2e_forend13_Get_out_buf(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
void XWriteoneblock_f2r_entry_s2e_forend13_Set_width(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, u32 Data);
u32 XWriteoneblock_f2r_entry_s2e_forend13_Get_width(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
void XWriteoneblock_f2r_entry_s2e_forend13_Set_height(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, u32 Data);
u32 XWriteoneblock_f2r_entry_s2e_forend13_Get_height(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
void XWriteoneblock_f2r_entry_s2e_forend13_Set_voffs(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, u32 Data);
u32 XWriteoneblock_f2r_entry_s2e_forend13_Get_voffs(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
void XWriteoneblock_f2r_entry_s2e_forend13_Set_hoffs(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, u32 Data);
u32 XWriteoneblock_f2r_entry_s2e_forend13_Get_hoffs(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);

void XWriteoneblock_f2r_entry_s2e_forend13_InterruptGlobalEnable(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
void XWriteoneblock_f2r_entry_s2e_forend13_InterruptGlobalDisable(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
void XWriteoneblock_f2r_entry_s2e_forend13_InterruptEnable(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, u32 Mask);
void XWriteoneblock_f2r_entry_s2e_forend13_InterruptDisable(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, u32 Mask);
void XWriteoneblock_f2r_entry_s2e_forend13_InterruptClear(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr, u32 Mask);
u32 XWriteoneblock_f2r_entry_s2e_forend13_InterruptGetEnabled(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);
u32 XWriteoneblock_f2r_entry_s2e_forend13_InterruptGetStatus(XWriteoneblock_f2r_entry_s2e_forend13 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
