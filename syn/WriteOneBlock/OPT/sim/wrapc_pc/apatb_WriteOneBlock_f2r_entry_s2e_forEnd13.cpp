// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "BUS_SRC"
#define AUTOTB_TVIN_BUS_SRC  "../tv/cdatafile/c.WriteOneBlock_f2r_entry_s2e_forEnd13.autotvin_BUS_SRC.dat"
// wrapc file define: "BUS_DST"
#define AUTOTB_TVOUT_BUS_DST  "../tv/cdatafile/c.WriteOneBlock_f2r_entry_s2e_forEnd13.autotvout_BUS_DST.dat"
#define AUTOTB_TVIN_BUS_DST  "../tv/cdatafile/c.WriteOneBlock_f2r_entry_s2e_forEnd13.autotvin_BUS_DST.dat"
// wrapc file define: "store"
#define AUTOTB_TVIN_store  "../tv/cdatafile/c.WriteOneBlock_f2r_entry_s2e_forEnd13.autotvin_store.dat"
// wrapc file define: "out_buf"
#define AUTOTB_TVIN_out_buf  "../tv/cdatafile/c.WriteOneBlock_f2r_entry_s2e_forEnd13.autotvin_out_buf.dat"
// wrapc file define: "width"
#define AUTOTB_TVIN_width  "../tv/cdatafile/c.WriteOneBlock_f2r_entry_s2e_forEnd13.autotvin_width.dat"
// wrapc file define: "height"
#define AUTOTB_TVIN_height  "../tv/cdatafile/c.WriteOneBlock_f2r_entry_s2e_forEnd13.autotvin_height.dat"
// wrapc file define: "voffs"
#define AUTOTB_TVIN_voffs  "../tv/cdatafile/c.WriteOneBlock_f2r_entry_s2e_forEnd13.autotvin_voffs.dat"
// wrapc file define: "hoffs"
#define AUTOTB_TVIN_hoffs  "../tv/cdatafile/c.WriteOneBlock_f2r_entry_s2e_forEnd13.autotvin_hoffs.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "BUS_DST"
#define AUTOTB_TVOUT_PC_BUS_DST  "../tv/rtldatafile/rtl.WriteOneBlock_f2r_entry_s2e_forEnd13.autotvout_BUS_DST.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			BUS_SRC_depth = 0;
			BUS_DST_depth = 0;
			store_depth = 0;
			out_buf_depth = 0;
			width_depth = 0;
			height_depth = 0;
			voffs_depth = 0;
			hoffs_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{BUS_SRC " << BUS_SRC_depth << "}\n";
			total_list << "{BUS_DST " << BUS_DST_depth << "}\n";
			total_list << "{store " << store_depth << "}\n";
			total_list << "{out_buf " << out_buf_depth << "}\n";
			total_list << "{width " << width_depth << "}\n";
			total_list << "{height " << height_depth << "}\n";
			total_list << "{voffs " << voffs_depth << "}\n";
			total_list << "{hoffs " << hoffs_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int BUS_SRC_depth;
		int BUS_DST_depth;
		int store_depth;
		int out_buf_depth;
		int width_depth;
		int height_depth;
		int voffs_depth;
		int hoffs_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void WriteOneBlock_f2r_entry_s2e_forEnd13 (
int store[64],
char out_buf[5310],
int width,
int height,
int voffs,
int hoffs);

extern "C" void AESL_WRAP_WriteOneBlock_f2r_entry_s2e_forEnd13 (
int store[64],
char out_buf[5310],
int width,
int height,
int voffs,
int hoffs)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "BUS_DST"
		aesl_fh.read(AUTOTB_TVOUT_PC_BUS_DST, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_BUS_DST, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_BUS_DST, AESL_token); // data

			sc_bv<8> *BUS_DST_pc_buffer = new sc_bv<8>[5310];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'BUS_DST', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'BUS_DST', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					BUS_DST_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_BUS_DST, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_BUS_DST))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: BUS_DST
				{
					// bitslice(7, 0)
					// {
						// celement: out_buf(7, 0)
						// {
							sc_lv<8>* out_buf_lv0_0_5309_1 = new sc_lv<8>[5310];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: out_buf(7, 0)
						{
							// carray: (0) => (5309) @ (1)
							for (int i_0 = 0; i_0 <= 5309; i_0 += 1)
							{
								if (&(out_buf[0]) != NULL) // check the null address if the c port is array or others
								{
									out_buf_lv0_0_5309_1[hls_map_index].range(7, 0) = sc_bv<8>(BUS_DST_pc_buffer[hls_map_index].range(7, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: out_buf(7, 0)
						{
							// carray: (0) => (5309) @ (1)
							for (int i_0 = 0; i_0 <= 5309; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : out_buf[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : out_buf[0]
								// output_left_conversion : out_buf[i_0]
								// output_type_conversion : (out_buf_lv0_0_5309_1[hls_map_index]).to_uint64()
								if (&(out_buf[0]) != NULL) // check the null address if the c port is array or others
								{
									out_buf[i_0] = (out_buf_lv0_0_5309_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] BUS_DST_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "BUS_SRC"
		char* tvin_BUS_SRC = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_BUS_SRC);

		// "BUS_DST"
		char* tvin_BUS_DST = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_BUS_DST);
		char* tvout_BUS_DST = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_BUS_DST);

		// "store"
		char* tvin_store = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_store);

		// "out_buf"
		char* tvin_out_buf = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_buf);

		// "width"
		char* tvin_width = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_width);

		// "height"
		char* tvin_height = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_height);

		// "voffs"
		char* tvin_voffs = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_voffs);

		// "hoffs"
		char* tvin_hoffs = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_hoffs);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_BUS_SRC, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_BUS_SRC, tvin_BUS_SRC);

		sc_bv<32>* BUS_SRC_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: BUS_SRC
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: store(31, 0)
				{
					// carray: (0) => (63) @ (1)
					for (int i_0 = 0; i_0 <= 63; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : store[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : store[0]
						// regulate_c_name       : store
						// input_type_conversion : store[i_0]
						if (&(store[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> store_tmp_mem;
							store_tmp_mem = store[i_0];
							BUS_SRC_tvin_wrapc_buffer[hls_map_index].range(31, 0) = store_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_BUS_SRC, "%s\n", (BUS_SRC_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_BUS_SRC, tvin_BUS_SRC);
		}

		tcl_file.set_num(64, &tcl_file.BUS_SRC_depth);
		sprintf(tvin_BUS_SRC, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_BUS_SRC, tvin_BUS_SRC);

		// release memory allocation
		delete [] BUS_SRC_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_BUS_DST, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_BUS_DST, tvin_BUS_DST);

		sc_bv<8>* BUS_DST_tvin_wrapc_buffer = new sc_bv<8>[5310];

		// RTL Name: BUS_DST
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: out_buf(7, 0)
				{
					// carray: (0) => (5309) @ (1)
					for (int i_0 = 0; i_0 <= 5309; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out_buf[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out_buf[0]
						// regulate_c_name       : out_buf
						// input_type_conversion : out_buf[i_0]
						if (&(out_buf[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> out_buf_tmp_mem;
							out_buf_tmp_mem = out_buf[i_0];
							BUS_DST_tvin_wrapc_buffer[hls_map_index].range(7, 0) = out_buf_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 5310; i++)
		{
			sprintf(tvin_BUS_DST, "%s\n", (BUS_DST_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_BUS_DST, tvin_BUS_DST);
		}

		tcl_file.set_num(5310, &tcl_file.BUS_DST_depth);
		sprintf(tvin_BUS_DST, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_BUS_DST, tvin_BUS_DST);

		// release memory allocation
		delete [] BUS_DST_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_store, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_store, tvin_store);

		sc_bv<64> store_tvin_wrapc_buffer;

		// RTL Name: store
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_store, "%s\n", (store_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_store, tvin_store);
		}

		tcl_file.set_num(1, &tcl_file.store_depth);
		sprintf(tvin_store, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_store, tvin_store);

		// [[transaction]]
		sprintf(tvin_out_buf, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_out_buf, tvin_out_buf);

		sc_bv<64> out_buf_tvin_wrapc_buffer;

		// RTL Name: out_buf
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_out_buf, "%s\n", (out_buf_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_out_buf, tvin_out_buf);
		}

		tcl_file.set_num(1, &tcl_file.out_buf_depth);
		sprintf(tvin_out_buf, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_out_buf, tvin_out_buf);

		// [[transaction]]
		sprintf(tvin_width, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_width, tvin_width);

		sc_bv<32> width_tvin_wrapc_buffer;

		// RTL Name: width
		{
			// bitslice(31, 0)
			{
				// celement: width(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : width
						// sub_1st_elem          : 
						// ori_name_1st_elem     : width
						// regulate_c_name       : width
						// input_type_conversion : width
						if (&(width) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> width_tmp_mem;
							width_tmp_mem = width;
							width_tvin_wrapc_buffer.range(31, 0) = width_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_width, "%s\n", (width_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_width, tvin_width);
		}

		tcl_file.set_num(1, &tcl_file.width_depth);
		sprintf(tvin_width, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_width, tvin_width);

		// [[transaction]]
		sprintf(tvin_height, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_height, tvin_height);

		sc_bv<32> height_tvin_wrapc_buffer;

		// RTL Name: height
		{
			// bitslice(31, 0)
			{
				// celement: height(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : height
						// sub_1st_elem          : 
						// ori_name_1st_elem     : height
						// regulate_c_name       : height
						// input_type_conversion : height
						if (&(height) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> height_tmp_mem;
							height_tmp_mem = height;
							height_tvin_wrapc_buffer.range(31, 0) = height_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_height, "%s\n", (height_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_height, tvin_height);
		}

		tcl_file.set_num(1, &tcl_file.height_depth);
		sprintf(tvin_height, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_height, tvin_height);

		// [[transaction]]
		sprintf(tvin_voffs, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_voffs, tvin_voffs);

		sc_bv<32> voffs_tvin_wrapc_buffer;

		// RTL Name: voffs
		{
			// bitslice(31, 0)
			{
				// celement: voffs(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : voffs
						// sub_1st_elem          : 
						// ori_name_1st_elem     : voffs
						// regulate_c_name       : voffs
						// input_type_conversion : voffs
						if (&(voffs) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> voffs_tmp_mem;
							voffs_tmp_mem = voffs;
							voffs_tvin_wrapc_buffer.range(31, 0) = voffs_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_voffs, "%s\n", (voffs_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_voffs, tvin_voffs);
		}

		tcl_file.set_num(1, &tcl_file.voffs_depth);
		sprintf(tvin_voffs, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_voffs, tvin_voffs);

		// [[transaction]]
		sprintf(tvin_hoffs, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_hoffs, tvin_hoffs);

		sc_bv<32> hoffs_tvin_wrapc_buffer;

		// RTL Name: hoffs
		{
			// bitslice(31, 0)
			{
				// celement: hoffs(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : hoffs
						// sub_1st_elem          : 
						// ori_name_1st_elem     : hoffs
						// regulate_c_name       : hoffs
						// input_type_conversion : hoffs
						if (&(hoffs) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> hoffs_tmp_mem;
							hoffs_tmp_mem = hoffs;
							hoffs_tvin_wrapc_buffer.range(31, 0) = hoffs_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_hoffs, "%s\n", (hoffs_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_hoffs, tvin_hoffs);
		}

		tcl_file.set_num(1, &tcl_file.hoffs_depth);
		sprintf(tvin_hoffs, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_hoffs, tvin_hoffs);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		WriteOneBlock_f2r_entry_s2e_forEnd13(store, out_buf, width, height, voffs, hoffs);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_BUS_DST, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_BUS_DST, tvout_BUS_DST);

		sc_bv<8>* BUS_DST_tvout_wrapc_buffer = new sc_bv<8>[5310];

		// RTL Name: BUS_DST
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: out_buf(7, 0)
				{
					// carray: (0) => (5309) @ (1)
					for (int i_0 = 0; i_0 <= 5309; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out_buf[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out_buf[0]
						// regulate_c_name       : out_buf
						// input_type_conversion : out_buf[i_0]
						if (&(out_buf[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> out_buf_tmp_mem;
							out_buf_tmp_mem = out_buf[i_0];
							BUS_DST_tvout_wrapc_buffer[hls_map_index].range(7, 0) = out_buf_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 5310; i++)
		{
			sprintf(tvout_BUS_DST, "%s\n", (BUS_DST_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_BUS_DST, tvout_BUS_DST);
		}

		tcl_file.set_num(5310, &tcl_file.BUS_DST_depth);
		sprintf(tvout_BUS_DST, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_BUS_DST, tvout_BUS_DST);

		// release memory allocation
		delete [] BUS_DST_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "BUS_SRC"
		delete [] tvin_BUS_SRC;
		// release memory allocation: "BUS_DST"
		delete [] tvout_BUS_DST;
		delete [] tvin_BUS_DST;
		// release memory allocation: "store"
		delete [] tvin_store;
		// release memory allocation: "out_buf"
		delete [] tvin_out_buf;
		// release memory allocation: "width"
		delete [] tvin_width;
		// release memory allocation: "height"
		delete [] tvin_height;
		// release memory allocation: "voffs"
		delete [] tvin_voffs;
		// release memory allocation: "hoffs"
		delete [] tvin_hoffs;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

