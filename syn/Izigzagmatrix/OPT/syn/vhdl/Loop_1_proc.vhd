-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_buf_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_0_ce0 : OUT STD_LOGIC;
    in1_buf_0_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    m_axi_imatrix_AWVALID : OUT STD_LOGIC;
    m_axi_imatrix_AWREADY : IN STD_LOGIC;
    m_axi_imatrix_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_imatrix_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imatrix_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_imatrix_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imatrix_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imatrix_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imatrix_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imatrix_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imatrix_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imatrix_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imatrix_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imatrix_WVALID : OUT STD_LOGIC;
    m_axi_imatrix_WREADY : IN STD_LOGIC;
    m_axi_imatrix_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_imatrix_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imatrix_WLAST : OUT STD_LOGIC;
    m_axi_imatrix_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imatrix_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imatrix_ARVALID : OUT STD_LOGIC;
    m_axi_imatrix_ARREADY : IN STD_LOGIC;
    m_axi_imatrix_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_imatrix_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imatrix_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_imatrix_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imatrix_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imatrix_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imatrix_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imatrix_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imatrix_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imatrix_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imatrix_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imatrix_RVALID : IN STD_LOGIC;
    m_axi_imatrix_RREADY : OUT STD_LOGIC;
    m_axi_imatrix_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_imatrix_RLAST : IN STD_LOGIC;
    m_axi_imatrix_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imatrix_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imatrix_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imatrix_BVALID : IN STD_LOGIC;
    m_axi_imatrix_BREADY : OUT STD_LOGIC;
    m_axi_imatrix_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imatrix_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imatrix_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    imatrix_offset_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    imatrix_offset_empty_n : IN STD_LOGIC;
    imatrix_offset_read : OUT STD_LOGIC;
    out_buf_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_0_ce0 : OUT STD_LOGIC;
    out_buf_0_we0 : OUT STD_LOGIC;
    out_buf_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_1_ce0 : OUT STD_LOGIC;
    in1_buf_1_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_1_ce0 : OUT STD_LOGIC;
    out_buf_1_we0 : OUT STD_LOGIC;
    out_buf_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_2_ce0 : OUT STD_LOGIC;
    in1_buf_2_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_2_ce0 : OUT STD_LOGIC;
    out_buf_2_we0 : OUT STD_LOGIC;
    out_buf_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_3_ce0 : OUT STD_LOGIC;
    in1_buf_3_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_3_ce0 : OUT STD_LOGIC;
    out_buf_3_we0 : OUT STD_LOGIC;
    out_buf_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_4_ce0 : OUT STD_LOGIC;
    in1_buf_4_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_4_ce0 : OUT STD_LOGIC;
    out_buf_4_we0 : OUT STD_LOGIC;
    out_buf_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_5_ce0 : OUT STD_LOGIC;
    in1_buf_5_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_5_ce0 : OUT STD_LOGIC;
    out_buf_5_we0 : OUT STD_LOGIC;
    out_buf_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_6_ce0 : OUT STD_LOGIC;
    in1_buf_6_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_6_ce0 : OUT STD_LOGIC;
    out_buf_6_we0 : OUT STD_LOGIC;
    out_buf_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_7_ce0 : OUT STD_LOGIC;
    in1_buf_7_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_7_ce0 : OUT STD_LOGIC;
    out_buf_7_we0 : OUT STD_LOGIC;
    out_buf_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_8_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_8_ce0 : OUT STD_LOGIC;
    in1_buf_8_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_8_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_8_ce0 : OUT STD_LOGIC;
    out_buf_8_we0 : OUT STD_LOGIC;
    out_buf_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_9_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_9_ce0 : OUT STD_LOGIC;
    in1_buf_9_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_9_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_9_ce0 : OUT STD_LOGIC;
    out_buf_9_we0 : OUT STD_LOGIC;
    out_buf_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_10_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_10_ce0 : OUT STD_LOGIC;
    in1_buf_10_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_10_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_10_ce0 : OUT STD_LOGIC;
    out_buf_10_we0 : OUT STD_LOGIC;
    out_buf_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_11_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_11_ce0 : OUT STD_LOGIC;
    in1_buf_11_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_11_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_11_ce0 : OUT STD_LOGIC;
    out_buf_11_we0 : OUT STD_LOGIC;
    out_buf_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_12_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_12_ce0 : OUT STD_LOGIC;
    in1_buf_12_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_12_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_12_ce0 : OUT STD_LOGIC;
    out_buf_12_we0 : OUT STD_LOGIC;
    out_buf_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_13_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_13_ce0 : OUT STD_LOGIC;
    in1_buf_13_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_13_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_13_ce0 : OUT STD_LOGIC;
    out_buf_13_we0 : OUT STD_LOGIC;
    out_buf_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_14_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_14_ce0 : OUT STD_LOGIC;
    in1_buf_14_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_14_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_14_ce0 : OUT STD_LOGIC;
    out_buf_14_we0 : OUT STD_LOGIC;
    out_buf_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_buf_15_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_15_ce0 : OUT STD_LOGIC;
    in1_buf_15_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_15_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_15_ce0 : OUT STD_LOGIC;
    out_buf_15_we0 : OUT STD_LOGIC;
    out_buf_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal imatrix_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal imatrix_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal imatrix_offset_blk_n : STD_LOGIC;
    signal sext_cast_i_i_fu_719_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_cast_i_i_reg_1054 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal newIndex3_i_i_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex3_i_i_reg_1077 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_i_i_i_i_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_i_i_i_fu_744_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_i_i_i_reg_1117 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_i_i_fu_754_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_i_i_reg_1122 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sig_ioackin_m_axi_imatrix_ARREADY : STD_LOGIC;
    signal sum2_i_i_fu_773_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum2_i_i_reg_1138 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum4_i_i_fu_792_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum4_i_i_reg_1154 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum6_i_i_fu_811_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum6_i_i_reg_1170 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum8_i_i_fu_830_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum8_i_i_reg_1186 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum1_i_i_fu_849_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum1_i_i_reg_1202 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum3_i_i_fu_868_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum3_i_i_reg_1218 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum5_i_i_fu_887_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum5_i_i_reg_1234 : STD_LOGIC_VECTOR (30 downto 0);
    signal imatrix_addr_read_reg_1244 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum7_i_i_fu_906_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum7_i_i_reg_1255 : STD_LOGIC_VECTOR (30 downto 0);
    signal imatrix_addr_1_read_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum9_i_i_fu_925_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum9_i_i_reg_1276 : STD_LOGIC_VECTOR (30 downto 0);
    signal imatrix_addr_2_read_reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum10_i_i_fu_944_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum10_i_i_reg_1297 : STD_LOGIC_VECTOR (30 downto 0);
    signal imatrix_addr_3_read_reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum11_i_i_fu_963_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum11_i_i_reg_1318 : STD_LOGIC_VECTOR (30 downto 0);
    signal imatrix_addr_4_read_reg_1328 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum12_i_i_fu_982_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum12_i_i_reg_1339 : STD_LOGIC_VECTOR (30 downto 0);
    signal imatrix_addr_5_read_reg_1349 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum13_i_i_fu_1001_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum13_i_i_reg_1360 : STD_LOGIC_VECTOR (30 downto 0);
    signal imatrix_addr_6_read_reg_1370 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum14_i_i_fu_1020_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum14_i_i_reg_1381 : STD_LOGIC_VECTOR (30 downto 0);
    signal imatrix_addr_7_read_reg_1391 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum15_i_i_fu_1039_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum15_i_i_reg_1402 : STD_LOGIC_VECTOR (30 downto 0);
    signal imatrix_addr_8_read_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal imatrix_addr_9_read_reg_1418 : STD_LOGIC_VECTOR (31 downto 0);
    signal imatrix_addr_10_read_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal imatrix_addr_11_read_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal imatrix_addr_12_read_reg_1433 : STD_LOGIC_VECTOR (31 downto 0);
    signal imatrix_addr_13_read_reg_1438 : STD_LOGIC_VECTOR (31 downto 0);
    signal imatrix_addr_14_read_reg_1443 : STD_LOGIC_VECTOR (31 downto 0);
    signal imatrix_addr_15_read_reg_1448 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_i_i_i_i_reg_708 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sum_cast_i_i_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_i_i_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_i_i_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_i_i_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_i_i_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_i_i_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_i_i_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_i_i_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_i_i_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_i_i_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum10_cast_i_i_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum11_cast_i_i_fu_968_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum12_cast_i_i_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum13_cast_i_i_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum14_cast_i_i_fu_1025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum15_cast_i_i_fu_1044_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_imatrix_ARREADY : STD_LOGIC := '0';
    signal newIndex2_i_i_fu_729_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_i_cast_i_i_fu_750_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_1_cast_i_i_fu_769_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_2_cast_i_i_fu_788_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_3_cast_i_i_fu_807_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_4_cast_i_i_fu_826_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_5_cast_i_i_fu_845_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_6_cast_i_i_fu_864_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_7_cast_i_i_fu_883_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_8_cast_i_i_fu_902_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_9_cast_i_i_fu_921_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_cast_i_i_18_fu_940_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_10_cast_i_i_fu_959_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_11_cast_i_i_fu_978_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_12_cast_i_i_fu_997_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_13_cast_i_i_fu_1016_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_14_cast_i_i_fu_1035_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_i_i_i_i_fu_723_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_imatrix_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_imatrix_ARREADY <= ap_const_logic_0;
            else
                if (((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    ap_reg_ioackin_m_axi_imatrix_ARREADY <= ap_const_logic_0;
                elsif ((((m_axi_imatrix_RVALID = ap_const_logic_1) and (m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    ap_reg_ioackin_m_axi_imatrix_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    k_0_i_i_i_i_reg_708_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (imatrix_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_i_i_i_i_reg_708 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                k_0_i_i_i_i_reg_708 <= k_i_i_i_reg_1117;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                imatrix_addr_10_read_reg_1423 <= m_axi_imatrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                imatrix_addr_11_read_reg_1428 <= m_axi_imatrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                imatrix_addr_12_read_reg_1433 <= m_axi_imatrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                imatrix_addr_13_read_reg_1438 <= m_axi_imatrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                imatrix_addr_14_read_reg_1443 <= m_axi_imatrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                imatrix_addr_15_read_reg_1448 <= m_axi_imatrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                imatrix_addr_1_read_reg_1265 <= m_axi_imatrix_RDATA;
                sum9_i_i_reg_1276 <= sum9_i_i_fu_925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                imatrix_addr_2_read_reg_1286 <= m_axi_imatrix_RDATA;
                sum10_i_i_reg_1297 <= sum10_i_i_fu_944_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                imatrix_addr_3_read_reg_1307 <= m_axi_imatrix_RDATA;
                sum11_i_i_reg_1318 <= sum11_i_i_fu_963_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                imatrix_addr_4_read_reg_1328 <= m_axi_imatrix_RDATA;
                sum12_i_i_reg_1339 <= sum12_i_i_fu_982_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                imatrix_addr_5_read_reg_1349 <= m_axi_imatrix_RDATA;
                sum13_i_i_reg_1360 <= sum13_i_i_fu_1001_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                imatrix_addr_6_read_reg_1370 <= m_axi_imatrix_RDATA;
                sum14_i_i_reg_1381 <= sum14_i_i_fu_1020_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                imatrix_addr_7_read_reg_1391 <= m_axi_imatrix_RDATA;
                sum15_i_i_reg_1402 <= sum15_i_i_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                imatrix_addr_8_read_reg_1407 <= m_axi_imatrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                imatrix_addr_9_read_reg_1418 <= m_axi_imatrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                imatrix_addr_read_reg_1244 <= m_axi_imatrix_RDATA;
                sum7_i_i_reg_1255 <= sum7_i_i_fu_906_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_i_i_fu_723_p2 = ap_const_lv1_0))) then
                k_i_i_i_reg_1117 <= k_i_i_i_fu_744_p2;
                    newIndex3_i_i_reg_1077(1 downto 0) <= newIndex3_i_i_fu_739_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (imatrix_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    sext_cast_i_i_reg_1054(29 downto 0) <= sext_cast_i_i_fu_719_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                sum1_i_i_reg_1202 <= sum1_i_i_fu_849_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sum2_i_i_reg_1138 <= sum2_i_i_fu_773_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                sum3_i_i_reg_1218 <= sum3_i_i_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                sum4_i_i_reg_1154 <= sum4_i_i_fu_792_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                sum5_i_i_reg_1234 <= sum5_i_i_fu_887_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sum6_i_i_reg_1170 <= sum6_i_i_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                sum8_i_i_reg_1186 <= sum8_i_i_fu_830_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sum_i_i_reg_1122 <= sum_i_i_fu_754_p2;
            end if;
        end if;
    end process;
    sext_cast_i_i_reg_1054(30) <= '0';
    newIndex3_i_i_reg_1077(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_imatrix_RVALID, imatrix_offset_empty_n, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state2, exitcond_i_i_i_i_fu_723_p2, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (imatrix_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_i_i_i_i_fu_723_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, imatrix_offset_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (imatrix_offset_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond_i_i_i_i_fu_723_p2)
    begin
        if (((exitcond_i_i_i_i_fu_723_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_i_i_i_i_fu_723_p2)
    begin
        if (((exitcond_i_i_i_i_fu_723_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_imatrix_ARREADY_assign_proc : process(m_axi_imatrix_ARREADY, ap_reg_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_imatrix_ARREADY <= m_axi_imatrix_ARREADY;
        else 
            ap_sig_ioackin_m_axi_imatrix_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_i_i_i_i_fu_723_p2 <= "1" when (k_0_i_i_i_i_reg_708 = ap_const_lv6_20) else "0";

    imatrix_blk_n_AR_assign_proc : process(m_axi_imatrix_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            imatrix_blk_n_AR <= m_axi_imatrix_ARREADY;
        else 
            imatrix_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    imatrix_blk_n_R_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            imatrix_blk_n_R <= m_axi_imatrix_RVALID;
        else 
            imatrix_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    imatrix_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imatrix_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imatrix_offset_blk_n <= imatrix_offset_empty_n;
        else 
            imatrix_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imatrix_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imatrix_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (imatrix_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imatrix_offset_read <= ap_const_logic_1;
        else 
            imatrix_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_0_address0 <= newIndex3_i_i_fu_739_p1(1 - 1 downto 0);

    in1_buf_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in1_buf_0_ce0 <= ap_const_logic_1;
        else 
            in1_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_10_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_10_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state12, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            in1_buf_10_ce0 <= ap_const_logic_1;
        else 
            in1_buf_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_11_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_11_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state13, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            in1_buf_11_ce0 <= ap_const_logic_1;
        else 
            in1_buf_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_12_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_12_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state14, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            in1_buf_12_ce0 <= ap_const_logic_1;
        else 
            in1_buf_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_13_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_13_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state15, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            in1_buf_13_ce0 <= ap_const_logic_1;
        else 
            in1_buf_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_14_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_14_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state16, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            in1_buf_14_ce0 <= ap_const_logic_1;
        else 
            in1_buf_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_15_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_15_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state17, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            in1_buf_15_ce0 <= ap_const_logic_1;
        else 
            in1_buf_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_1_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_1_ce0 <= ap_const_logic_1;
        else 
            in1_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_2_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_2_ce0_assign_proc : process(ap_CS_fsm_state4, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in1_buf_2_ce0 <= ap_const_logic_1;
        else 
            in1_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_3_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_3_ce0_assign_proc : process(ap_CS_fsm_state5, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in1_buf_3_ce0 <= ap_const_logic_1;
        else 
            in1_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_4_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_4_ce0_assign_proc : process(ap_CS_fsm_state6, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            in1_buf_4_ce0 <= ap_const_logic_1;
        else 
            in1_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_5_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_5_ce0_assign_proc : process(ap_CS_fsm_state7, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            in1_buf_5_ce0 <= ap_const_logic_1;
        else 
            in1_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_6_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_6_ce0_assign_proc : process(ap_CS_fsm_state8, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            in1_buf_6_ce0 <= ap_const_logic_1;
        else 
            in1_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_7_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_7_ce0_assign_proc : process(ap_CS_fsm_state9, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            in1_buf_7_ce0 <= ap_const_logic_1;
        else 
            in1_buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_8_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_8_ce0_assign_proc : process(ap_CS_fsm_state10, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if (((ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            in1_buf_8_ce0 <= ap_const_logic_1;
        else 
            in1_buf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_9_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    in1_buf_9_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state11, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            in1_buf_9_ce0 <= ap_const_logic_1;
        else 
            in1_buf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k_i_i_i_fu_744_p2 <= std_logic_vector(unsigned(k_0_i_i_i_i_reg_708) + unsigned(ap_const_lv6_10));

    m_axi_imatrix_ARADDR_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, sum_cast_i_i_fu_759_p1, sum2_cast_i_i_fu_778_p1, sum4_cast_i_i_fu_797_p1, sum6_cast_i_i_fu_816_p1, sum8_cast_i_i_fu_835_p1, sum1_cast_i_i_fu_854_p1, sum3_cast_i_i_fu_873_p1, sum5_cast_i_i_fu_892_p1, sum7_cast_i_i_fu_911_p1, sum9_cast_i_i_fu_930_p1, sum10_cast_i_i_fu_949_p1, sum11_cast_i_i_fu_968_p1, sum12_cast_i_i_fu_987_p1, sum13_cast_i_i_fu_1006_p1, sum14_cast_i_i_fu_1025_p1, sum15_cast_i_i_fu_1044_p1, ap_reg_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0)) then
            if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                m_axi_imatrix_ARADDR <= sum15_cast_i_i_fu_1044_p1(32 - 1 downto 0);
            elsif (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                m_axi_imatrix_ARADDR <= sum14_cast_i_i_fu_1025_p1(32 - 1 downto 0);
            elsif (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                m_axi_imatrix_ARADDR <= sum13_cast_i_i_fu_1006_p1(32 - 1 downto 0);
            elsif (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                m_axi_imatrix_ARADDR <= sum12_cast_i_i_fu_987_p1(32 - 1 downto 0);
            elsif (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                m_axi_imatrix_ARADDR <= sum11_cast_i_i_fu_968_p1(32 - 1 downto 0);
            elsif (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                m_axi_imatrix_ARADDR <= sum10_cast_i_i_fu_949_p1(32 - 1 downto 0);
            elsif (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                m_axi_imatrix_ARADDR <= sum9_cast_i_i_fu_930_p1(32 - 1 downto 0);
            elsif (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                m_axi_imatrix_ARADDR <= sum7_cast_i_i_fu_911_p1(32 - 1 downto 0);
            elsif (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                m_axi_imatrix_ARADDR <= sum5_cast_i_i_fu_892_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                m_axi_imatrix_ARADDR <= sum3_cast_i_i_fu_873_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                m_axi_imatrix_ARADDR <= sum1_cast_i_i_fu_854_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                m_axi_imatrix_ARADDR <= sum8_cast_i_i_fu_835_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                m_axi_imatrix_ARADDR <= sum6_cast_i_i_fu_816_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m_axi_imatrix_ARADDR <= sum4_cast_i_i_fu_797_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                m_axi_imatrix_ARADDR <= sum2_cast_i_i_fu_778_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                m_axi_imatrix_ARADDR <= sum_cast_i_i_fu_759_p1(32 - 1 downto 0);
            else 
                m_axi_imatrix_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_imatrix_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_imatrix_ARBURST <= ap_const_lv2_0;
    m_axi_imatrix_ARCACHE <= ap_const_lv4_0;
    m_axi_imatrix_ARID <= ap_const_lv1_0;
    m_axi_imatrix_ARLEN <= ap_const_lv32_1;
    m_axi_imatrix_ARLOCK <= ap_const_lv2_0;
    m_axi_imatrix_ARPROT <= ap_const_lv3_0;
    m_axi_imatrix_ARQOS <= ap_const_lv4_0;
    m_axi_imatrix_ARREGION <= ap_const_lv4_0;
    m_axi_imatrix_ARSIZE <= ap_const_lv3_0;
    m_axi_imatrix_ARUSER <= ap_const_lv1_0;

    m_axi_imatrix_ARVALID_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_reg_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_reg_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            m_axi_imatrix_ARVALID <= ap_const_logic_1;
        else 
            m_axi_imatrix_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_imatrix_AWADDR <= ap_const_lv32_0;
    m_axi_imatrix_AWBURST <= ap_const_lv2_0;
    m_axi_imatrix_AWCACHE <= ap_const_lv4_0;
    m_axi_imatrix_AWID <= ap_const_lv1_0;
    m_axi_imatrix_AWLEN <= ap_const_lv32_0;
    m_axi_imatrix_AWLOCK <= ap_const_lv2_0;
    m_axi_imatrix_AWPROT <= ap_const_lv3_0;
    m_axi_imatrix_AWQOS <= ap_const_lv4_0;
    m_axi_imatrix_AWREGION <= ap_const_lv4_0;
    m_axi_imatrix_AWSIZE <= ap_const_lv3_0;
    m_axi_imatrix_AWUSER <= ap_const_lv1_0;
    m_axi_imatrix_AWVALID <= ap_const_logic_0;
    m_axi_imatrix_BREADY <= ap_const_logic_0;

    m_axi_imatrix_RREADY_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_imatrix_RREADY <= ap_const_logic_1;
        else 
            m_axi_imatrix_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_imatrix_WDATA <= ap_const_lv32_0;
    m_axi_imatrix_WID <= ap_const_lv1_0;
    m_axi_imatrix_WLAST <= ap_const_logic_0;
    m_axi_imatrix_WSTRB <= ap_const_lv4_0;
    m_axi_imatrix_WUSER <= ap_const_lv1_0;
    m_axi_imatrix_WVALID <= ap_const_logic_0;
    newIndex2_i_i_fu_729_p4 <= k_0_i_i_i_i_reg_708(5 downto 4);
    newIndex3_i_i_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex2_i_i_fu_729_p4),64));
    out_buf_0_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_0_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state12, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_buf_0_ce0 <= ap_const_logic_1;
        else 
            out_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_0_d0 <= imatrix_addr_read_reg_1244;

    out_buf_0_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state12, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_buf_0_we0 <= ap_const_logic_1;
        else 
            out_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_10_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_10_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state22)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_10_ce0 <= ap_const_logic_1;
        else 
            out_buf_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_10_d0 <= imatrix_addr_10_read_reg_1423;

    out_buf_10_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state22)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_10_we0 <= ap_const_logic_1;
        else 
            out_buf_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_11_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_11_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state23)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            out_buf_11_ce0 <= ap_const_logic_1;
        else 
            out_buf_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_11_d0 <= imatrix_addr_11_read_reg_1428;

    out_buf_11_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state23)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            out_buf_11_we0 <= ap_const_logic_1;
        else 
            out_buf_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_12_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_12_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state24)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            out_buf_12_ce0 <= ap_const_logic_1;
        else 
            out_buf_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_12_d0 <= imatrix_addr_12_read_reg_1433;

    out_buf_12_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state24)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            out_buf_12_we0 <= ap_const_logic_1;
        else 
            out_buf_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_13_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_13_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state25)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            out_buf_13_ce0 <= ap_const_logic_1;
        else 
            out_buf_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_13_d0 <= imatrix_addr_13_read_reg_1438;

    out_buf_13_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state25)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            out_buf_13_we0 <= ap_const_logic_1;
        else 
            out_buf_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_14_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_14_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state26)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            out_buf_14_ce0 <= ap_const_logic_1;
        else 
            out_buf_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_14_d0 <= imatrix_addr_14_read_reg_1443;

    out_buf_14_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state26)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            out_buf_14_we0 <= ap_const_logic_1;
        else 
            out_buf_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_15_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_15_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            out_buf_15_ce0 <= ap_const_logic_1;
        else 
            out_buf_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_15_d0 <= imatrix_addr_15_read_reg_1448;

    out_buf_15_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            out_buf_15_we0 <= ap_const_logic_1;
        else 
            out_buf_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_1_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state13, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_buf_1_ce0 <= ap_const_logic_1;
        else 
            out_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_d0 <= imatrix_addr_1_read_reg_1265;

    out_buf_1_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state13, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_buf_1_we0 <= ap_const_logic_1;
        else 
            out_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_2_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state14, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            out_buf_2_ce0 <= ap_const_logic_1;
        else 
            out_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_d0 <= imatrix_addr_2_read_reg_1286;

    out_buf_2_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state14, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            out_buf_2_we0 <= ap_const_logic_1;
        else 
            out_buf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_3_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state15, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            out_buf_3_ce0 <= ap_const_logic_1;
        else 
            out_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_d0 <= imatrix_addr_3_read_reg_1307;

    out_buf_3_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state15, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            out_buf_3_we0 <= ap_const_logic_1;
        else 
            out_buf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_4_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state16, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_4_ce0 <= ap_const_logic_1;
        else 
            out_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_d0 <= imatrix_addr_4_read_reg_1328;

    out_buf_4_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state16, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_4_we0 <= ap_const_logic_1;
        else 
            out_buf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_5_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_5_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state17, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            out_buf_5_ce0 <= ap_const_logic_1;
        else 
            out_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_5_d0 <= imatrix_addr_5_read_reg_1349;

    out_buf_5_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state17, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            out_buf_5_we0 <= ap_const_logic_1;
        else 
            out_buf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_6_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_6_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state18, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_6_ce0 <= ap_const_logic_1;
        else 
            out_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_6_d0 <= imatrix_addr_6_read_reg_1370;

    out_buf_6_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state18, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_6_we0 <= ap_const_logic_1;
        else 
            out_buf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_7_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_7_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state19, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            out_buf_7_ce0 <= ap_const_logic_1;
        else 
            out_buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_7_d0 <= imatrix_addr_7_read_reg_1391;

    out_buf_7_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state19, ap_sig_ioackin_m_axi_imatrix_ARREADY)
    begin
        if ((not(((m_axi_imatrix_RVALID = ap_const_logic_0) or (ap_sig_ioackin_m_axi_imatrix_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            out_buf_7_we0 <= ap_const_logic_1;
        else 
            out_buf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_8_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_8_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state20)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            out_buf_8_ce0 <= ap_const_logic_1;
        else 
            out_buf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_8_d0 <= imatrix_addr_8_read_reg_1407;

    out_buf_8_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state20)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            out_buf_8_we0 <= ap_const_logic_1;
        else 
            out_buf_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_9_address0 <= newIndex3_i_i_reg_1077(1 - 1 downto 0);

    out_buf_9_ce0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state21)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            out_buf_9_ce0 <= ap_const_logic_1;
        else 
            out_buf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_9_d0 <= imatrix_addr_9_read_reg_1418;

    out_buf_9_we0_assign_proc : process(m_axi_imatrix_RVALID, ap_CS_fsm_state21)
    begin
        if (((m_axi_imatrix_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            out_buf_9_we0 <= ap_const_logic_1;
        else 
            out_buf_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sext_cast_i_i_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imatrix_offset_dout),31));
    sum10_cast_i_i_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum10_i_i_reg_1297),64));
    sum10_i_i_fu_944_p2 <= std_logic_vector(unsigned(tmp_5_i_cast_i_i_18_fu_940_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum11_cast_i_i_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum11_i_i_reg_1318),64));
    sum11_i_i_fu_963_p2 <= std_logic_vector(unsigned(tmp_5_i_10_cast_i_i_fu_959_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum12_cast_i_i_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum12_i_i_reg_1339),64));
    sum12_i_i_fu_982_p2 <= std_logic_vector(unsigned(tmp_5_i_11_cast_i_i_fu_978_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum13_cast_i_i_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum13_i_i_reg_1360),64));
    sum13_i_i_fu_1001_p2 <= std_logic_vector(unsigned(tmp_5_i_12_cast_i_i_fu_997_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum14_cast_i_i_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum14_i_i_reg_1381),64));
    sum14_i_i_fu_1020_p2 <= std_logic_vector(unsigned(tmp_5_i_13_cast_i_i_fu_1016_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum15_cast_i_i_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum15_i_i_reg_1402),64));
    sum15_i_i_fu_1039_p2 <= std_logic_vector(unsigned(tmp_5_i_14_cast_i_i_fu_1035_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum1_cast_i_i_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_i_i_reg_1202),64));
    sum1_i_i_fu_849_p2 <= std_logic_vector(unsigned(tmp_5_i_5_cast_i_i_fu_845_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum2_cast_i_i_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_i_i_reg_1138),64));
    sum2_i_i_fu_773_p2 <= std_logic_vector(unsigned(tmp_5_i_1_cast_i_i_fu_769_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum3_cast_i_i_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_i_i_reg_1218),64));
    sum3_i_i_fu_868_p2 <= std_logic_vector(unsigned(tmp_5_i_6_cast_i_i_fu_864_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum4_cast_i_i_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_i_i_reg_1154),64));
    sum4_i_i_fu_792_p2 <= std_logic_vector(unsigned(tmp_5_i_2_cast_i_i_fu_788_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum5_cast_i_i_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_i_i_reg_1234),64));
    sum5_i_i_fu_887_p2 <= std_logic_vector(unsigned(tmp_5_i_7_cast_i_i_fu_883_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum6_cast_i_i_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_i_i_reg_1170),64));
    sum6_i_i_fu_811_p2 <= std_logic_vector(unsigned(tmp_5_i_3_cast_i_i_fu_807_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum7_cast_i_i_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_i_i_reg_1255),64));
    sum7_i_i_fu_906_p2 <= std_logic_vector(unsigned(tmp_5_i_8_cast_i_i_fu_902_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum8_cast_i_i_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_i_i_reg_1186),64));
    sum8_i_i_fu_830_p2 <= std_logic_vector(unsigned(tmp_5_i_4_cast_i_i_fu_826_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum9_cast_i_i_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_i_i_reg_1276),64));
    sum9_i_i_fu_925_p2 <= std_logic_vector(unsigned(tmp_5_i_9_cast_i_i_fu_921_p1) + unsigned(sext_cast_i_i_reg_1054));
    sum_cast_i_i_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_i_reg_1122),64));
    sum_i_i_fu_754_p2 <= std_logic_vector(unsigned(tmp_5_i_cast_i_i_fu_750_p1) + unsigned(sext_cast_i_i_reg_1054));
    tmp_5_i_10_cast_i_i_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_11_q0),31));
    tmp_5_i_11_cast_i_i_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_12_q0),31));
    tmp_5_i_12_cast_i_i_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_13_q0),31));
    tmp_5_i_13_cast_i_i_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_14_q0),31));
    tmp_5_i_14_cast_i_i_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_15_q0),31));
    tmp_5_i_1_cast_i_i_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_1_q0),31));
    tmp_5_i_2_cast_i_i_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_2_q0),31));
    tmp_5_i_3_cast_i_i_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_3_q0),31));
    tmp_5_i_4_cast_i_i_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_4_q0),31));
    tmp_5_i_5_cast_i_i_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_5_q0),31));
    tmp_5_i_6_cast_i_i_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_6_q0),31));
    tmp_5_i_7_cast_i_i_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_7_q0),31));
    tmp_5_i_8_cast_i_i_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_8_q0),31));
    tmp_5_i_9_cast_i_i_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_9_q0),31));
    tmp_5_i_cast_i_i_18_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_10_q0),31));
    tmp_5_i_cast_i_i_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_buf_0_q0),31));
end behav;
