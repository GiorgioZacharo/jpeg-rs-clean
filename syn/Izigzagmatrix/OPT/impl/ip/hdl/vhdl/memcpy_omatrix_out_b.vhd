-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity memcpy_omatrix_out_b is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_omatrix_AWVALID : OUT STD_LOGIC;
    m_axi_omatrix_AWREADY : IN STD_LOGIC;
    m_axi_omatrix_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_omatrix_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_omatrix_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_omatrix_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_omatrix_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_omatrix_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_omatrix_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_omatrix_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_omatrix_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_omatrix_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_omatrix_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_omatrix_WVALID : OUT STD_LOGIC;
    m_axi_omatrix_WREADY : IN STD_LOGIC;
    m_axi_omatrix_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_omatrix_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_omatrix_WLAST : OUT STD_LOGIC;
    m_axi_omatrix_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_omatrix_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_omatrix_ARVALID : OUT STD_LOGIC;
    m_axi_omatrix_ARREADY : IN STD_LOGIC;
    m_axi_omatrix_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_omatrix_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_omatrix_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_omatrix_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_omatrix_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_omatrix_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_omatrix_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_omatrix_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_omatrix_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_omatrix_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_omatrix_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_omatrix_RVALID : IN STD_LOGIC;
    m_axi_omatrix_RREADY : OUT STD_LOGIC;
    m_axi_omatrix_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_omatrix_RLAST : IN STD_LOGIC;
    m_axi_omatrix_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_omatrix_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_omatrix_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_omatrix_BVALID : IN STD_LOGIC;
    m_axi_omatrix_BREADY : OUT STD_LOGIC;
    m_axi_omatrix_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_omatrix_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_omatrix_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    omatrix_offset_dout : IN STD_LOGIC_VECTOR (61 downto 0);
    omatrix_offset_empty_n : IN STD_LOGIC;
    omatrix_offset_read : OUT STD_LOGIC;
    i_0_i_i_c_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    i_0_i_i_c_empty_n : IN STD_LOGIC;
    i_0_i_i_c_read : OUT STD_LOGIC;
    out_buf_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_0_ce0 : OUT STD_LOGIC;
    out_buf_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_1_ce0 : OUT STD_LOGIC;
    out_buf_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_2_ce0 : OUT STD_LOGIC;
    out_buf_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_3_ce0 : OUT STD_LOGIC;
    out_buf_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_4_ce0 : OUT STD_LOGIC;
    out_buf_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_5_ce0 : OUT STD_LOGIC;
    out_buf_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_6_ce0 : OUT STD_LOGIC;
    out_buf_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_7_ce0 : OUT STD_LOGIC;
    out_buf_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_8_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_8_ce0 : OUT STD_LOGIC;
    out_buf_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_9_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_9_ce0 : OUT STD_LOGIC;
    out_buf_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_10_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_10_ce0 : OUT STD_LOGIC;
    out_buf_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_11_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_11_ce0 : OUT STD_LOGIC;
    out_buf_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_12_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_12_ce0 : OUT STD_LOGIC;
    out_buf_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_13_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_13_ce0 : OUT STD_LOGIC;
    out_buf_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_14_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_14_ce0 : OUT STD_LOGIC;
    out_buf_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_15_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_buf_15_ce0 : OUT STD_LOGIC;
    out_buf_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of memcpy_omatrix_out_b is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal omatrix_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal omatrix_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_i_i_i_i_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal omatrix_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal omatrix_offset_blk_n : STD_LOGIC;
    signal i_0_i_i_c_blk_n : STD_LOGIC;
    signal indvar_i_i_i_i_i_reg_332 : STD_LOGIC_VECTOR (5 downto 0);
    signal omatrix_addr_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exitcond_i_i_i_i_i_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_omatrix_WREADY : STD_LOGIC;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_next_i_i_i_i_s_fu_381_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_fu_417_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_473 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_i_fu_421_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_omatrix_AWREADY : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal newIndex5_i_i_i_i_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_i_i_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_omatrix_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_omatrix_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal offset_i_i_i_fu_343_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal omatrix_offset_cast1_fu_355_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_i_i_cast_i_i_fu_351_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sum_i_i_fu_359_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal newIndex4_i_i_i_i_fu_387_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component IZigzagMatrix_f2rcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    IZigzagMatrix_f2rcud_U58 : component IZigzagMatrix_f2rcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => out_buf_0_q0,
        din1 => out_buf_1_q0,
        din2 => out_buf_2_q0,
        din3 => out_buf_3_q0,
        din4 => out_buf_4_q0,
        din5 => out_buf_5_q0,
        din6 => out_buf_6_q0,
        din7 => out_buf_7_q0,
        din8 => out_buf_8_q0,
        din9 => out_buf_9_q0,
        din10 => out_buf_10_q0,
        din11 => out_buf_11_q0,
        din12 => out_buf_12_q0,
        din13 => out_buf_13_q0,
        din14 => out_buf_14_q0,
        din15 => out_buf_15_q0,
        din16 => tmp_reg_473,
        dout => tmp_i_i_fu_421_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((m_axi_omatrix_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_sig_ioackin_m_axi_omatrix_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_sig_ioackin_m_axi_omatrix_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_omatrix_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_omatrix_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_m_axi_omatrix_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_omatrix_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_omatrix_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_omatrix_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_omatrix_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_omatrix_WREADY <= ap_const_logic_0;
            else
                if (((ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_omatrix_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_omatrix_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_omatrix_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar_i_i_i_i_i_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_i_i_i_fu_375_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_i_i_i_i_i_reg_332 <= indvar_next_i_i_i_i_s_fu_381_p2;
            elsif (((ap_sig_ioackin_m_axi_omatrix_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_i_i_i_i_i_reg_332 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 <= exitcond_i_i_i_i_i_reg_464;
                exitcond_i_i_i_i_i_reg_464 <= exitcond_i_i_i_i_i_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((i_0_i_i_c_empty_n = ap_const_logic_0) or (omatrix_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    omatrix_addr_reg_458(62 downto 0) <= sum_cast_i_i_fu_365_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_i_i_i_reg_464 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_i_i_reg_558 <= tmp_i_i_fu_421_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_i_i_i_fu_375_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_473 <= tmp_fu_417_p1;
            end if;
        end if;
    end process;
    omatrix_addr_reg_458(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_omatrix_BVALID, omatrix_offset_empty_n, i_0_i_i_c_empty_n, ap_CS_fsm_state2, ap_enable_reg_pp0_iter2, ap_CS_fsm_state10, exitcond_i_i_i_i_i_fu_375_p2, ap_enable_reg_pp0_iter0, ap_sig_ioackin_m_axi_omatrix_AWREADY, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((i_0_i_i_c_empty_n = ap_const_logic_0) or (omatrix_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_m_axi_omatrix_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_i_i_i_i_fu_375_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_i_i_i_i_fu_375_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_omatrix_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, omatrix_offset_empty_n, i_0_i_i_c_empty_n)
    begin
                ap_block_state1 <= ((i_0_i_i_c_empty_n = ap_const_logic_0) or (omatrix_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464, ap_sig_ioackin_m_axi_omatrix_WREADY)
    begin
                ap_block_state5_io <= ((ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 = ap_const_lv1_0) and (ap_sig_ioackin_m_axi_omatrix_WREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i_i_i_i_i_fu_375_p2)
    begin
        if ((exitcond_i_i_i_i_i_fu_375_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_omatrix_BVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_omatrix_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_omatrix_BVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_omatrix_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_omatrix_AWREADY_assign_proc : process(m_axi_omatrix_AWREADY, ap_reg_ioackin_m_axi_omatrix_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_omatrix_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_omatrix_AWREADY <= m_axi_omatrix_AWREADY;
        else 
            ap_sig_ioackin_m_axi_omatrix_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_omatrix_WREADY_assign_proc : process(m_axi_omatrix_WREADY, ap_reg_ioackin_m_axi_omatrix_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_omatrix_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_omatrix_WREADY <= m_axi_omatrix_WREADY;
        else 
            ap_sig_ioackin_m_axi_omatrix_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_i_i_i_i_i_fu_375_p2 <= "1" when (indvar_i_i_i_i_i_reg_332 = ap_const_lv6_20) else "0";

    i_0_i_i_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_0_i_i_c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_0_i_i_c_blk_n <= i_0_i_i_c_empty_n;
        else 
            i_0_i_i_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_0_i_i_c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, omatrix_offset_empty_n, i_0_i_i_c_empty_n)
    begin
        if ((not(((i_0_i_i_c_empty_n = ap_const_logic_0) or (omatrix_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_0_i_i_c_read <= ap_const_logic_1;
        else 
            i_0_i_i_c_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_next_i_i_i_i_s_fu_381_p2 <= std_logic_vector(unsigned(indvar_i_i_i_i_i_reg_332) + unsigned(ap_const_lv6_1));
    m_axi_omatrix_ARADDR <= ap_const_lv64_0;
    m_axi_omatrix_ARBURST <= ap_const_lv2_0;
    m_axi_omatrix_ARCACHE <= ap_const_lv4_0;
    m_axi_omatrix_ARID <= ap_const_lv1_0;
    m_axi_omatrix_ARLEN <= ap_const_lv32_0;
    m_axi_omatrix_ARLOCK <= ap_const_lv2_0;
    m_axi_omatrix_ARPROT <= ap_const_lv3_0;
    m_axi_omatrix_ARQOS <= ap_const_lv4_0;
    m_axi_omatrix_ARREGION <= ap_const_lv4_0;
    m_axi_omatrix_ARSIZE <= ap_const_lv3_0;
    m_axi_omatrix_ARUSER <= ap_const_lv1_0;
    m_axi_omatrix_ARVALID <= ap_const_logic_0;
    m_axi_omatrix_AWADDR <= omatrix_addr_reg_458;
    m_axi_omatrix_AWBURST <= ap_const_lv2_0;
    m_axi_omatrix_AWCACHE <= ap_const_lv4_0;
    m_axi_omatrix_AWID <= ap_const_lv1_0;
    m_axi_omatrix_AWLEN <= ap_const_lv32_20;
    m_axi_omatrix_AWLOCK <= ap_const_lv2_0;
    m_axi_omatrix_AWPROT <= ap_const_lv3_0;
    m_axi_omatrix_AWQOS <= ap_const_lv4_0;
    m_axi_omatrix_AWREGION <= ap_const_lv4_0;
    m_axi_omatrix_AWSIZE <= ap_const_lv3_0;
    m_axi_omatrix_AWUSER <= ap_const_lv1_0;

    m_axi_omatrix_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_m_axi_omatrix_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_omatrix_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_omatrix_AWVALID <= ap_const_logic_1;
        else 
            m_axi_omatrix_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_omatrix_BREADY_assign_proc : process(m_axi_omatrix_BVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_omatrix_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_omatrix_BREADY <= ap_const_logic_1;
        else 
            m_axi_omatrix_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_omatrix_RREADY <= ap_const_logic_0;
    m_axi_omatrix_WDATA <= tmp_i_i_reg_558;
    m_axi_omatrix_WID <= ap_const_lv1_0;
    m_axi_omatrix_WLAST <= ap_const_logic_0;
    m_axi_omatrix_WSTRB <= ap_const_lv4_F;
    m_axi_omatrix_WUSER <= ap_const_lv1_0;

    m_axi_omatrix_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464, ap_reg_ioackin_m_axi_omatrix_WREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_axi_omatrix_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_omatrix_WVALID <= ap_const_logic_1;
        else 
            m_axi_omatrix_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    newIndex4_i_i_i_i_fu_387_p4 <= indvar_i_i_i_i_i_reg_332(5 downto 4);
    newIndex5_i_i_i_i_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex4_i_i_i_i_fu_387_p4),64));
    offset_i_i_i_fu_343_p3 <= (i_0_i_i_c_dout & ap_const_lv5_0);

    omatrix_blk_n_AW_assign_proc : process(m_axi_omatrix_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            omatrix_blk_n_AW <= m_axi_omatrix_AWREADY;
        else 
            omatrix_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    omatrix_blk_n_B_assign_proc : process(m_axi_omatrix_BVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            omatrix_blk_n_B <= m_axi_omatrix_BVALID;
        else 
            omatrix_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    omatrix_blk_n_W_assign_proc : process(m_axi_omatrix_WREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464)
    begin
        if (((ap_reg_pp0_iter1_exitcond_i_i_i_i_i_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            omatrix_blk_n_W <= m_axi_omatrix_WREADY;
        else 
            omatrix_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    omatrix_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, omatrix_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            omatrix_offset_blk_n <= omatrix_offset_empty_n;
        else 
            omatrix_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    omatrix_offset_cast1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omatrix_offset_dout),63));

    omatrix_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, omatrix_offset_empty_n, i_0_i_i_c_empty_n)
    begin
        if ((not(((i_0_i_i_c_empty_n = ap_const_logic_0) or (omatrix_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            omatrix_offset_read <= ap_const_logic_1;
        else 
            omatrix_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_0_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_0_ce0 <= ap_const_logic_1;
        else 
            out_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_10_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_10_ce0 <= ap_const_logic_1;
        else 
            out_buf_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_11_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_11_ce0 <= ap_const_logic_1;
        else 
            out_buf_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_12_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_12_ce0 <= ap_const_logic_1;
        else 
            out_buf_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_13_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_13_ce0 <= ap_const_logic_1;
        else 
            out_buf_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_14_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_14_ce0 <= ap_const_logic_1;
        else 
            out_buf_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_15_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_15_ce0 <= ap_const_logic_1;
        else 
            out_buf_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_1_ce0 <= ap_const_logic_1;
        else 
            out_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_2_ce0 <= ap_const_logic_1;
        else 
            out_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_3_ce0 <= ap_const_logic_1;
        else 
            out_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_4_ce0 <= ap_const_logic_1;
        else 
            out_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_5_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_5_ce0 <= ap_const_logic_1;
        else 
            out_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_6_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_6_ce0 <= ap_const_logic_1;
        else 
            out_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_7_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_7_ce0 <= ap_const_logic_1;
        else 
            out_buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_8_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_8_ce0 <= ap_const_logic_1;
        else 
            out_buf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_9_address0 <= newIndex5_i_i_i_i_fu_397_p1(1 - 1 downto 0);

    out_buf_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_9_ce0 <= ap_const_logic_1;
        else 
            out_buf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_cast_i_i_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_i_fu_359_p2),64));
    sum_i_i_fu_359_p2 <= std_logic_vector(unsigned(omatrix_offset_cast1_fu_355_p1) + unsigned(tmp_i_i_cast_i_i_fu_351_p1));
    tmp_fu_417_p1 <= indvar_i_i_i_i_i_reg_332(4 - 1 downto 0);
    tmp_i_i_cast_i_i_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_i_i_fu_343_p3),63));
end behav;
