-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IZigzagMatrix_f2r_forBody_s2e_forEnd is
generic (
    C_S_AXI_BUS_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_BUS_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS_SRC_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_BUS_SRC_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_SRC_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_SRC_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS_SRC_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_SRC_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_SRC_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_SRC_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_DST_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_BUS_DST_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_DST_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_DST_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS_DST_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_DST_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_DST_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_DST_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_SRC_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUS_SRC_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUS_SRC_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BUS_DST_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUS_DST_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUS_DST_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_BUS_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_BUS_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_BUS_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_CTRL_WVALID : IN STD_LOGIC;
    s_axi_BUS_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_BUS_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_BUS_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_BUS_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_BUS_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_BUS_CTRL_RREADY : IN STD_LOGIC;
    s_axi_BUS_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_BUS_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_BUS_CTRL_BREADY : IN STD_LOGIC;
    s_axi_BUS_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_BUS_SRC_AWVALID : OUT STD_LOGIC;
    m_axi_BUS_SRC_AWREADY : IN STD_LOGIC;
    m_axi_BUS_SRC_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_ADDR_WIDTH-1 downto 0);
    m_axi_BUS_SRC_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_ID_WIDTH-1 downto 0);
    m_axi_BUS_SRC_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BUS_SRC_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS_SRC_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_SRC_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_SRC_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_SRC_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS_SRC_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_SRC_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_SRC_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_AWUSER_WIDTH-1 downto 0);
    m_axi_BUS_SRC_WVALID : OUT STD_LOGIC;
    m_axi_BUS_SRC_WREADY : IN STD_LOGIC;
    m_axi_BUS_SRC_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_DATA_WIDTH-1 downto 0);
    m_axi_BUS_SRC_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_DATA_WIDTH/8-1 downto 0);
    m_axi_BUS_SRC_WLAST : OUT STD_LOGIC;
    m_axi_BUS_SRC_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_ID_WIDTH-1 downto 0);
    m_axi_BUS_SRC_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_WUSER_WIDTH-1 downto 0);
    m_axi_BUS_SRC_ARVALID : OUT STD_LOGIC;
    m_axi_BUS_SRC_ARREADY : IN STD_LOGIC;
    m_axi_BUS_SRC_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_ADDR_WIDTH-1 downto 0);
    m_axi_BUS_SRC_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_ID_WIDTH-1 downto 0);
    m_axi_BUS_SRC_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BUS_SRC_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS_SRC_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_SRC_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_SRC_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_SRC_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS_SRC_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_SRC_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_SRC_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_ARUSER_WIDTH-1 downto 0);
    m_axi_BUS_SRC_RVALID : IN STD_LOGIC;
    m_axi_BUS_SRC_RREADY : OUT STD_LOGIC;
    m_axi_BUS_SRC_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_DATA_WIDTH-1 downto 0);
    m_axi_BUS_SRC_RLAST : IN STD_LOGIC;
    m_axi_BUS_SRC_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_ID_WIDTH-1 downto 0);
    m_axi_BUS_SRC_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_RUSER_WIDTH-1 downto 0);
    m_axi_BUS_SRC_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_SRC_BVALID : IN STD_LOGIC;
    m_axi_BUS_SRC_BREADY : OUT STD_LOGIC;
    m_axi_BUS_SRC_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_SRC_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_ID_WIDTH-1 downto 0);
    m_axi_BUS_SRC_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_SRC_BUSER_WIDTH-1 downto 0);
    m_axi_BUS_DST_AWVALID : OUT STD_LOGIC;
    m_axi_BUS_DST_AWREADY : IN STD_LOGIC;
    m_axi_BUS_DST_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_ADDR_WIDTH-1 downto 0);
    m_axi_BUS_DST_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_ID_WIDTH-1 downto 0);
    m_axi_BUS_DST_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BUS_DST_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS_DST_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_DST_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_DST_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_DST_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS_DST_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_DST_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_DST_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_AWUSER_WIDTH-1 downto 0);
    m_axi_BUS_DST_WVALID : OUT STD_LOGIC;
    m_axi_BUS_DST_WREADY : IN STD_LOGIC;
    m_axi_BUS_DST_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_DATA_WIDTH-1 downto 0);
    m_axi_BUS_DST_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_DATA_WIDTH/8-1 downto 0);
    m_axi_BUS_DST_WLAST : OUT STD_LOGIC;
    m_axi_BUS_DST_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_ID_WIDTH-1 downto 0);
    m_axi_BUS_DST_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_WUSER_WIDTH-1 downto 0);
    m_axi_BUS_DST_ARVALID : OUT STD_LOGIC;
    m_axi_BUS_DST_ARREADY : IN STD_LOGIC;
    m_axi_BUS_DST_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_ADDR_WIDTH-1 downto 0);
    m_axi_BUS_DST_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_ID_WIDTH-1 downto 0);
    m_axi_BUS_DST_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BUS_DST_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS_DST_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_DST_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_DST_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_DST_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS_DST_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_DST_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS_DST_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_ARUSER_WIDTH-1 downto 0);
    m_axi_BUS_DST_RVALID : IN STD_LOGIC;
    m_axi_BUS_DST_RREADY : OUT STD_LOGIC;
    m_axi_BUS_DST_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_DATA_WIDTH-1 downto 0);
    m_axi_BUS_DST_RLAST : IN STD_LOGIC;
    m_axi_BUS_DST_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_ID_WIDTH-1 downto 0);
    m_axi_BUS_DST_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_RUSER_WIDTH-1 downto 0);
    m_axi_BUS_DST_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_DST_BVALID : IN STD_LOGIC;
    m_axi_BUS_DST_BREADY : OUT STD_LOGIC;
    m_axi_BUS_DST_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS_DST_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_ID_WIDTH-1 downto 0);
    m_axi_BUS_DST_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_DST_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of IZigzagMatrix_f2r_forBody_s2e_forEnd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "IZigzagMatrix_f2r_forBody_s2e_forEnd,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.625000,HLS_SYN_LAT=156,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=4399,HLS_SYN_LUT=4761}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal imatrix : STD_LOGIC_VECTOR (63 downto 0);
    signal omatrix : STD_LOGIC_VECTOR (63 downto 0);
    signal BUS_SRC_AWREADY : STD_LOGIC;
    signal BUS_SRC_WREADY : STD_LOGIC;
    signal BUS_SRC_ARREADY : STD_LOGIC;
    signal BUS_SRC_RVALID : STD_LOGIC;
    signal BUS_SRC_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal BUS_SRC_RLAST : STD_LOGIC;
    signal BUS_SRC_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal BUS_SRC_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal BUS_SRC_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal BUS_SRC_BVALID : STD_LOGIC;
    signal BUS_SRC_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal BUS_SRC_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal BUS_SRC_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal BUS_DST_AWREADY : STD_LOGIC;
    signal BUS_DST_WREADY : STD_LOGIC;
    signal BUS_DST_ARREADY : STD_LOGIC;
    signal BUS_DST_RVALID : STD_LOGIC;
    signal BUS_DST_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal BUS_DST_RLAST : STD_LOGIC;
    signal BUS_DST_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal BUS_DST_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal BUS_DST_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal BUS_DST_BVALID : STD_LOGIC;
    signal BUS_DST_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal BUS_DST_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal BUS_DST_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_imatrix_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_WVALID : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_imatrix_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_WLAST : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_imatrix_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_imatrix_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_imatrix_RREADY : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_imatrix_BREADY : STD_LOGIC;
    signal dataflow_in_loop_U0_imatrix_offset : STD_LOGIC_VECTOR (61 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_omatrix_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_WVALID : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_omatrix_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_WLAST : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_omatrix_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_omatrix_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_omatrix_RREADY : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_omatrix_BREADY : STD_LOGIC;
    signal dataflow_in_loop_U0_omatrix_offset : STD_LOGIC_VECTOR (61 downto 0);
    signal dataflow_in_loop_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_enable : STD_LOGIC := '0';
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal loop_dataflow_busy : STD_LOGIC := '0';
    signal dataflow_in_loop_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_U0_start_write : STD_LOGIC;

    component dataflow_in_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        i_0_i_i : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imatrix_AWVALID : OUT STD_LOGIC;
        m_axi_imatrix_AWREADY : IN STD_LOGIC;
        m_axi_imatrix_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_imatrix_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imatrix_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_imatrix_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_imatrix_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imatrix_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imatrix_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imatrix_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_imatrix_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imatrix_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imatrix_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imatrix_WVALID : OUT STD_LOGIC;
        m_axi_imatrix_WREADY : IN STD_LOGIC;
        m_axi_imatrix_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_imatrix_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imatrix_WLAST : OUT STD_LOGIC;
        m_axi_imatrix_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imatrix_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imatrix_ARVALID : OUT STD_LOGIC;
        m_axi_imatrix_ARREADY : IN STD_LOGIC;
        m_axi_imatrix_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_imatrix_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imatrix_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_imatrix_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_imatrix_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imatrix_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imatrix_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imatrix_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_imatrix_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imatrix_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imatrix_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imatrix_RVALID : IN STD_LOGIC;
        m_axi_imatrix_RREADY : OUT STD_LOGIC;
        m_axi_imatrix_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_imatrix_RLAST : IN STD_LOGIC;
        m_axi_imatrix_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imatrix_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imatrix_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imatrix_BVALID : IN STD_LOGIC;
        m_axi_imatrix_BREADY : OUT STD_LOGIC;
        m_axi_imatrix_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imatrix_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imatrix_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        imatrix_offset : IN STD_LOGIC_VECTOR (61 downto 0);
        m_axi_omatrix_AWVALID : OUT STD_LOGIC;
        m_axi_omatrix_AWREADY : IN STD_LOGIC;
        m_axi_omatrix_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_omatrix_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_omatrix_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_omatrix_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_omatrix_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_omatrix_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_omatrix_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_omatrix_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_omatrix_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_omatrix_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_omatrix_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_omatrix_WVALID : OUT STD_LOGIC;
        m_axi_omatrix_WREADY : IN STD_LOGIC;
        m_axi_omatrix_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_omatrix_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_omatrix_WLAST : OUT STD_LOGIC;
        m_axi_omatrix_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_omatrix_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_omatrix_ARVALID : OUT STD_LOGIC;
        m_axi_omatrix_ARREADY : IN STD_LOGIC;
        m_axi_omatrix_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_omatrix_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_omatrix_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_omatrix_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_omatrix_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_omatrix_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_omatrix_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_omatrix_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_omatrix_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_omatrix_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_omatrix_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_omatrix_RVALID : IN STD_LOGIC;
        m_axi_omatrix_RREADY : OUT STD_LOGIC;
        m_axi_omatrix_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_omatrix_RLAST : IN STD_LOGIC;
        m_axi_omatrix_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_omatrix_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_omatrix_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_omatrix_BVALID : IN STD_LOGIC;
        m_axi_omatrix_BREADY : OUT STD_LOGIC;
        m_axi_omatrix_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_omatrix_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_omatrix_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        omatrix_offset : IN STD_LOGIC_VECTOR (61 downto 0);
        i_0_i_i_ap_vld : IN STD_LOGIC;
        imatrix_offset_ap_vld : IN STD_LOGIC;
        omatrix_offset_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component IZigzagMatrix_f2r_forBody_s2e_forEnd_BUS_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        imatrix : OUT STD_LOGIC_VECTOR (63 downto 0);
        omatrix : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component IZigzagMatrix_f2r_forBody_s2e_forEnd_BUS_SRC_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component IZigzagMatrix_f2r_forBody_s2e_forEnd_BUS_DST_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    IZigzagMatrix_f2r_forBody_s2e_forEnd_BUS_CTRL_s_axi_U : component IZigzagMatrix_f2r_forBody_s2e_forEnd_BUS_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS_CTRL_AWVALID,
        AWREADY => s_axi_BUS_CTRL_AWREADY,
        AWADDR => s_axi_BUS_CTRL_AWADDR,
        WVALID => s_axi_BUS_CTRL_WVALID,
        WREADY => s_axi_BUS_CTRL_WREADY,
        WDATA => s_axi_BUS_CTRL_WDATA,
        WSTRB => s_axi_BUS_CTRL_WSTRB,
        ARVALID => s_axi_BUS_CTRL_ARVALID,
        ARREADY => s_axi_BUS_CTRL_ARREADY,
        ARADDR => s_axi_BUS_CTRL_ARADDR,
        RVALID => s_axi_BUS_CTRL_RVALID,
        RREADY => s_axi_BUS_CTRL_RREADY,
        RDATA => s_axi_BUS_CTRL_RDATA,
        RRESP => s_axi_BUS_CTRL_RRESP,
        BVALID => s_axi_BUS_CTRL_BVALID,
        BREADY => s_axi_BUS_CTRL_BREADY,
        BRESP => s_axi_BUS_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        imatrix => imatrix,
        omatrix => omatrix);

    IZigzagMatrix_f2r_forBody_s2e_forEnd_BUS_SRC_m_axi_U : component IZigzagMatrix_f2r_forBody_s2e_forEnd_BUS_SRC_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUS_SRC_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUS_SRC_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUS_SRC_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUS_SRC_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUS_SRC_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUS_SRC_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUS_SRC_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUS_SRC_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUS_SRC_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUS_SRC_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUS_SRC_CACHE_VALUE)
    port map (
        AWVALID => m_axi_BUS_SRC_AWVALID,
        AWREADY => m_axi_BUS_SRC_AWREADY,
        AWADDR => m_axi_BUS_SRC_AWADDR,
        AWID => m_axi_BUS_SRC_AWID,
        AWLEN => m_axi_BUS_SRC_AWLEN,
        AWSIZE => m_axi_BUS_SRC_AWSIZE,
        AWBURST => m_axi_BUS_SRC_AWBURST,
        AWLOCK => m_axi_BUS_SRC_AWLOCK,
        AWCACHE => m_axi_BUS_SRC_AWCACHE,
        AWPROT => m_axi_BUS_SRC_AWPROT,
        AWQOS => m_axi_BUS_SRC_AWQOS,
        AWREGION => m_axi_BUS_SRC_AWREGION,
        AWUSER => m_axi_BUS_SRC_AWUSER,
        WVALID => m_axi_BUS_SRC_WVALID,
        WREADY => m_axi_BUS_SRC_WREADY,
        WDATA => m_axi_BUS_SRC_WDATA,
        WSTRB => m_axi_BUS_SRC_WSTRB,
        WLAST => m_axi_BUS_SRC_WLAST,
        WID => m_axi_BUS_SRC_WID,
        WUSER => m_axi_BUS_SRC_WUSER,
        ARVALID => m_axi_BUS_SRC_ARVALID,
        ARREADY => m_axi_BUS_SRC_ARREADY,
        ARADDR => m_axi_BUS_SRC_ARADDR,
        ARID => m_axi_BUS_SRC_ARID,
        ARLEN => m_axi_BUS_SRC_ARLEN,
        ARSIZE => m_axi_BUS_SRC_ARSIZE,
        ARBURST => m_axi_BUS_SRC_ARBURST,
        ARLOCK => m_axi_BUS_SRC_ARLOCK,
        ARCACHE => m_axi_BUS_SRC_ARCACHE,
        ARPROT => m_axi_BUS_SRC_ARPROT,
        ARQOS => m_axi_BUS_SRC_ARQOS,
        ARREGION => m_axi_BUS_SRC_ARREGION,
        ARUSER => m_axi_BUS_SRC_ARUSER,
        RVALID => m_axi_BUS_SRC_RVALID,
        RREADY => m_axi_BUS_SRC_RREADY,
        RDATA => m_axi_BUS_SRC_RDATA,
        RLAST => m_axi_BUS_SRC_RLAST,
        RID => m_axi_BUS_SRC_RID,
        RUSER => m_axi_BUS_SRC_RUSER,
        RRESP => m_axi_BUS_SRC_RRESP,
        BVALID => m_axi_BUS_SRC_BVALID,
        BREADY => m_axi_BUS_SRC_BREADY,
        BRESP => m_axi_BUS_SRC_BRESP,
        BID => m_axi_BUS_SRC_BID,
        BUSER => m_axi_BUS_SRC_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => dataflow_in_loop_U0_m_axi_imatrix_ARVALID,
        I_ARREADY => BUS_SRC_ARREADY,
        I_ARADDR => dataflow_in_loop_U0_m_axi_imatrix_ARADDR,
        I_ARID => dataflow_in_loop_U0_m_axi_imatrix_ARID,
        I_ARLEN => dataflow_in_loop_U0_m_axi_imatrix_ARLEN,
        I_ARSIZE => dataflow_in_loop_U0_m_axi_imatrix_ARSIZE,
        I_ARLOCK => dataflow_in_loop_U0_m_axi_imatrix_ARLOCK,
        I_ARCACHE => dataflow_in_loop_U0_m_axi_imatrix_ARCACHE,
        I_ARQOS => dataflow_in_loop_U0_m_axi_imatrix_ARQOS,
        I_ARPROT => dataflow_in_loop_U0_m_axi_imatrix_ARPROT,
        I_ARUSER => dataflow_in_loop_U0_m_axi_imatrix_ARUSER,
        I_ARBURST => dataflow_in_loop_U0_m_axi_imatrix_ARBURST,
        I_ARREGION => dataflow_in_loop_U0_m_axi_imatrix_ARREGION,
        I_RVALID => BUS_SRC_RVALID,
        I_RREADY => dataflow_in_loop_U0_m_axi_imatrix_RREADY,
        I_RDATA => BUS_SRC_RDATA,
        I_RID => BUS_SRC_RID,
        I_RUSER => BUS_SRC_RUSER,
        I_RRESP => BUS_SRC_RRESP,
        I_RLAST => BUS_SRC_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => BUS_SRC_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => BUS_SRC_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => BUS_SRC_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => BUS_SRC_BRESP,
        I_BID => BUS_SRC_BID,
        I_BUSER => BUS_SRC_BUSER);

    IZigzagMatrix_f2r_forBody_s2e_forEnd_BUS_DST_m_axi_U : component IZigzagMatrix_f2r_forBody_s2e_forEnd_BUS_DST_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUS_DST_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUS_DST_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUS_DST_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUS_DST_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUS_DST_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUS_DST_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUS_DST_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUS_DST_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUS_DST_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUS_DST_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUS_DST_CACHE_VALUE)
    port map (
        AWVALID => m_axi_BUS_DST_AWVALID,
        AWREADY => m_axi_BUS_DST_AWREADY,
        AWADDR => m_axi_BUS_DST_AWADDR,
        AWID => m_axi_BUS_DST_AWID,
        AWLEN => m_axi_BUS_DST_AWLEN,
        AWSIZE => m_axi_BUS_DST_AWSIZE,
        AWBURST => m_axi_BUS_DST_AWBURST,
        AWLOCK => m_axi_BUS_DST_AWLOCK,
        AWCACHE => m_axi_BUS_DST_AWCACHE,
        AWPROT => m_axi_BUS_DST_AWPROT,
        AWQOS => m_axi_BUS_DST_AWQOS,
        AWREGION => m_axi_BUS_DST_AWREGION,
        AWUSER => m_axi_BUS_DST_AWUSER,
        WVALID => m_axi_BUS_DST_WVALID,
        WREADY => m_axi_BUS_DST_WREADY,
        WDATA => m_axi_BUS_DST_WDATA,
        WSTRB => m_axi_BUS_DST_WSTRB,
        WLAST => m_axi_BUS_DST_WLAST,
        WID => m_axi_BUS_DST_WID,
        WUSER => m_axi_BUS_DST_WUSER,
        ARVALID => m_axi_BUS_DST_ARVALID,
        ARREADY => m_axi_BUS_DST_ARREADY,
        ARADDR => m_axi_BUS_DST_ARADDR,
        ARID => m_axi_BUS_DST_ARID,
        ARLEN => m_axi_BUS_DST_ARLEN,
        ARSIZE => m_axi_BUS_DST_ARSIZE,
        ARBURST => m_axi_BUS_DST_ARBURST,
        ARLOCK => m_axi_BUS_DST_ARLOCK,
        ARCACHE => m_axi_BUS_DST_ARCACHE,
        ARPROT => m_axi_BUS_DST_ARPROT,
        ARQOS => m_axi_BUS_DST_ARQOS,
        ARREGION => m_axi_BUS_DST_ARREGION,
        ARUSER => m_axi_BUS_DST_ARUSER,
        RVALID => m_axi_BUS_DST_RVALID,
        RREADY => m_axi_BUS_DST_RREADY,
        RDATA => m_axi_BUS_DST_RDATA,
        RLAST => m_axi_BUS_DST_RLAST,
        RID => m_axi_BUS_DST_RID,
        RUSER => m_axi_BUS_DST_RUSER,
        RRESP => m_axi_BUS_DST_RRESP,
        BVALID => m_axi_BUS_DST_BVALID,
        BREADY => m_axi_BUS_DST_BREADY,
        BRESP => m_axi_BUS_DST_BRESP,
        BID => m_axi_BUS_DST_BID,
        BUSER => m_axi_BUS_DST_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => BUS_DST_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => BUS_DST_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => BUS_DST_RDATA,
        I_RID => BUS_DST_RID,
        I_RUSER => BUS_DST_RUSER,
        I_RRESP => BUS_DST_RRESP,
        I_RLAST => BUS_DST_RLAST,
        I_AWVALID => dataflow_in_loop_U0_m_axi_omatrix_AWVALID,
        I_AWREADY => BUS_DST_AWREADY,
        I_AWADDR => dataflow_in_loop_U0_m_axi_omatrix_AWADDR,
        I_AWID => dataflow_in_loop_U0_m_axi_omatrix_AWID,
        I_AWLEN => dataflow_in_loop_U0_m_axi_omatrix_AWLEN,
        I_AWSIZE => dataflow_in_loop_U0_m_axi_omatrix_AWSIZE,
        I_AWLOCK => dataflow_in_loop_U0_m_axi_omatrix_AWLOCK,
        I_AWCACHE => dataflow_in_loop_U0_m_axi_omatrix_AWCACHE,
        I_AWQOS => dataflow_in_loop_U0_m_axi_omatrix_AWQOS,
        I_AWPROT => dataflow_in_loop_U0_m_axi_omatrix_AWPROT,
        I_AWUSER => dataflow_in_loop_U0_m_axi_omatrix_AWUSER,
        I_AWBURST => dataflow_in_loop_U0_m_axi_omatrix_AWBURST,
        I_AWREGION => dataflow_in_loop_U0_m_axi_omatrix_AWREGION,
        I_WVALID => dataflow_in_loop_U0_m_axi_omatrix_WVALID,
        I_WREADY => BUS_DST_WREADY,
        I_WDATA => dataflow_in_loop_U0_m_axi_omatrix_WDATA,
        I_WID => dataflow_in_loop_U0_m_axi_omatrix_WID,
        I_WUSER => dataflow_in_loop_U0_m_axi_omatrix_WUSER,
        I_WLAST => dataflow_in_loop_U0_m_axi_omatrix_WLAST,
        I_WSTRB => dataflow_in_loop_U0_m_axi_omatrix_WSTRB,
        I_BVALID => BUS_DST_BVALID,
        I_BREADY => dataflow_in_loop_U0_m_axi_omatrix_BREADY,
        I_BRESP => BUS_DST_BRESP,
        I_BID => BUS_DST_BID,
        I_BUSER => BUS_DST_BUSER);

    dataflow_in_loop_U0 : component dataflow_in_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        i_0_i_i => loop_dataflow_input_count,
        m_axi_imatrix_AWVALID => dataflow_in_loop_U0_m_axi_imatrix_AWVALID,
        m_axi_imatrix_AWREADY => ap_const_logic_0,
        m_axi_imatrix_AWADDR => dataflow_in_loop_U0_m_axi_imatrix_AWADDR,
        m_axi_imatrix_AWID => dataflow_in_loop_U0_m_axi_imatrix_AWID,
        m_axi_imatrix_AWLEN => dataflow_in_loop_U0_m_axi_imatrix_AWLEN,
        m_axi_imatrix_AWSIZE => dataflow_in_loop_U0_m_axi_imatrix_AWSIZE,
        m_axi_imatrix_AWBURST => dataflow_in_loop_U0_m_axi_imatrix_AWBURST,
        m_axi_imatrix_AWLOCK => dataflow_in_loop_U0_m_axi_imatrix_AWLOCK,
        m_axi_imatrix_AWCACHE => dataflow_in_loop_U0_m_axi_imatrix_AWCACHE,
        m_axi_imatrix_AWPROT => dataflow_in_loop_U0_m_axi_imatrix_AWPROT,
        m_axi_imatrix_AWQOS => dataflow_in_loop_U0_m_axi_imatrix_AWQOS,
        m_axi_imatrix_AWREGION => dataflow_in_loop_U0_m_axi_imatrix_AWREGION,
        m_axi_imatrix_AWUSER => dataflow_in_loop_U0_m_axi_imatrix_AWUSER,
        m_axi_imatrix_WVALID => dataflow_in_loop_U0_m_axi_imatrix_WVALID,
        m_axi_imatrix_WREADY => ap_const_logic_0,
        m_axi_imatrix_WDATA => dataflow_in_loop_U0_m_axi_imatrix_WDATA,
        m_axi_imatrix_WSTRB => dataflow_in_loop_U0_m_axi_imatrix_WSTRB,
        m_axi_imatrix_WLAST => dataflow_in_loop_U0_m_axi_imatrix_WLAST,
        m_axi_imatrix_WID => dataflow_in_loop_U0_m_axi_imatrix_WID,
        m_axi_imatrix_WUSER => dataflow_in_loop_U0_m_axi_imatrix_WUSER,
        m_axi_imatrix_ARVALID => dataflow_in_loop_U0_m_axi_imatrix_ARVALID,
        m_axi_imatrix_ARREADY => BUS_SRC_ARREADY,
        m_axi_imatrix_ARADDR => dataflow_in_loop_U0_m_axi_imatrix_ARADDR,
        m_axi_imatrix_ARID => dataflow_in_loop_U0_m_axi_imatrix_ARID,
        m_axi_imatrix_ARLEN => dataflow_in_loop_U0_m_axi_imatrix_ARLEN,
        m_axi_imatrix_ARSIZE => dataflow_in_loop_U0_m_axi_imatrix_ARSIZE,
        m_axi_imatrix_ARBURST => dataflow_in_loop_U0_m_axi_imatrix_ARBURST,
        m_axi_imatrix_ARLOCK => dataflow_in_loop_U0_m_axi_imatrix_ARLOCK,
        m_axi_imatrix_ARCACHE => dataflow_in_loop_U0_m_axi_imatrix_ARCACHE,
        m_axi_imatrix_ARPROT => dataflow_in_loop_U0_m_axi_imatrix_ARPROT,
        m_axi_imatrix_ARQOS => dataflow_in_loop_U0_m_axi_imatrix_ARQOS,
        m_axi_imatrix_ARREGION => dataflow_in_loop_U0_m_axi_imatrix_ARREGION,
        m_axi_imatrix_ARUSER => dataflow_in_loop_U0_m_axi_imatrix_ARUSER,
        m_axi_imatrix_RVALID => BUS_SRC_RVALID,
        m_axi_imatrix_RREADY => dataflow_in_loop_U0_m_axi_imatrix_RREADY,
        m_axi_imatrix_RDATA => BUS_SRC_RDATA,
        m_axi_imatrix_RLAST => BUS_SRC_RLAST,
        m_axi_imatrix_RID => BUS_SRC_RID,
        m_axi_imatrix_RUSER => BUS_SRC_RUSER,
        m_axi_imatrix_RRESP => BUS_SRC_RRESP,
        m_axi_imatrix_BVALID => ap_const_logic_0,
        m_axi_imatrix_BREADY => dataflow_in_loop_U0_m_axi_imatrix_BREADY,
        m_axi_imatrix_BRESP => ap_const_lv2_0,
        m_axi_imatrix_BID => ap_const_lv1_0,
        m_axi_imatrix_BUSER => ap_const_lv1_0,
        imatrix_offset => dataflow_in_loop_U0_imatrix_offset,
        m_axi_omatrix_AWVALID => dataflow_in_loop_U0_m_axi_omatrix_AWVALID,
        m_axi_omatrix_AWREADY => BUS_DST_AWREADY,
        m_axi_omatrix_AWADDR => dataflow_in_loop_U0_m_axi_omatrix_AWADDR,
        m_axi_omatrix_AWID => dataflow_in_loop_U0_m_axi_omatrix_AWID,
        m_axi_omatrix_AWLEN => dataflow_in_loop_U0_m_axi_omatrix_AWLEN,
        m_axi_omatrix_AWSIZE => dataflow_in_loop_U0_m_axi_omatrix_AWSIZE,
        m_axi_omatrix_AWBURST => dataflow_in_loop_U0_m_axi_omatrix_AWBURST,
        m_axi_omatrix_AWLOCK => dataflow_in_loop_U0_m_axi_omatrix_AWLOCK,
        m_axi_omatrix_AWCACHE => dataflow_in_loop_U0_m_axi_omatrix_AWCACHE,
        m_axi_omatrix_AWPROT => dataflow_in_loop_U0_m_axi_omatrix_AWPROT,
        m_axi_omatrix_AWQOS => dataflow_in_loop_U0_m_axi_omatrix_AWQOS,
        m_axi_omatrix_AWREGION => dataflow_in_loop_U0_m_axi_omatrix_AWREGION,
        m_axi_omatrix_AWUSER => dataflow_in_loop_U0_m_axi_omatrix_AWUSER,
        m_axi_omatrix_WVALID => dataflow_in_loop_U0_m_axi_omatrix_WVALID,
        m_axi_omatrix_WREADY => BUS_DST_WREADY,
        m_axi_omatrix_WDATA => dataflow_in_loop_U0_m_axi_omatrix_WDATA,
        m_axi_omatrix_WSTRB => dataflow_in_loop_U0_m_axi_omatrix_WSTRB,
        m_axi_omatrix_WLAST => dataflow_in_loop_U0_m_axi_omatrix_WLAST,
        m_axi_omatrix_WID => dataflow_in_loop_U0_m_axi_omatrix_WID,
        m_axi_omatrix_WUSER => dataflow_in_loop_U0_m_axi_omatrix_WUSER,
        m_axi_omatrix_ARVALID => dataflow_in_loop_U0_m_axi_omatrix_ARVALID,
        m_axi_omatrix_ARREADY => ap_const_logic_0,
        m_axi_omatrix_ARADDR => dataflow_in_loop_U0_m_axi_omatrix_ARADDR,
        m_axi_omatrix_ARID => dataflow_in_loop_U0_m_axi_omatrix_ARID,
        m_axi_omatrix_ARLEN => dataflow_in_loop_U0_m_axi_omatrix_ARLEN,
        m_axi_omatrix_ARSIZE => dataflow_in_loop_U0_m_axi_omatrix_ARSIZE,
        m_axi_omatrix_ARBURST => dataflow_in_loop_U0_m_axi_omatrix_ARBURST,
        m_axi_omatrix_ARLOCK => dataflow_in_loop_U0_m_axi_omatrix_ARLOCK,
        m_axi_omatrix_ARCACHE => dataflow_in_loop_U0_m_axi_omatrix_ARCACHE,
        m_axi_omatrix_ARPROT => dataflow_in_loop_U0_m_axi_omatrix_ARPROT,
        m_axi_omatrix_ARQOS => dataflow_in_loop_U0_m_axi_omatrix_ARQOS,
        m_axi_omatrix_ARREGION => dataflow_in_loop_U0_m_axi_omatrix_ARREGION,
        m_axi_omatrix_ARUSER => dataflow_in_loop_U0_m_axi_omatrix_ARUSER,
        m_axi_omatrix_RVALID => ap_const_logic_0,
        m_axi_omatrix_RREADY => dataflow_in_loop_U0_m_axi_omatrix_RREADY,
        m_axi_omatrix_RDATA => ap_const_lv32_0,
        m_axi_omatrix_RLAST => ap_const_logic_0,
        m_axi_omatrix_RID => ap_const_lv1_0,
        m_axi_omatrix_RUSER => ap_const_lv1_0,
        m_axi_omatrix_RRESP => ap_const_lv2_0,
        m_axi_omatrix_BVALID => BUS_DST_BVALID,
        m_axi_omatrix_BREADY => dataflow_in_loop_U0_m_axi_omatrix_BREADY,
        m_axi_omatrix_BRESP => BUS_DST_BRESP,
        m_axi_omatrix_BID => BUS_DST_BID,
        m_axi_omatrix_BUSER => BUS_DST_BUSER,
        omatrix_offset => dataflow_in_loop_U0_omatrix_offset,
        i_0_i_i_ap_vld => ap_const_logic_0,
        imatrix_offset_ap_vld => ap_const_logic_1,
        omatrix_offset_ap_vld => ap_const_logic_1,
        ap_done => dataflow_in_loop_U0_ap_done,
        ap_start => dataflow_in_loop_U0_ap_start,
        ap_ready => dataflow_in_loop_U0_ap_ready,
        ap_idle => dataflow_in_loop_U0_ap_idle,
        ap_continue => dataflow_in_loop_U0_ap_continue);





    loop_dataflow_busy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                loop_dataflow_busy <= ap_const_logic_0;
            else
                if ((loop_dataflow_output_count = ap_const_lv2_2)) then 
                    loop_dataflow_busy <= ap_const_logic_0;
                elsif ((ap_start = ap_const_logic_1)) then 
                    loop_dataflow_busy <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_enable_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                loop_dataflow_enable <= ap_const_logic_0;
            else
                if (((loop_dataflow_enable = ap_const_logic_0) and (ap_start = ap_const_logic_1))) then 
                    loop_dataflow_enable <= ap_const_logic_1;
                elsif (((loop_dataflow_input_count = ap_const_lv2_2) and (loop_dataflow_enable = ap_const_logic_1))) then 
                    loop_dataflow_enable <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                loop_dataflow_input_count <= ap_const_lv2_0;
            else
                if (((loop_dataflow_input_count = ap_const_lv2_2) and (loop_dataflow_enable = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv2_0;
                elsif (((loop_dataflow_enable = ap_const_logic_1) and (dataflow_in_loop_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv2_1));
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                loop_dataflow_output_count <= ap_const_lv2_0;
            else
                if ((loop_dataflow_output_count = ap_const_lv2_2)) then 
                    loop_dataflow_output_count <= ap_const_lv2_0;
                elsif ((dataflow_in_loop_U0_ap_done = ap_const_logic_1)) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv2_1));
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(loop_dataflow_output_count, loop_dataflow_busy)
    begin
        if (((loop_dataflow_output_count = ap_const_lv2_2) and (loop_dataflow_busy = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_idle <= dataflow_in_loop_U0_ap_idle;

    ap_ready_assign_proc : process(loop_dataflow_input_count)
    begin
        if ((loop_dataflow_input_count = ap_const_lv2_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= dataflow_in_loop_U0_ap_done;
    ap_sync_ready <= dataflow_in_loop_U0_ap_ready;
    dataflow_in_loop_U0_ap_continue <= ap_const_logic_1;

    dataflow_in_loop_U0_ap_start_assign_proc : process(loop_dataflow_enable, loop_dataflow_input_count)
    begin
        if ((not((loop_dataflow_input_count = ap_const_lv2_2)) and (loop_dataflow_enable = ap_const_logic_1))) then 
            dataflow_in_loop_U0_ap_start <= ap_const_logic_1;
        else 
            dataflow_in_loop_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    dataflow_in_loop_U0_imatrix_offset <= imatrix(63 downto 2);
    dataflow_in_loop_U0_omatrix_offset <= omatrix(63 downto 2);
    dataflow_in_loop_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_U0_start_write <= ap_const_logic_0;
end behav;
