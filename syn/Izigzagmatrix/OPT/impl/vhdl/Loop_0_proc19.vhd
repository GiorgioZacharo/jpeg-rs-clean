-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_0_proc19 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_0_i_i : IN STD_LOGIC_VECTOR (1 downto 0);
    in1_buf_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_0_ce0 : OUT STD_LOGIC;
    in1_buf_0_we0 : OUT STD_LOGIC;
    in1_buf_0_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_1_ce0 : OUT STD_LOGIC;
    in1_buf_1_we0 : OUT STD_LOGIC;
    in1_buf_1_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_2_ce0 : OUT STD_LOGIC;
    in1_buf_2_we0 : OUT STD_LOGIC;
    in1_buf_2_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_3_ce0 : OUT STD_LOGIC;
    in1_buf_3_we0 : OUT STD_LOGIC;
    in1_buf_3_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_4_ce0 : OUT STD_LOGIC;
    in1_buf_4_we0 : OUT STD_LOGIC;
    in1_buf_4_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_5_ce0 : OUT STD_LOGIC;
    in1_buf_5_we0 : OUT STD_LOGIC;
    in1_buf_5_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_6_ce0 : OUT STD_LOGIC;
    in1_buf_6_we0 : OUT STD_LOGIC;
    in1_buf_6_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_7_ce0 : OUT STD_LOGIC;
    in1_buf_7_we0 : OUT STD_LOGIC;
    in1_buf_7_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_8_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_8_ce0 : OUT STD_LOGIC;
    in1_buf_8_we0 : OUT STD_LOGIC;
    in1_buf_8_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_9_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_9_ce0 : OUT STD_LOGIC;
    in1_buf_9_we0 : OUT STD_LOGIC;
    in1_buf_9_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_10_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_10_ce0 : OUT STD_LOGIC;
    in1_buf_10_we0 : OUT STD_LOGIC;
    in1_buf_10_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_11_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_11_ce0 : OUT STD_LOGIC;
    in1_buf_11_we0 : OUT STD_LOGIC;
    in1_buf_11_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_12_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_12_ce0 : OUT STD_LOGIC;
    in1_buf_12_we0 : OUT STD_LOGIC;
    in1_buf_12_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_13_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_13_ce0 : OUT STD_LOGIC;
    in1_buf_13_we0 : OUT STD_LOGIC;
    in1_buf_13_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_14_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_14_ce0 : OUT STD_LOGIC;
    in1_buf_14_we0 : OUT STD_LOGIC;
    in1_buf_14_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in1_buf_15_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in1_buf_15_ce0 : OUT STD_LOGIC;
    in1_buf_15_we0 : OUT STD_LOGIC;
    in1_buf_15_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    i_0_i_i_c_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    i_0_i_i_c_full_n : IN STD_LOGIC;
    i_0_i_i_c_write : OUT STD_LOGIC;
    imatrix_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    omatrix_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    imatrix_offset_out_din : OUT STD_LOGIC_VECTOR (29 downto 0);
    imatrix_offset_out_full_n : IN STD_LOGIC;
    imatrix_offset_out_write : OUT STD_LOGIC;
    omatrix_offset_out_din : OUT STD_LOGIC_VECTOR (29 downto 0);
    omatrix_offset_out_full_n : IN STD_LOGIC;
    omatrix_offset_out_write : OUT STD_LOGIC );
end;


architecture behav of Loop_0_proc19 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zigzag_index_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce0 : STD_LOGIC;
    signal zigzag_index_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce1 : STD_LOGIC;
    signal zigzag_index_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce2 : STD_LOGIC;
    signal zigzag_index_q2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce3 : STD_LOGIC;
    signal zigzag_index_q3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce4 : STD_LOGIC;
    signal zigzag_index_q4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address5 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce5 : STD_LOGIC;
    signal zigzag_index_q5 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address6 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce6 : STD_LOGIC;
    signal zigzag_index_q6 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address7 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce7 : STD_LOGIC;
    signal zigzag_index_q7 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address8 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce8 : STD_LOGIC;
    signal zigzag_index_q8 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address9 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce9 : STD_LOGIC;
    signal zigzag_index_q9 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address10 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce10 : STD_LOGIC;
    signal zigzag_index_q10 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address11 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce11 : STD_LOGIC;
    signal zigzag_index_q11 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address12 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce12 : STD_LOGIC;
    signal zigzag_index_q12 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address13 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce13 : STD_LOGIC;
    signal zigzag_index_q13 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address14 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce14 : STD_LOGIC;
    signal zigzag_index_q14 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_address15 : STD_LOGIC_VECTOR (5 downto 0);
    signal zigzag_index_ce15 : STD_LOGIC;
    signal zigzag_index_q15 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_i_i_c_blk_n : STD_LOGIC;
    signal imatrix_offset_out_blk_n : STD_LOGIC;
    signal omatrix_offset_out_blk_n : STD_LOGIC;
    signal tmp_fu_589_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal offset_i_i_i_i_fu_594_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal offset_i_i_i_i_reg_946 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_i_i_i_i_i_s_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newIndex_i_i_i_i_i_reg_959 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_i_15_i_i_i_i_i_fu_902_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_i_15_i_i_i_i_i_reg_1039 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_i_i_i_i_i_i_i_reg_578 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_i_i_i_i_i_i_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_1_i_i_i_i_i_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_2_i_i_i_i_i_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_3_i_i_i_i_i_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_4_i_i_i_i_i_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_5_i_i_i_i_i_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_6_i_i_i_i_i_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_7_i_i_i_i_i_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_8_i_i_i_i_i_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_9_i_i_i_i_i_fu_789_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_i_i_i_i_i_20_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_10_i_i_i_i_i_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_11_i_i_i_i_i_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_12_i_i_i_i_i_fu_861_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_13_i_i_i_i_i_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_14_i_i_i_i_i_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex1_i_i_i_i_i_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_i_i_i_i_i_i_fu_608_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_628_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_i_i_fu_632_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_1_i_i_i_i_i_fu_638_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_i_i_i_fu_650_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_2_i_i_i_i_i_fu_656_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i_i_i_fu_668_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_3_i_i_i_i_i_fu_674_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_i_i_i_fu_686_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_4_i_i_i_i_i_fu_692_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_i_i_i_fu_704_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_5_i_i_i_i_i_fu_710_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_i_i_i_fu_722_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_6_i_i_i_i_i_fu_728_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_i_i_i_fu_740_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_7_i_i_i_i_i_fu_746_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_i_i_i_fu_758_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_8_i_i_i_i_i_fu_764_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_i_i_i_fu_776_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_9_i_i_i_i_i_fu_782_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_i_i_i_fu_794_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_i_i_i_i_i_19_fu_800_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_i_i_21_fu_812_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_10_i_i_i_i_s_fu_818_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_i_i_i_fu_830_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_11_i_i_i_i_s_fu_836_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_i_i_i_fu_848_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_12_i_i_i_i_s_fu_854_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_i_i_i_fu_866_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_13_i_i_i_i_s_fu_872_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_i_i_i_fu_884_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_i_14_i_i_i_i_s_fu_890_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component Loop_0_proc19_zigbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address3 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address4 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address5 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address6 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address7 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address8 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address9 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address10 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address11 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address12 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address13 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address14 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address15 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    zigzag_index_U : component Loop_0_proc19_zigbkb
    generic map (
        DataWidth => 6,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => zigzag_index_address0,
        ce0 => zigzag_index_ce0,
        q0 => zigzag_index_q0,
        address1 => zigzag_index_address1,
        ce1 => zigzag_index_ce1,
        q1 => zigzag_index_q1,
        address2 => zigzag_index_address2,
        ce2 => zigzag_index_ce2,
        q2 => zigzag_index_q2,
        address3 => zigzag_index_address3,
        ce3 => zigzag_index_ce3,
        q3 => zigzag_index_q3,
        address4 => zigzag_index_address4,
        ce4 => zigzag_index_ce4,
        q4 => zigzag_index_q4,
        address5 => zigzag_index_address5,
        ce5 => zigzag_index_ce5,
        q5 => zigzag_index_q5,
        address6 => zigzag_index_address6,
        ce6 => zigzag_index_ce6,
        q6 => zigzag_index_q6,
        address7 => zigzag_index_address7,
        ce7 => zigzag_index_ce7,
        q7 => zigzag_index_q7,
        address8 => zigzag_index_address8,
        ce8 => zigzag_index_ce8,
        q8 => zigzag_index_q8,
        address9 => zigzag_index_address9,
        ce9 => zigzag_index_ce9,
        q9 => zigzag_index_q9,
        address10 => zigzag_index_address10,
        ce10 => zigzag_index_ce10,
        q10 => zigzag_index_q10,
        address11 => zigzag_index_address11,
        ce11 => zigzag_index_ce11,
        q11 => zigzag_index_q11,
        address12 => zigzag_index_address12,
        ce12 => zigzag_index_ce12,
        q12 => zigzag_index_q12,
        address13 => zigzag_index_address13,
        ce13 => zigzag_index_ce13,
        q13 => zigzag_index_q13,
        address14 => zigzag_index_address14,
        ce14 => zigzag_index_ce14,
        q14 => zigzag_index_q14,
        address15 => zigzag_index_address15,
        ce15 => zigzag_index_ce15,
        q15 => zigzag_index_q15);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond1_i_i_i_i_i_s_fu_602_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_0_i_i_i_i_i_i_i_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_i_i_i_i_i_i_i_reg_578 <= j_i_15_i_i_i_i_i_reg_1039;
            elsif ((not(((ap_start = ap_const_logic_0) or (omatrix_offset_out_full_n = ap_const_logic_0) or (imatrix_offset_out_full_n = ap_const_logic_0) or (i_0_i_i_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_i_i_i_i_i_i_i_reg_578 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_i_i_i_s_fu_602_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                j_i_15_i_i_i_i_i_reg_1039 <= j_i_15_i_i_i_i_i_fu_902_p2;
                newIndex_i_i_i_i_i_reg_959 <= j_0_i_i_i_i_i_i_i_reg_578(5 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (omatrix_offset_out_full_n = ap_const_logic_0) or (imatrix_offset_out_full_n = ap_const_logic_0) or (i_0_i_i_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    offset_i_i_i_i_reg_946(5) <= offset_i_i_i_i_fu_594_p3(5);
                tmp_reg_927 <= tmp_fu_589_p1;
            end if;
        end if;
    end process;
    offset_i_i_i_i_reg_946(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, i_0_i_i_c_full_n, imatrix_offset_out_full_n, omatrix_offset_out_full_n, ap_CS_fsm_state2, exitcond1_i_i_i_i_i_s_fu_602_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (omatrix_offset_out_full_n = ap_const_logic_0) or (imatrix_offset_out_full_n = ap_const_logic_0) or (i_0_i_i_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_i_i_i_i_i_s_fu_602_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, i_0_i_i_c_full_n, imatrix_offset_out_full_n, omatrix_offset_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (omatrix_offset_out_full_n = ap_const_logic_0) or (imatrix_offset_out_full_n = ap_const_logic_0) or (i_0_i_i_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond1_i_i_i_i_i_s_fu_602_p2)
    begin
        if (((exitcond1_i_i_i_i_i_s_fu_602_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_i_i_i_i_i_s_fu_602_p2)
    begin
        if (((exitcond1_i_i_i_i_i_s_fu_602_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_i_i_i_i_s_fu_602_p2 <= "1" when (j_0_i_i_i_i_i_i_i_reg_578 = ap_const_lv6_20) else "0";

    i_0_i_i_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_0_i_i_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_0_i_i_c_blk_n <= i_0_i_i_c_full_n;
        else 
            i_0_i_i_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    i_0_i_i_c_din <= tmp_fu_589_p1;

    i_0_i_i_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_0_i_i_c_full_n, imatrix_offset_out_full_n, omatrix_offset_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (omatrix_offset_out_full_n = ap_const_logic_0) or (imatrix_offset_out_full_n = ap_const_logic_0) or (i_0_i_i_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_0_i_i_c_write <= ap_const_logic_1;
        else 
            i_0_i_i_c_write <= ap_const_logic_0;
        end if; 
    end process;


    imatrix_offset_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imatrix_offset_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imatrix_offset_out_blk_n <= imatrix_offset_out_full_n;
        else 
            imatrix_offset_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imatrix_offset_out_din <= imatrix_offset;

    imatrix_offset_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_0_i_i_c_full_n, imatrix_offset_out_full_n, omatrix_offset_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (omatrix_offset_out_full_n = ap_const_logic_0) or (imatrix_offset_out_full_n = ap_const_logic_0) or (i_0_i_i_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imatrix_offset_out_write <= ap_const_logic_1;
        else 
            imatrix_offset_out_write <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_0_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_0_ce0 <= ap_const_logic_1;
        else 
            in1_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_0_d0 <= zigzag_index_q0;

    in1_buf_0_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_0_we0 <= ap_const_logic_1;
        else 
            in1_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_10_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_10_ce0 <= ap_const_logic_1;
        else 
            in1_buf_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_10_d0 <= zigzag_index_q10;

    in1_buf_10_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_10_we0 <= ap_const_logic_1;
        else 
            in1_buf_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_11_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_11_ce0 <= ap_const_logic_1;
        else 
            in1_buf_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_11_d0 <= zigzag_index_q11;

    in1_buf_11_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_11_we0 <= ap_const_logic_1;
        else 
            in1_buf_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_12_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_12_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_12_ce0 <= ap_const_logic_1;
        else 
            in1_buf_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_12_d0 <= zigzag_index_q12;

    in1_buf_12_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_12_we0 <= ap_const_logic_1;
        else 
            in1_buf_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_13_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_13_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_13_ce0 <= ap_const_logic_1;
        else 
            in1_buf_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_13_d0 <= zigzag_index_q13;

    in1_buf_13_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_13_we0 <= ap_const_logic_1;
        else 
            in1_buf_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_14_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_14_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_14_ce0 <= ap_const_logic_1;
        else 
            in1_buf_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_14_d0 <= zigzag_index_q14;

    in1_buf_14_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_14_we0 <= ap_const_logic_1;
        else 
            in1_buf_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_15_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_15_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_15_ce0 <= ap_const_logic_1;
        else 
            in1_buf_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_15_d0 <= zigzag_index_q15;

    in1_buf_15_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_15_we0 <= ap_const_logic_1;
        else 
            in1_buf_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_1_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_1_ce0 <= ap_const_logic_1;
        else 
            in1_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_1_d0 <= zigzag_index_q1;

    in1_buf_1_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_1_we0 <= ap_const_logic_1;
        else 
            in1_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_2_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_2_ce0 <= ap_const_logic_1;
        else 
            in1_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_2_d0 <= zigzag_index_q2;

    in1_buf_2_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_2_we0 <= ap_const_logic_1;
        else 
            in1_buf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_3_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_3_ce0 <= ap_const_logic_1;
        else 
            in1_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_3_d0 <= zigzag_index_q3;

    in1_buf_3_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_3_we0 <= ap_const_logic_1;
        else 
            in1_buf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_4_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_4_ce0 <= ap_const_logic_1;
        else 
            in1_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_4_d0 <= zigzag_index_q4;

    in1_buf_4_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_4_we0 <= ap_const_logic_1;
        else 
            in1_buf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_5_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_5_ce0 <= ap_const_logic_1;
        else 
            in1_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_5_d0 <= zigzag_index_q5;

    in1_buf_5_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_5_we0 <= ap_const_logic_1;
        else 
            in1_buf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_6_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_6_ce0 <= ap_const_logic_1;
        else 
            in1_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_6_d0 <= zigzag_index_q6;

    in1_buf_6_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_6_we0 <= ap_const_logic_1;
        else 
            in1_buf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_7_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_7_ce0 <= ap_const_logic_1;
        else 
            in1_buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_7_d0 <= zigzag_index_q7;

    in1_buf_7_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_7_we0 <= ap_const_logic_1;
        else 
            in1_buf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_8_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_8_ce0 <= ap_const_logic_1;
        else 
            in1_buf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_8_d0 <= zigzag_index_q8;

    in1_buf_8_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_8_we0 <= ap_const_logic_1;
        else 
            in1_buf_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_9_address0 <= newIndex1_i_i_i_i_i_fu_908_p1(1 - 1 downto 0);

    in1_buf_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_9_ce0 <= ap_const_logic_1;
        else 
            in1_buf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_buf_9_d0 <= zigzag_index_q9;

    in1_buf_9_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_buf_9_we0 <= ap_const_logic_1;
        else 
            in1_buf_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_i_15_i_i_i_i_i_fu_902_p2 <= std_logic_vector(unsigned(ap_const_lv6_10) + unsigned(j_0_i_i_i_i_i_i_i_reg_578));
    newIndex1_i_i_i_i_i_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_i_i_i_i_i_reg_959),64));
    offset_i_10_i_i_i_i_s_fu_818_p3 <= (tmp_reg_927 & tmp_i_i_i_21_fu_812_p2);
    offset_i_11_i_i_i_i_s_fu_836_p3 <= (tmp_reg_927 & tmp_10_i_i_i_fu_830_p2);
    offset_i_12_i_i_i_i_s_fu_854_p3 <= (tmp_reg_927 & tmp_11_i_i_i_fu_848_p2);
    offset_i_13_i_i_i_i_s_fu_872_p3 <= (tmp_reg_927 & tmp_12_i_i_i_fu_866_p2);
    offset_i_14_i_i_i_i_s_fu_890_p3 <= (tmp_reg_927 & tmp_13_i_i_i_fu_884_p2);
    offset_i_1_i_i_i_i_i_fu_638_p3 <= (tmp_reg_927 & tmp_i_i_i_fu_632_p2);
    offset_i_2_i_i_i_i_i_fu_656_p3 <= (tmp_reg_927 & tmp_1_i_i_i_fu_650_p2);
    offset_i_3_i_i_i_i_i_fu_674_p3 <= (tmp_reg_927 & tmp_2_i_i_i_fu_668_p2);
    offset_i_4_i_i_i_i_i_fu_692_p3 <= (tmp_reg_927 & tmp_3_i_i_i_fu_686_p2);
    offset_i_5_i_i_i_i_i_fu_710_p3 <= (tmp_reg_927 & tmp_4_i_i_i_fu_704_p2);
    offset_i_6_i_i_i_i_i_fu_728_p3 <= (tmp_reg_927 & tmp_5_i_i_i_fu_722_p2);
    offset_i_7_i_i_i_i_i_fu_746_p3 <= (tmp_reg_927 & tmp_6_i_i_i_fu_740_p2);
    offset_i_8_i_i_i_i_i_fu_764_p3 <= (tmp_reg_927 & tmp_7_i_i_i_fu_758_p2);
    offset_i_9_i_i_i_i_i_fu_782_p3 <= (tmp_reg_927 & tmp_8_i_i_i_fu_776_p2);
    offset_i_i_i_i_fu_594_p3 <= (tmp_fu_589_p1 & ap_const_lv5_0);
    offset_i_i_i_i_i_i_19_fu_800_p3 <= (tmp_reg_927 & tmp_9_i_i_i_fu_794_p2);
    offset_i_i_i_i_i_i_fu_608_p2 <= std_logic_vector(unsigned(j_0_i_i_i_i_i_i_i_reg_578) + unsigned(offset_i_i_i_i_reg_946));

    omatrix_offset_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, omatrix_offset_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            omatrix_offset_out_blk_n <= omatrix_offset_out_full_n;
        else 
            omatrix_offset_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    omatrix_offset_out_din <= omatrix_offset;

    omatrix_offset_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_0_i_i_c_full_n, imatrix_offset_out_full_n, omatrix_offset_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (omatrix_offset_out_full_n = ap_const_logic_0) or (imatrix_offset_out_full_n = ap_const_logic_0) or (i_0_i_i_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            omatrix_offset_out_write <= ap_const_logic_1;
        else 
            omatrix_offset_out_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_i_i_i_fu_830_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_C);
    tmp_11_i_i_i_fu_848_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_D);
    tmp_12_i_i_i_fu_866_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_E);
    tmp_13_i_i_i_fu_884_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_F);
    tmp_1_fu_628_p1 <= j_0_i_i_i_i_i_i_i_reg_578(5 - 1 downto 0);
    tmp_1_i_10_i_i_i_i_i_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_10_i_i_i_i_s_fu_818_p3),64));
    tmp_1_i_11_i_i_i_i_i_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_11_i_i_i_i_s_fu_836_p3),64));
    tmp_1_i_12_i_i_i_i_i_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_12_i_i_i_i_s_fu_854_p3),64));
    tmp_1_i_13_i_i_i_i_i_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_13_i_i_i_i_s_fu_872_p3),64));
    tmp_1_i_14_i_i_i_i_i_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_14_i_i_i_i_s_fu_890_p3),64));
    tmp_1_i_1_i_i_i_i_i_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_1_i_i_i_i_i_fu_638_p3),64));
    tmp_1_i_2_i_i_i_i_i_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_2_i_i_i_i_i_fu_656_p3),64));
    tmp_1_i_3_i_i_i_i_i_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_3_i_i_i_i_i_fu_674_p3),64));
    tmp_1_i_4_i_i_i_i_i_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_4_i_i_i_i_i_fu_692_p3),64));
    tmp_1_i_5_i_i_i_i_i_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_5_i_i_i_i_i_fu_710_p3),64));
    tmp_1_i_6_i_i_i_i_i_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_6_i_i_i_i_i_fu_728_p3),64));
    tmp_1_i_7_i_i_i_i_i_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_7_i_i_i_i_i_fu_746_p3),64));
    tmp_1_i_8_i_i_i_i_i_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_8_i_i_i_i_i_fu_764_p3),64));
    tmp_1_i_9_i_i_i_i_i_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_9_i_i_i_i_i_fu_782_p3),64));
    tmp_1_i_i_i_fu_650_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_2);
    tmp_1_i_i_i_i_i_i_20_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_i_i_i_i_i_19_fu_800_p3),64));
    tmp_1_i_i_i_i_i_i_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_i_i_i_i_i_i_fu_608_p2),64));
    tmp_2_i_i_i_fu_668_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_3);
    tmp_3_i_i_i_fu_686_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_4);
    tmp_4_i_i_i_fu_704_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_5);
    tmp_5_i_i_i_fu_722_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_6);
    tmp_6_i_i_i_fu_740_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_7);
    tmp_7_i_i_i_fu_758_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_8);
    tmp_8_i_i_i_fu_776_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_9);
    tmp_9_i_i_i_fu_794_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_A);
    tmp_fu_589_p1 <= i_0_i_i(1 - 1 downto 0);
    tmp_i_i_i_21_fu_812_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_B);
    tmp_i_i_i_fu_632_p2 <= (tmp_1_fu_628_p1 or ap_const_lv5_1);
    zigzag_index_address0 <= tmp_1_i_i_i_i_i_i_fu_613_p1(6 - 1 downto 0);
    zigzag_index_address1 <= tmp_1_i_1_i_i_i_i_i_fu_645_p1(6 - 1 downto 0);
    zigzag_index_address10 <= tmp_1_i_i_i_i_i_i_20_fu_807_p1(6 - 1 downto 0);
    zigzag_index_address11 <= tmp_1_i_10_i_i_i_i_i_fu_825_p1(6 - 1 downto 0);
    zigzag_index_address12 <= tmp_1_i_11_i_i_i_i_i_fu_843_p1(6 - 1 downto 0);
    zigzag_index_address13 <= tmp_1_i_12_i_i_i_i_i_fu_861_p1(6 - 1 downto 0);
    zigzag_index_address14 <= tmp_1_i_13_i_i_i_i_i_fu_879_p1(6 - 1 downto 0);
    zigzag_index_address15 <= tmp_1_i_14_i_i_i_i_i_fu_897_p1(6 - 1 downto 0);
    zigzag_index_address2 <= tmp_1_i_2_i_i_i_i_i_fu_663_p1(6 - 1 downto 0);
    zigzag_index_address3 <= tmp_1_i_3_i_i_i_i_i_fu_681_p1(6 - 1 downto 0);
    zigzag_index_address4 <= tmp_1_i_4_i_i_i_i_i_fu_699_p1(6 - 1 downto 0);
    zigzag_index_address5 <= tmp_1_i_5_i_i_i_i_i_fu_717_p1(6 - 1 downto 0);
    zigzag_index_address6 <= tmp_1_i_6_i_i_i_i_i_fu_735_p1(6 - 1 downto 0);
    zigzag_index_address7 <= tmp_1_i_7_i_i_i_i_i_fu_753_p1(6 - 1 downto 0);
    zigzag_index_address8 <= tmp_1_i_8_i_i_i_i_i_fu_771_p1(6 - 1 downto 0);
    zigzag_index_address9 <= tmp_1_i_9_i_i_i_i_i_fu_789_p1(6 - 1 downto 0);

    zigzag_index_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce0 <= ap_const_logic_1;
        else 
            zigzag_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce1 <= ap_const_logic_1;
        else 
            zigzag_index_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce10_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce10 <= ap_const_logic_1;
        else 
            zigzag_index_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce11_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce11 <= ap_const_logic_1;
        else 
            zigzag_index_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce12_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce12 <= ap_const_logic_1;
        else 
            zigzag_index_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce13_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce13 <= ap_const_logic_1;
        else 
            zigzag_index_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce14_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce14 <= ap_const_logic_1;
        else 
            zigzag_index_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce15_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce15 <= ap_const_logic_1;
        else 
            zigzag_index_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce2_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce2 <= ap_const_logic_1;
        else 
            zigzag_index_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce3_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce3 <= ap_const_logic_1;
        else 
            zigzag_index_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce4_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce4 <= ap_const_logic_1;
        else 
            zigzag_index_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce5_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce5 <= ap_const_logic_1;
        else 
            zigzag_index_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce6_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce6 <= ap_const_logic_1;
        else 
            zigzag_index_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce7_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce7 <= ap_const_logic_1;
        else 
            zigzag_index_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce8_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce8 <= ap_const_logic_1;
        else 
            zigzag_index_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    zigzag_index_ce9_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            zigzag_index_ce9 <= ap_const_logic_1;
        else 
            zigzag_index_ce9 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
