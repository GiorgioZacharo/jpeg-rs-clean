// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in1_buf_0_address0,
        in1_buf_0_ce0,
        in1_buf_0_q0,
        m_axi_imatrix_AWVALID,
        m_axi_imatrix_AWREADY,
        m_axi_imatrix_AWADDR,
        m_axi_imatrix_AWID,
        m_axi_imatrix_AWLEN,
        m_axi_imatrix_AWSIZE,
        m_axi_imatrix_AWBURST,
        m_axi_imatrix_AWLOCK,
        m_axi_imatrix_AWCACHE,
        m_axi_imatrix_AWPROT,
        m_axi_imatrix_AWQOS,
        m_axi_imatrix_AWREGION,
        m_axi_imatrix_AWUSER,
        m_axi_imatrix_WVALID,
        m_axi_imatrix_WREADY,
        m_axi_imatrix_WDATA,
        m_axi_imatrix_WSTRB,
        m_axi_imatrix_WLAST,
        m_axi_imatrix_WID,
        m_axi_imatrix_WUSER,
        m_axi_imatrix_ARVALID,
        m_axi_imatrix_ARREADY,
        m_axi_imatrix_ARADDR,
        m_axi_imatrix_ARID,
        m_axi_imatrix_ARLEN,
        m_axi_imatrix_ARSIZE,
        m_axi_imatrix_ARBURST,
        m_axi_imatrix_ARLOCK,
        m_axi_imatrix_ARCACHE,
        m_axi_imatrix_ARPROT,
        m_axi_imatrix_ARQOS,
        m_axi_imatrix_ARREGION,
        m_axi_imatrix_ARUSER,
        m_axi_imatrix_RVALID,
        m_axi_imatrix_RREADY,
        m_axi_imatrix_RDATA,
        m_axi_imatrix_RLAST,
        m_axi_imatrix_RID,
        m_axi_imatrix_RUSER,
        m_axi_imatrix_RRESP,
        m_axi_imatrix_BVALID,
        m_axi_imatrix_BREADY,
        m_axi_imatrix_BRESP,
        m_axi_imatrix_BID,
        m_axi_imatrix_BUSER,
        imatrix_offset_dout,
        imatrix_offset_empty_n,
        imatrix_offset_read,
        out_buf_0_address0,
        out_buf_0_ce0,
        out_buf_0_we0,
        out_buf_0_d0,
        in1_buf_1_address0,
        in1_buf_1_ce0,
        in1_buf_1_q0,
        out_buf_1_address0,
        out_buf_1_ce0,
        out_buf_1_we0,
        out_buf_1_d0,
        in1_buf_2_address0,
        in1_buf_2_ce0,
        in1_buf_2_q0,
        out_buf_2_address0,
        out_buf_2_ce0,
        out_buf_2_we0,
        out_buf_2_d0,
        in1_buf_3_address0,
        in1_buf_3_ce0,
        in1_buf_3_q0,
        out_buf_3_address0,
        out_buf_3_ce0,
        out_buf_3_we0,
        out_buf_3_d0,
        in1_buf_4_address0,
        in1_buf_4_ce0,
        in1_buf_4_q0,
        out_buf_4_address0,
        out_buf_4_ce0,
        out_buf_4_we0,
        out_buf_4_d0,
        in1_buf_5_address0,
        in1_buf_5_ce0,
        in1_buf_5_q0,
        out_buf_5_address0,
        out_buf_5_ce0,
        out_buf_5_we0,
        out_buf_5_d0,
        in1_buf_6_address0,
        in1_buf_6_ce0,
        in1_buf_6_q0,
        out_buf_6_address0,
        out_buf_6_ce0,
        out_buf_6_we0,
        out_buf_6_d0,
        in1_buf_7_address0,
        in1_buf_7_ce0,
        in1_buf_7_q0,
        out_buf_7_address0,
        out_buf_7_ce0,
        out_buf_7_we0,
        out_buf_7_d0,
        in1_buf_8_address0,
        in1_buf_8_ce0,
        in1_buf_8_q0,
        out_buf_8_address0,
        out_buf_8_ce0,
        out_buf_8_we0,
        out_buf_8_d0,
        in1_buf_9_address0,
        in1_buf_9_ce0,
        in1_buf_9_q0,
        out_buf_9_address0,
        out_buf_9_ce0,
        out_buf_9_we0,
        out_buf_9_d0,
        in1_buf_10_address0,
        in1_buf_10_ce0,
        in1_buf_10_q0,
        out_buf_10_address0,
        out_buf_10_ce0,
        out_buf_10_we0,
        out_buf_10_d0,
        in1_buf_11_address0,
        in1_buf_11_ce0,
        in1_buf_11_q0,
        out_buf_11_address0,
        out_buf_11_ce0,
        out_buf_11_we0,
        out_buf_11_d0,
        in1_buf_12_address0,
        in1_buf_12_ce0,
        in1_buf_12_q0,
        out_buf_12_address0,
        out_buf_12_ce0,
        out_buf_12_we0,
        out_buf_12_d0,
        in1_buf_13_address0,
        in1_buf_13_ce0,
        in1_buf_13_q0,
        out_buf_13_address0,
        out_buf_13_ce0,
        out_buf_13_we0,
        out_buf_13_d0,
        in1_buf_14_address0,
        in1_buf_14_ce0,
        in1_buf_14_q0,
        out_buf_14_address0,
        out_buf_14_ce0,
        out_buf_14_we0,
        out_buf_14_d0,
        in1_buf_15_address0,
        in1_buf_15_ce0,
        in1_buf_15_q0,
        out_buf_15_address0,
        out_buf_15_ce0,
        out_buf_15_we0,
        out_buf_15_d0
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [0:0] in1_buf_0_address0;
output   in1_buf_0_ce0;
input  [5:0] in1_buf_0_q0;
output   m_axi_imatrix_AWVALID;
input   m_axi_imatrix_AWREADY;
output  [31:0] m_axi_imatrix_AWADDR;
output  [0:0] m_axi_imatrix_AWID;
output  [31:0] m_axi_imatrix_AWLEN;
output  [2:0] m_axi_imatrix_AWSIZE;
output  [1:0] m_axi_imatrix_AWBURST;
output  [1:0] m_axi_imatrix_AWLOCK;
output  [3:0] m_axi_imatrix_AWCACHE;
output  [2:0] m_axi_imatrix_AWPROT;
output  [3:0] m_axi_imatrix_AWQOS;
output  [3:0] m_axi_imatrix_AWREGION;
output  [0:0] m_axi_imatrix_AWUSER;
output   m_axi_imatrix_WVALID;
input   m_axi_imatrix_WREADY;
output  [31:0] m_axi_imatrix_WDATA;
output  [3:0] m_axi_imatrix_WSTRB;
output   m_axi_imatrix_WLAST;
output  [0:0] m_axi_imatrix_WID;
output  [0:0] m_axi_imatrix_WUSER;
output   m_axi_imatrix_ARVALID;
input   m_axi_imatrix_ARREADY;
output  [31:0] m_axi_imatrix_ARADDR;
output  [0:0] m_axi_imatrix_ARID;
output  [31:0] m_axi_imatrix_ARLEN;
output  [2:0] m_axi_imatrix_ARSIZE;
output  [1:0] m_axi_imatrix_ARBURST;
output  [1:0] m_axi_imatrix_ARLOCK;
output  [3:0] m_axi_imatrix_ARCACHE;
output  [2:0] m_axi_imatrix_ARPROT;
output  [3:0] m_axi_imatrix_ARQOS;
output  [3:0] m_axi_imatrix_ARREGION;
output  [0:0] m_axi_imatrix_ARUSER;
input   m_axi_imatrix_RVALID;
output   m_axi_imatrix_RREADY;
input  [31:0] m_axi_imatrix_RDATA;
input   m_axi_imatrix_RLAST;
input  [0:0] m_axi_imatrix_RID;
input  [0:0] m_axi_imatrix_RUSER;
input  [1:0] m_axi_imatrix_RRESP;
input   m_axi_imatrix_BVALID;
output   m_axi_imatrix_BREADY;
input  [1:0] m_axi_imatrix_BRESP;
input  [0:0] m_axi_imatrix_BID;
input  [0:0] m_axi_imatrix_BUSER;
input  [29:0] imatrix_offset_dout;
input   imatrix_offset_empty_n;
output   imatrix_offset_read;
output  [0:0] out_buf_0_address0;
output   out_buf_0_ce0;
output   out_buf_0_we0;
output  [31:0] out_buf_0_d0;
output  [0:0] in1_buf_1_address0;
output   in1_buf_1_ce0;
input  [5:0] in1_buf_1_q0;
output  [0:0] out_buf_1_address0;
output   out_buf_1_ce0;
output   out_buf_1_we0;
output  [31:0] out_buf_1_d0;
output  [0:0] in1_buf_2_address0;
output   in1_buf_2_ce0;
input  [5:0] in1_buf_2_q0;
output  [0:0] out_buf_2_address0;
output   out_buf_2_ce0;
output   out_buf_2_we0;
output  [31:0] out_buf_2_d0;
output  [0:0] in1_buf_3_address0;
output   in1_buf_3_ce0;
input  [5:0] in1_buf_3_q0;
output  [0:0] out_buf_3_address0;
output   out_buf_3_ce0;
output   out_buf_3_we0;
output  [31:0] out_buf_3_d0;
output  [0:0] in1_buf_4_address0;
output   in1_buf_4_ce0;
input  [5:0] in1_buf_4_q0;
output  [0:0] out_buf_4_address0;
output   out_buf_4_ce0;
output   out_buf_4_we0;
output  [31:0] out_buf_4_d0;
output  [0:0] in1_buf_5_address0;
output   in1_buf_5_ce0;
input  [5:0] in1_buf_5_q0;
output  [0:0] out_buf_5_address0;
output   out_buf_5_ce0;
output   out_buf_5_we0;
output  [31:0] out_buf_5_d0;
output  [0:0] in1_buf_6_address0;
output   in1_buf_6_ce0;
input  [5:0] in1_buf_6_q0;
output  [0:0] out_buf_6_address0;
output   out_buf_6_ce0;
output   out_buf_6_we0;
output  [31:0] out_buf_6_d0;
output  [0:0] in1_buf_7_address0;
output   in1_buf_7_ce0;
input  [5:0] in1_buf_7_q0;
output  [0:0] out_buf_7_address0;
output   out_buf_7_ce0;
output   out_buf_7_we0;
output  [31:0] out_buf_7_d0;
output  [0:0] in1_buf_8_address0;
output   in1_buf_8_ce0;
input  [5:0] in1_buf_8_q0;
output  [0:0] out_buf_8_address0;
output   out_buf_8_ce0;
output   out_buf_8_we0;
output  [31:0] out_buf_8_d0;
output  [0:0] in1_buf_9_address0;
output   in1_buf_9_ce0;
input  [5:0] in1_buf_9_q0;
output  [0:0] out_buf_9_address0;
output   out_buf_9_ce0;
output   out_buf_9_we0;
output  [31:0] out_buf_9_d0;
output  [0:0] in1_buf_10_address0;
output   in1_buf_10_ce0;
input  [5:0] in1_buf_10_q0;
output  [0:0] out_buf_10_address0;
output   out_buf_10_ce0;
output   out_buf_10_we0;
output  [31:0] out_buf_10_d0;
output  [0:0] in1_buf_11_address0;
output   in1_buf_11_ce0;
input  [5:0] in1_buf_11_q0;
output  [0:0] out_buf_11_address0;
output   out_buf_11_ce0;
output   out_buf_11_we0;
output  [31:0] out_buf_11_d0;
output  [0:0] in1_buf_12_address0;
output   in1_buf_12_ce0;
input  [5:0] in1_buf_12_q0;
output  [0:0] out_buf_12_address0;
output   out_buf_12_ce0;
output   out_buf_12_we0;
output  [31:0] out_buf_12_d0;
output  [0:0] in1_buf_13_address0;
output   in1_buf_13_ce0;
input  [5:0] in1_buf_13_q0;
output  [0:0] out_buf_13_address0;
output   out_buf_13_ce0;
output   out_buf_13_we0;
output  [31:0] out_buf_13_d0;
output  [0:0] in1_buf_14_address0;
output   in1_buf_14_ce0;
input  [5:0] in1_buf_14_q0;
output  [0:0] out_buf_14_address0;
output   out_buf_14_ce0;
output   out_buf_14_we0;
output  [31:0] out_buf_14_d0;
output  [0:0] in1_buf_15_address0;
output   in1_buf_15_ce0;
input  [5:0] in1_buf_15_q0;
output  [0:0] out_buf_15_address0;
output   out_buf_15_ce0;
output   out_buf_15_we0;
output  [31:0] out_buf_15_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_buf_0_ce0;
reg m_axi_imatrix_ARVALID;
reg[31:0] m_axi_imatrix_ARADDR;
reg m_axi_imatrix_RREADY;
reg imatrix_offset_read;
reg out_buf_0_ce0;
reg out_buf_0_we0;
reg in1_buf_1_ce0;
reg out_buf_1_ce0;
reg out_buf_1_we0;
reg in1_buf_2_ce0;
reg out_buf_2_ce0;
reg out_buf_2_we0;
reg in1_buf_3_ce0;
reg out_buf_3_ce0;
reg out_buf_3_we0;
reg in1_buf_4_ce0;
reg out_buf_4_ce0;
reg out_buf_4_we0;
reg in1_buf_5_ce0;
reg out_buf_5_ce0;
reg out_buf_5_we0;
reg in1_buf_6_ce0;
reg out_buf_6_ce0;
reg out_buf_6_we0;
reg in1_buf_7_ce0;
reg out_buf_7_ce0;
reg out_buf_7_we0;
reg in1_buf_8_ce0;
reg out_buf_8_ce0;
reg out_buf_8_we0;
reg in1_buf_9_ce0;
reg out_buf_9_ce0;
reg out_buf_9_we0;
reg in1_buf_10_ce0;
reg out_buf_10_ce0;
reg out_buf_10_we0;
reg in1_buf_11_ce0;
reg out_buf_11_ce0;
reg out_buf_11_we0;
reg in1_buf_12_ce0;
reg out_buf_12_ce0;
reg out_buf_12_we0;
reg in1_buf_13_ce0;
reg out_buf_13_ce0;
reg out_buf_13_we0;
reg in1_buf_14_ce0;
reg out_buf_14_ce0;
reg out_buf_14_we0;
reg in1_buf_15_ce0;
reg out_buf_15_ce0;
reg out_buf_15_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    imatrix_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    imatrix_blk_n_R;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
reg    imatrix_offset_blk_n;
wire   [30:0] sext_cast_i_i_fu_719_p1;
reg   [30:0] sext_cast_i_i_reg_1054;
reg    ap_block_state1;
wire   [63:0] newIndex3_i_i_fu_739_p1;
reg   [63:0] newIndex3_i_i_reg_1077;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i_i_i_i_fu_723_p2;
wire   [5:0] k_i_i_i_fu_744_p2;
reg   [5:0] k_i_i_i_reg_1117;
wire   [30:0] sum_i_i_fu_754_p2;
reg   [30:0] sum_i_i_reg_1122;
wire    ap_CS_fsm_state3;
reg    ap_sig_ioackin_m_axi_imatrix_ARREADY;
wire   [30:0] sum2_i_i_fu_773_p2;
reg   [30:0] sum2_i_i_reg_1138;
wire   [30:0] sum4_i_i_fu_792_p2;
reg   [30:0] sum4_i_i_reg_1154;
wire   [30:0] sum6_i_i_fu_811_p2;
reg   [30:0] sum6_i_i_reg_1170;
wire   [30:0] sum8_i_i_fu_830_p2;
reg   [30:0] sum8_i_i_reg_1186;
wire   [30:0] sum1_i_i_fu_849_p2;
reg   [30:0] sum1_i_i_reg_1202;
wire   [30:0] sum3_i_i_fu_868_p2;
reg   [30:0] sum3_i_i_reg_1218;
wire   [30:0] sum5_i_i_fu_887_p2;
reg   [30:0] sum5_i_i_reg_1234;
reg   [31:0] imatrix_addr_read_reg_1244;
wire   [30:0] sum7_i_i_fu_906_p2;
reg   [30:0] sum7_i_i_reg_1255;
reg   [31:0] imatrix_addr_1_read_reg_1265;
wire   [30:0] sum9_i_i_fu_925_p2;
reg   [30:0] sum9_i_i_reg_1276;
reg   [31:0] imatrix_addr_2_read_reg_1286;
wire   [30:0] sum10_i_i_fu_944_p2;
reg   [30:0] sum10_i_i_reg_1297;
reg   [31:0] imatrix_addr_3_read_reg_1307;
wire   [30:0] sum11_i_i_fu_963_p2;
reg   [30:0] sum11_i_i_reg_1318;
reg   [31:0] imatrix_addr_4_read_reg_1328;
wire   [30:0] sum12_i_i_fu_982_p2;
reg   [30:0] sum12_i_i_reg_1339;
reg   [31:0] imatrix_addr_5_read_reg_1349;
wire   [30:0] sum13_i_i_fu_1001_p2;
reg   [30:0] sum13_i_i_reg_1360;
reg   [31:0] imatrix_addr_6_read_reg_1370;
wire   [30:0] sum14_i_i_fu_1020_p2;
reg   [30:0] sum14_i_i_reg_1381;
reg   [31:0] imatrix_addr_7_read_reg_1391;
wire   [30:0] sum15_i_i_fu_1039_p2;
reg   [30:0] sum15_i_i_reg_1402;
reg   [31:0] imatrix_addr_8_read_reg_1407;
reg   [31:0] imatrix_addr_9_read_reg_1418;
reg   [31:0] imatrix_addr_10_read_reg_1423;
reg   [31:0] imatrix_addr_11_read_reg_1428;
reg   [31:0] imatrix_addr_12_read_reg_1433;
reg   [31:0] imatrix_addr_13_read_reg_1438;
reg   [31:0] imatrix_addr_14_read_reg_1443;
reg   [31:0] imatrix_addr_15_read_reg_1448;
reg   [5:0] k_0_i_i_i_i_reg_708;
wire    ap_CS_fsm_state27;
wire   [63:0] sum_cast_i_i_fu_759_p1;
wire   [63:0] sum2_cast_i_i_fu_778_p1;
wire   [63:0] sum4_cast_i_i_fu_797_p1;
wire   [63:0] sum6_cast_i_i_fu_816_p1;
wire   [63:0] sum8_cast_i_i_fu_835_p1;
wire   [63:0] sum1_cast_i_i_fu_854_p1;
wire   [63:0] sum3_cast_i_i_fu_873_p1;
wire   [63:0] sum5_cast_i_i_fu_892_p1;
wire   [63:0] sum7_cast_i_i_fu_911_p1;
wire   [63:0] sum9_cast_i_i_fu_930_p1;
wire   [63:0] sum10_cast_i_i_fu_949_p1;
wire   [63:0] sum11_cast_i_i_fu_968_p1;
wire   [63:0] sum12_cast_i_i_fu_987_p1;
wire   [63:0] sum13_cast_i_i_fu_1006_p1;
wire   [63:0] sum14_cast_i_i_fu_1025_p1;
wire   [63:0] sum15_cast_i_i_fu_1044_p1;
reg    ap_reg_ioackin_m_axi_imatrix_ARREADY;
wire   [1:0] newIndex2_i_i_fu_729_p4;
wire   [30:0] tmp_5_i_cast_i_i_fu_750_p1;
wire   [30:0] tmp_5_i_1_cast_i_i_fu_769_p1;
wire   [30:0] tmp_5_i_2_cast_i_i_fu_788_p1;
wire   [30:0] tmp_5_i_3_cast_i_i_fu_807_p1;
wire   [30:0] tmp_5_i_4_cast_i_i_fu_826_p1;
wire   [30:0] tmp_5_i_5_cast_i_i_fu_845_p1;
wire   [30:0] tmp_5_i_6_cast_i_i_fu_864_p1;
wire   [30:0] tmp_5_i_7_cast_i_i_fu_883_p1;
wire   [30:0] tmp_5_i_8_cast_i_i_fu_902_p1;
wire   [30:0] tmp_5_i_9_cast_i_i_fu_921_p1;
wire   [30:0] tmp_5_i_cast_i_i_18_fu_940_p1;
wire   [30:0] tmp_5_i_10_cast_i_i_fu_959_p1;
wire   [30:0] tmp_5_i_11_cast_i_i_fu_978_p1;
wire   [30:0] tmp_5_i_12_cast_i_i_fu_997_p1;
wire   [30:0] tmp_5_i_13_cast_i_i_fu_1016_p1;
wire   [30:0] tmp_5_i_14_cast_i_i_fu_1035_p1;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 27'd1;
#0 ap_reg_ioackin_m_axi_imatrix_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_i_i_i_i_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_imatrix_ARREADY <= 1'b0;
    end else begin
        if (((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | ((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | ((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | ((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | ((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | ((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state12)) | ((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | ((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
            ap_reg_ioackin_m_axi_imatrix_ARREADY <= 1'b0;
        end else if ((((m_axi_imatrix_RVALID == 1'b1) & (m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((m_axi_imatrix_RVALID == 1'b1) & (m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((m_axi_imatrix_RVALID == 1'b1) & (m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((m_axi_imatrix_RVALID == 1'b1) & (m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((m_axi_imatrix_RVALID == 1'b1) & (m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((m_axi_imatrix_RVALID == 1'b1) & (m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((m_axi_imatrix_RVALID == 1'b1) & (m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((m_axi_imatrix_RVALID == 1'b1) & (m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((m_axi_imatrix_RVALID == 1'b1) & (m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
            ap_reg_ioackin_m_axi_imatrix_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (imatrix_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_i_i_i_i_reg_708 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        k_0_i_i_i_i_reg_708 <= k_i_i_i_reg_1117;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        imatrix_addr_10_read_reg_1423 <= m_axi_imatrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        imatrix_addr_11_read_reg_1428 <= m_axi_imatrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        imatrix_addr_12_read_reg_1433 <= m_axi_imatrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        imatrix_addr_13_read_reg_1438 <= m_axi_imatrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        imatrix_addr_14_read_reg_1443 <= m_axi_imatrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        imatrix_addr_15_read_reg_1448 <= m_axi_imatrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        imatrix_addr_1_read_reg_1265 <= m_axi_imatrix_RDATA;
        sum9_i_i_reg_1276 <= sum9_i_i_fu_925_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
        imatrix_addr_2_read_reg_1286 <= m_axi_imatrix_RDATA;
        sum10_i_i_reg_1297 <= sum10_i_i_fu_944_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        imatrix_addr_3_read_reg_1307 <= m_axi_imatrix_RDATA;
        sum11_i_i_reg_1318 <= sum11_i_i_fu_963_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        imatrix_addr_4_read_reg_1328 <= m_axi_imatrix_RDATA;
        sum12_i_i_reg_1339 <= sum12_i_i_fu_982_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        imatrix_addr_5_read_reg_1349 <= m_axi_imatrix_RDATA;
        sum13_i_i_reg_1360 <= sum13_i_i_fu_1001_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
        imatrix_addr_6_read_reg_1370 <= m_axi_imatrix_RDATA;
        sum14_i_i_reg_1381 <= sum14_i_i_fu_1020_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        imatrix_addr_7_read_reg_1391 <= m_axi_imatrix_RDATA;
        sum15_i_i_reg_1402 <= sum15_i_i_fu_1039_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
        imatrix_addr_8_read_reg_1407 <= m_axi_imatrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        imatrix_addr_9_read_reg_1418 <= m_axi_imatrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        imatrix_addr_read_reg_1244 <= m_axi_imatrix_RDATA;
        sum7_i_i_reg_1255 <= sum7_i_i_fu_906_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_i_i_i_fu_723_p2 == 1'd0))) begin
        k_i_i_i_reg_1117 <= k_i_i_i_fu_744_p2;
        newIndex3_i_i_reg_1077[1 : 0] <= newIndex3_i_i_fu_739_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (imatrix_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_cast_i_i_reg_1054[29 : 0] <= sext_cast_i_i_fu_719_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        sum1_i_i_reg_1202 <= sum1_i_i_fu_849_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        sum2_i_i_reg_1138 <= sum2_i_i_fu_773_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        sum3_i_i_reg_1218 <= sum3_i_i_fu_868_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        sum4_i_i_reg_1154 <= sum4_i_i_fu_792_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        sum5_i_i_reg_1234 <= sum5_i_i_fu_887_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        sum6_i_i_reg_1170 <= sum6_i_i_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        sum8_i_i_reg_1186 <= sum8_i_i_fu_830_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_i_i_reg_1122 <= sum_i_i_fu_754_p2;
    end
end

always @ (*) begin
    if (((exitcond_i_i_i_i_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_i_i_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_imatrix_ARREADY = m_axi_imatrix_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_imatrix_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        imatrix_blk_n_AR = m_axi_imatrix_ARREADY;
    end else begin
        imatrix_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        imatrix_blk_n_R = m_axi_imatrix_RVALID;
    end else begin
        imatrix_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        imatrix_offset_blk_n = imatrix_offset_empty_n;
    end else begin
        imatrix_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (imatrix_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        imatrix_offset_read = 1'b1;
    end else begin
        imatrix_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in1_buf_0_ce0 = 1'b1;
    end else begin
        in1_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        in1_buf_10_ce0 = 1'b1;
    end else begin
        in1_buf_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
        in1_buf_11_ce0 = 1'b1;
    end else begin
        in1_buf_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        in1_buf_12_ce0 = 1'b1;
    end else begin
        in1_buf_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        in1_buf_13_ce0 = 1'b1;
    end else begin
        in1_buf_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        in1_buf_14_ce0 = 1'b1;
    end else begin
        in1_buf_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
        in1_buf_15_ce0 = 1'b1;
    end else begin
        in1_buf_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in1_buf_1_ce0 = 1'b1;
    end else begin
        in1_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in1_buf_2_ce0 = 1'b1;
    end else begin
        in1_buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        in1_buf_3_ce0 = 1'b1;
    end else begin
        in1_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        in1_buf_4_ce0 = 1'b1;
    end else begin
        in1_buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        in1_buf_5_ce0 = 1'b1;
    end else begin
        in1_buf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        in1_buf_6_ce0 = 1'b1;
    end else begin
        in1_buf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        in1_buf_7_ce0 = 1'b1;
    end else begin
        in1_buf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        in1_buf_8_ce0 = 1'b1;
    end else begin
        in1_buf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        in1_buf_9_ce0 = 1'b1;
    end else begin
        in1_buf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0)) begin
        if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
            m_axi_imatrix_ARADDR = sum15_cast_i_i_fu_1044_p1;
        end else if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
            m_axi_imatrix_ARADDR = sum14_cast_i_i_fu_1025_p1;
        end else if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
            m_axi_imatrix_ARADDR = sum13_cast_i_i_fu_1006_p1;
        end else if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
            m_axi_imatrix_ARADDR = sum12_cast_i_i_fu_987_p1;
        end else if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
            m_axi_imatrix_ARADDR = sum11_cast_i_i_fu_968_p1;
        end else if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
            m_axi_imatrix_ARADDR = sum10_cast_i_i_fu_949_p1;
        end else if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            m_axi_imatrix_ARADDR = sum9_cast_i_i_fu_930_p1;
        end else if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            m_axi_imatrix_ARADDR = sum7_cast_i_i_fu_911_p1;
        end else if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
            m_axi_imatrix_ARADDR = sum5_cast_i_i_fu_892_p1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            m_axi_imatrix_ARADDR = sum3_cast_i_i_fu_873_p1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            m_axi_imatrix_ARADDR = sum1_cast_i_i_fu_854_p1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            m_axi_imatrix_ARADDR = sum8_cast_i_i_fu_835_p1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            m_axi_imatrix_ARADDR = sum6_cast_i_i_fu_816_p1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            m_axi_imatrix_ARADDR = sum4_cast_i_i_fu_797_p1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            m_axi_imatrix_ARADDR = sum2_cast_i_i_fu_778_p1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            m_axi_imatrix_ARADDR = sum_cast_i_i_fu_759_p1;
        end else begin
            m_axi_imatrix_ARADDR = 'bx;
        end
    end else begin
        m_axi_imatrix_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_imatrix_RVALID == 1'b1) & (ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((m_axi_imatrix_RVALID == 1'b1) & (ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state18)) | ((m_axi_imatrix_RVALID == 1'b1) & (ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((m_axi_imatrix_RVALID == 1'b1) & (ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((m_axi_imatrix_RVALID == 1'b1) & (ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((m_axi_imatrix_RVALID == 1'b1) & (ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((m_axi_imatrix_RVALID == 1'b1) & (ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state13)) | ((ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((m_axi_imatrix_RVALID == 1'b1) & (ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state12)) | ((ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((m_axi_imatrix_RVALID == 1'b1) & (ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_reg_ioackin_m_axi_imatrix_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
        m_axi_imatrix_ARVALID = 1'b1;
    end else begin
        m_axi_imatrix_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state12)) | (~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state11)))) begin
        m_axi_imatrix_RREADY = 1'b1;
    end else begin
        m_axi_imatrix_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        out_buf_0_ce0 = 1'b1;
    end else begin
        out_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        out_buf_0_we0 = 1'b1;
    end else begin
        out_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        out_buf_10_ce0 = 1'b1;
    end else begin
        out_buf_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        out_buf_10_we0 = 1'b1;
    end else begin
        out_buf_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        out_buf_11_ce0 = 1'b1;
    end else begin
        out_buf_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        out_buf_11_we0 = 1'b1;
    end else begin
        out_buf_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        out_buf_12_ce0 = 1'b1;
    end else begin
        out_buf_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        out_buf_12_we0 = 1'b1;
    end else begin
        out_buf_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        out_buf_13_ce0 = 1'b1;
    end else begin
        out_buf_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        out_buf_13_we0 = 1'b1;
    end else begin
        out_buf_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        out_buf_14_ce0 = 1'b1;
    end else begin
        out_buf_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        out_buf_14_we0 = 1'b1;
    end else begin
        out_buf_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        out_buf_15_ce0 = 1'b1;
    end else begin
        out_buf_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        out_buf_15_we0 = 1'b1;
    end else begin
        out_buf_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
        out_buf_1_ce0 = 1'b1;
    end else begin
        out_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
        out_buf_1_we0 = 1'b1;
    end else begin
        out_buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        out_buf_2_ce0 = 1'b1;
    end else begin
        out_buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        out_buf_2_we0 = 1'b1;
    end else begin
        out_buf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        out_buf_3_ce0 = 1'b1;
    end else begin
        out_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        out_buf_3_we0 = 1'b1;
    end else begin
        out_buf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        out_buf_4_ce0 = 1'b1;
    end else begin
        out_buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        out_buf_4_we0 = 1'b1;
    end else begin
        out_buf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
        out_buf_5_ce0 = 1'b1;
    end else begin
        out_buf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
        out_buf_5_we0 = 1'b1;
    end else begin
        out_buf_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buf_6_ce0 = 1'b1;
    end else begin
        out_buf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buf_6_we0 = 1'b1;
    end else begin
        out_buf_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
        out_buf_7_ce0 = 1'b1;
    end else begin
        out_buf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
        out_buf_7_we0 = 1'b1;
    end else begin
        out_buf_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        out_buf_8_ce0 = 1'b1;
    end else begin
        out_buf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        out_buf_8_we0 = 1'b1;
    end else begin
        out_buf_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        out_buf_9_ce0 = 1'b1;
    end else begin
        out_buf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        out_buf_9_we0 = 1'b1;
    end else begin
        out_buf_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (imatrix_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_i_i_i_i_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if ((~((m_axi_imatrix_RVALID == 1'b0) | (ap_sig_ioackin_m_axi_imatrix_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((m_axi_imatrix_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (imatrix_offset_empty_n == 1'b0));
end

assign exitcond_i_i_i_i_fu_723_p2 = ((k_0_i_i_i_i_reg_708 == 6'd32) ? 1'b1 : 1'b0);

assign in1_buf_0_address0 = newIndex3_i_i_fu_739_p1;

assign in1_buf_10_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_11_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_12_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_13_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_14_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_15_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_1_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_2_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_3_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_4_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_5_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_6_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_7_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_8_address0 = newIndex3_i_i_reg_1077;

assign in1_buf_9_address0 = newIndex3_i_i_reg_1077;

assign k_i_i_i_fu_744_p2 = (k_0_i_i_i_i_reg_708 + 6'd16);

assign m_axi_imatrix_ARBURST = 2'd0;

assign m_axi_imatrix_ARCACHE = 4'd0;

assign m_axi_imatrix_ARID = 1'd0;

assign m_axi_imatrix_ARLEN = 32'd1;

assign m_axi_imatrix_ARLOCK = 2'd0;

assign m_axi_imatrix_ARPROT = 3'd0;

assign m_axi_imatrix_ARQOS = 4'd0;

assign m_axi_imatrix_ARREGION = 4'd0;

assign m_axi_imatrix_ARSIZE = 3'd0;

assign m_axi_imatrix_ARUSER = 1'd0;

assign m_axi_imatrix_AWADDR = 32'd0;

assign m_axi_imatrix_AWBURST = 2'd0;

assign m_axi_imatrix_AWCACHE = 4'd0;

assign m_axi_imatrix_AWID = 1'd0;

assign m_axi_imatrix_AWLEN = 32'd0;

assign m_axi_imatrix_AWLOCK = 2'd0;

assign m_axi_imatrix_AWPROT = 3'd0;

assign m_axi_imatrix_AWQOS = 4'd0;

assign m_axi_imatrix_AWREGION = 4'd0;

assign m_axi_imatrix_AWSIZE = 3'd0;

assign m_axi_imatrix_AWUSER = 1'd0;

assign m_axi_imatrix_AWVALID = 1'b0;

assign m_axi_imatrix_BREADY = 1'b0;

assign m_axi_imatrix_WDATA = 32'd0;

assign m_axi_imatrix_WID = 1'd0;

assign m_axi_imatrix_WLAST = 1'b0;

assign m_axi_imatrix_WSTRB = 4'd0;

assign m_axi_imatrix_WUSER = 1'd0;

assign m_axi_imatrix_WVALID = 1'b0;

assign newIndex2_i_i_fu_729_p4 = {{k_0_i_i_i_i_reg_708[5:4]}};

assign newIndex3_i_i_fu_739_p1 = newIndex2_i_i_fu_729_p4;

assign out_buf_0_address0 = newIndex3_i_i_reg_1077;

assign out_buf_0_d0 = imatrix_addr_read_reg_1244;

assign out_buf_10_address0 = newIndex3_i_i_reg_1077;

assign out_buf_10_d0 = imatrix_addr_10_read_reg_1423;

assign out_buf_11_address0 = newIndex3_i_i_reg_1077;

assign out_buf_11_d0 = imatrix_addr_11_read_reg_1428;

assign out_buf_12_address0 = newIndex3_i_i_reg_1077;

assign out_buf_12_d0 = imatrix_addr_12_read_reg_1433;

assign out_buf_13_address0 = newIndex3_i_i_reg_1077;

assign out_buf_13_d0 = imatrix_addr_13_read_reg_1438;

assign out_buf_14_address0 = newIndex3_i_i_reg_1077;

assign out_buf_14_d0 = imatrix_addr_14_read_reg_1443;

assign out_buf_15_address0 = newIndex3_i_i_reg_1077;

assign out_buf_15_d0 = imatrix_addr_15_read_reg_1448;

assign out_buf_1_address0 = newIndex3_i_i_reg_1077;

assign out_buf_1_d0 = imatrix_addr_1_read_reg_1265;

assign out_buf_2_address0 = newIndex3_i_i_reg_1077;

assign out_buf_2_d0 = imatrix_addr_2_read_reg_1286;

assign out_buf_3_address0 = newIndex3_i_i_reg_1077;

assign out_buf_3_d0 = imatrix_addr_3_read_reg_1307;

assign out_buf_4_address0 = newIndex3_i_i_reg_1077;

assign out_buf_4_d0 = imatrix_addr_4_read_reg_1328;

assign out_buf_5_address0 = newIndex3_i_i_reg_1077;

assign out_buf_5_d0 = imatrix_addr_5_read_reg_1349;

assign out_buf_6_address0 = newIndex3_i_i_reg_1077;

assign out_buf_6_d0 = imatrix_addr_6_read_reg_1370;

assign out_buf_7_address0 = newIndex3_i_i_reg_1077;

assign out_buf_7_d0 = imatrix_addr_7_read_reg_1391;

assign out_buf_8_address0 = newIndex3_i_i_reg_1077;

assign out_buf_8_d0 = imatrix_addr_8_read_reg_1407;

assign out_buf_9_address0 = newIndex3_i_i_reg_1077;

assign out_buf_9_d0 = imatrix_addr_9_read_reg_1418;

assign sext_cast_i_i_fu_719_p1 = imatrix_offset_dout;

assign sum10_cast_i_i_fu_949_p1 = sum10_i_i_reg_1297;

assign sum10_i_i_fu_944_p2 = (tmp_5_i_cast_i_i_18_fu_940_p1 + sext_cast_i_i_reg_1054);

assign sum11_cast_i_i_fu_968_p1 = sum11_i_i_reg_1318;

assign sum11_i_i_fu_963_p2 = (tmp_5_i_10_cast_i_i_fu_959_p1 + sext_cast_i_i_reg_1054);

assign sum12_cast_i_i_fu_987_p1 = sum12_i_i_reg_1339;

assign sum12_i_i_fu_982_p2 = (tmp_5_i_11_cast_i_i_fu_978_p1 + sext_cast_i_i_reg_1054);

assign sum13_cast_i_i_fu_1006_p1 = sum13_i_i_reg_1360;

assign sum13_i_i_fu_1001_p2 = (tmp_5_i_12_cast_i_i_fu_997_p1 + sext_cast_i_i_reg_1054);

assign sum14_cast_i_i_fu_1025_p1 = sum14_i_i_reg_1381;

assign sum14_i_i_fu_1020_p2 = (tmp_5_i_13_cast_i_i_fu_1016_p1 + sext_cast_i_i_reg_1054);

assign sum15_cast_i_i_fu_1044_p1 = sum15_i_i_reg_1402;

assign sum15_i_i_fu_1039_p2 = (tmp_5_i_14_cast_i_i_fu_1035_p1 + sext_cast_i_i_reg_1054);

assign sum1_cast_i_i_fu_854_p1 = sum1_i_i_reg_1202;

assign sum1_i_i_fu_849_p2 = (tmp_5_i_5_cast_i_i_fu_845_p1 + sext_cast_i_i_reg_1054);

assign sum2_cast_i_i_fu_778_p1 = sum2_i_i_reg_1138;

assign sum2_i_i_fu_773_p2 = (tmp_5_i_1_cast_i_i_fu_769_p1 + sext_cast_i_i_reg_1054);

assign sum3_cast_i_i_fu_873_p1 = sum3_i_i_reg_1218;

assign sum3_i_i_fu_868_p2 = (tmp_5_i_6_cast_i_i_fu_864_p1 + sext_cast_i_i_reg_1054);

assign sum4_cast_i_i_fu_797_p1 = sum4_i_i_reg_1154;

assign sum4_i_i_fu_792_p2 = (tmp_5_i_2_cast_i_i_fu_788_p1 + sext_cast_i_i_reg_1054);

assign sum5_cast_i_i_fu_892_p1 = sum5_i_i_reg_1234;

assign sum5_i_i_fu_887_p2 = (tmp_5_i_7_cast_i_i_fu_883_p1 + sext_cast_i_i_reg_1054);

assign sum6_cast_i_i_fu_816_p1 = sum6_i_i_reg_1170;

assign sum6_i_i_fu_811_p2 = (tmp_5_i_3_cast_i_i_fu_807_p1 + sext_cast_i_i_reg_1054);

assign sum7_cast_i_i_fu_911_p1 = sum7_i_i_reg_1255;

assign sum7_i_i_fu_906_p2 = (tmp_5_i_8_cast_i_i_fu_902_p1 + sext_cast_i_i_reg_1054);

assign sum8_cast_i_i_fu_835_p1 = sum8_i_i_reg_1186;

assign sum8_i_i_fu_830_p2 = (tmp_5_i_4_cast_i_i_fu_826_p1 + sext_cast_i_i_reg_1054);

assign sum9_cast_i_i_fu_930_p1 = sum9_i_i_reg_1276;

assign sum9_i_i_fu_925_p2 = (tmp_5_i_9_cast_i_i_fu_921_p1 + sext_cast_i_i_reg_1054);

assign sum_cast_i_i_fu_759_p1 = sum_i_i_reg_1122;

assign sum_i_i_fu_754_p2 = (tmp_5_i_cast_i_i_fu_750_p1 + sext_cast_i_i_reg_1054);

assign tmp_5_i_10_cast_i_i_fu_959_p1 = in1_buf_11_q0;

assign tmp_5_i_11_cast_i_i_fu_978_p1 = in1_buf_12_q0;

assign tmp_5_i_12_cast_i_i_fu_997_p1 = in1_buf_13_q0;

assign tmp_5_i_13_cast_i_i_fu_1016_p1 = in1_buf_14_q0;

assign tmp_5_i_14_cast_i_i_fu_1035_p1 = in1_buf_15_q0;

assign tmp_5_i_1_cast_i_i_fu_769_p1 = in1_buf_1_q0;

assign tmp_5_i_2_cast_i_i_fu_788_p1 = in1_buf_2_q0;

assign tmp_5_i_3_cast_i_i_fu_807_p1 = in1_buf_3_q0;

assign tmp_5_i_4_cast_i_i_fu_826_p1 = in1_buf_4_q0;

assign tmp_5_i_5_cast_i_i_fu_845_p1 = in1_buf_5_q0;

assign tmp_5_i_6_cast_i_i_fu_864_p1 = in1_buf_6_q0;

assign tmp_5_i_7_cast_i_i_fu_883_p1 = in1_buf_7_q0;

assign tmp_5_i_8_cast_i_i_fu_902_p1 = in1_buf_8_q0;

assign tmp_5_i_9_cast_i_i_fu_921_p1 = in1_buf_9_q0;

assign tmp_5_i_cast_i_i_18_fu_940_p1 = in1_buf_10_q0;

assign tmp_5_i_cast_i_i_fu_750_p1 = in1_buf_0_q0;

always @ (posedge ap_clk) begin
    sext_cast_i_i_reg_1054[30] <= 1'b0;
    newIndex3_i_i_reg_1077[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //Loop_1_proc
